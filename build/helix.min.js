HX={VERSION:"0.1",TypedArray:"undefined"!=typeof Float32Array?Float32Array:Array},HX.InitOptions=function(){this.useHDR=!1,this.useLinearSpace=!0,this.customLights=[],this.debug=!1,this.ignoreDrawBuffersExtension=!1,this.ignoreDepthTexturesExtension=!1,this.ignoreTextureLODExtension=!1,this.ignoreHalfFloatTextureExtension=!1,this.throwOnShaderError=!0,this.lightingModel=HX.BlinnPhongSimpleLightingModel},HX.ShaderLibrary={get:function(t,e){var i="";for(var n in e)e.hasOwnProperty(n)&&(i+="#define "+n+" "+e[n]+"\n");return i+HX.ShaderLibrary[t]}},HX.init=function(canvas,options){function _getExtension(t){return extensions.indexOf(t)>=0?HX.GL.getExtension(t):null}HX.TARGET_CANVAS=canvas;var webglFlags={antialias:!1,premultipliedAlpha:!1},glContext=canvas.getContext("webgl",webglFlags)||canvas.getContext("experimental-webgl",webglFlags);if(options&&options.debug&&eval("context = WebGLDebugUtils.makeDebugContext(context);"),HX.OPTIONS=options||new HX.InitOptions,HX.GL=glContext,!HX.GL)throw"WebGL not supported";var extensions=HX.GL.getSupportedExtensions();HX._initLights(),HX.LIGHTING_MODEL=HX.OPTIONS.lightingModel;var defines="";HX.OPTIONS.useLinearSpace!==!1&&(defines+="#define HX_LINEAR_SPACE\n"),HX.OPTIONS.ignoreDrawBuffersExtension||(HX.EXT_DRAW_BUFFERS=_getExtension("WEBGL_draw_buffers")),HX.EXT_DRAW_BUFFERS&&HX.EXT_DRAW_BUFFERS.MAX_DRAW_BUFFERS_WEBGL>=3?defines+="#extension GL_EXT_draw_buffers : require\n":(defines+="#define HX_SEPARATE_GEOMETRY_PASSES\n",console.warn("WEBGL_draw_buffers extension not supported!"),HX.EXT_DRAW_BUFFERS=null),HX.MaterialPass.NUM_PASS_TYPES+=HX.EXT_DRAW_BUFFERS?0:2,HX.EXT_FLOAT_TEXTURES=_getExtension("OES_texture_float"),HX.EXT_FLOAT_TEXTURES||console.warn("OES_texture_float extension not supported!"),HX.OPTIONS.ignoreHalfFloatTextureExtension||(HX.EXT_HALF_FLOAT_TEXTURES=_getExtension("OES_texture_half_float")),HX.EXT_HALF_FLOAT_TEXTURES||console.warn("OES_texture_half_float extension not supported!"),HX.EXT_FLOAT_TEXTURES_LINEAR=_getExtension("OES_texture_float_linear"),HX.EXT_FLOAT_TEXTURES_LINEAR||console.warn("OES_texture_float_linear extension not supported!"),HX.EXT_HALF_FLOAT_TEXTURES_LINEAR=_getExtension("OES_texture_half_float_linear"),HX.EXT_HALF_FLOAT_TEXTURES_LINEAR||console.warn("OES_texture_half_float_linear extension not supported!"),HX.OPTIONS.ignoreDepthTexturesExtension||(HX.EXT_DEPTH_TEXTURE=_getExtension("WEBGL_depth_texture")),HX.EXT_DEPTH_TEXTURE||(console.warn("WEBGL_depth_texture extension not supported!"),defines+="#define HX_NO_DEPTH_TEXTURES\n",HX.MaterialPass.SHADOW_MAP_PASS=HX.MaterialPass.NUM_PASS_TYPES++),HX.EXT_STANDARD_DERIVATIVES=_getExtension("OES_standard_derivatives"),HX.EXT_STANDARD_DERIVATIVES||console.warn("OES_standard_derivatives extension not supported!"),HX.OPTIONS.ignoreTextureLODExtension||(HX.EXT_SHADER_TEXTURE_LOD=_getExtension("EXT_shader_texture_lod")),HX.EXT_SHADER_TEXTURE_LOD||console.warn("EXT_shader_texture_lod extension not supported!"),HX.EXT_TEXTURE_FILTER_ANISOTROPIC=_getExtension("EXT_texture_filter_anisotropic"),HX.EXT_TEXTURE_FILTER_ANISOTROPIC||console.warn("EXT_texture_filter_anisotropic extension not supported!"),HX.DEFAULT_TEXTURE_MAX_ANISOTROPY=HX.EXT_TEXTURE_FILTER_ANISOTROPIC?HX.GL.getParameter(HX.EXT_TEXTURE_FILTER_ANISOTROPIC.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,HX.EXT_HALF_FLOAT_TEXTURES_LINEAR&&HX.EXT_HALF_FLOAT_TEXTURES||(HX.OPTIONS.useHDR=!1),HX.HDR_FORMAT=HX.OPTIONS.useHDR?HX.EXT_HALF_FLOAT_TEXTURES.HALF_FLOAT_OES:HX.GL.UNSIGNED_BYTE,HX.GLSLIncludeGeneral=defines+HX.GLSLIncludeGeneral,HX._initGLProperties();var data=new Uint8Array([255,0,255,255]);HX.DEFAULT_TEXTURE_2D=new HX.Texture2D,HX.DEFAULT_TEXTURE_2D.uploadData(data,1,1,!0),HX.DEFAULT_TEXTURE_2D.setFilter(HX.TextureFilter.NEAREST_NOMIP),HX.DEFAULT_TEXTURE_CUBE=new HX.TextureCube,HX.DEFAULT_TEXTURE_CUBE.uploadData([data,data,data,data,data,data],1,!0),HX.DEFAULT_TEXTURE_CUBE.setFilter(HX.TextureFilter.NEAREST_NOMIP),HX.BlendState._initDefaults();var poissonDisk=new HX.PoissonDisk,poissonSphere=new HX.PoissonSphere;poissonDisk.generatePoints(64),poissonSphere.generatePoints(64),HX.DEFAULT_POISSON_DISK=new Float32Array(128),HX.DEFAULT_POISSON_SPHERE=new Float32Array(192);for(var diskPoints=poissonDisk.getPoints(),spherePoints=poissonSphere.getPoints(),i=0;64>i;++i){var p=diskPoints[i];HX.DEFAULT_POISSON_DISK[2*i]=p.x,HX.DEFAULT_POISSON_DISK[2*i+1]=p.y,p=spherePoints[i],HX.DEFAULT_POISSON_SPHERE[3*i]=p.x,HX.DEFAULT_POISSON_SPHERE[3*i+1]=p.y,HX.DEFAULT_POISSON_SPHERE[3*i+2]=p.z}HX._init2DDitherTexture(32,32),HX.DEFAULT_RECT_MESH=HX.RectMesh.create(),HX.setClearColor(HX.Color.BLACK)},HX._initLights=function(){HX.LIGHT_TYPES=[HX.AmbientLight,HX.DirectionalLight,HX.PointLight].concat(HX.OPTIONS.customLights);for(var t=0;t<HX.LIGHT_TYPES.length;++t){var e=HX.LIGHT_TYPES[t],i=function(){var e=t;return function(){return e}};e.prototype.getTypeID=i()}},HX._init2DDitherTexture=function(t,e){HX.DEFAULT_2D_DITHER_TEXTURE=new HX.Texture2D;for(var i=t*e,n=1/i,r=[],a=0,s=[],o=0;i>o;++o)s.push(o/i);HX.shuffle(s);for(var o=0;i>o;++o){var h=s[o]*Math.PI*2,_=Math.cos(h),l=Math.sin(h);r[a++]=_,r[a++]=l,r[a++]=n+s[o],r[a++]=1}HX.DEFAULT_2D_DITHER_TEXTURE.uploadData(new Float32Array(r),t,e,!1,HX.GL.RGBA,HX.GL.FLOAT),HX.DEFAULT_2D_DITHER_TEXTURE.setFilter(HX.TextureFilter.NEAREST_NOMIP),HX.DEFAULT_2D_DITHER_TEXTURE.setWrapMode(HX.TextureWrapMode.REPEAT)},HX._initGLProperties=function(){HX.TextureFilter={},HX.TextureFilter.NEAREST={min:HX.GL.NEAREST_MIPMAP_NEAREST,mag:HX.GL.NEAREST},HX.TextureFilter.BILINEAR={min:HX.GL.LINEAR_MIPMAP_NEAREST,mag:HX.GL.LINEAR},HX.TextureFilter.TRILINEAR={min:HX.GL.LINEAR_MIPMAP_LINEAR,mag:HX.GL.LINEAR},HX.EXT_TEXTURE_FILTER_ANISOTROPIC&&(HX.TextureFilter.TRILINEAR_ANISOTROPIC={min:HX.GL.LINEAR_MIPMAP_LINEAR,mag:HX.GL.LINEAR}),HX.TextureFilter.NEAREST_NOMIP={min:HX.GL.NEAREST,mag:HX.GL.NEAREST},HX.TextureFilter.BILINEAR_NOMIP={min:HX.GL.LINEAR,mag:HX.GL.LINEAR},HX.TextureWrapMode={},HX.TextureWrapMode.REPEAT={s:HX.GL.REPEAT,t:HX.GL.REPEAT},HX.TextureWrapMode.CLAMP={s:HX.GL.CLAMP_TO_EDGE,t:HX.GL.CLAMP_TO_EDGE},HX.TextureWrapMode.DEFAULT=HX.TextureWrapMode.REPEAT,HX.TextureFilter.DEFAULT=HX.TextureFilter.TRILINEAR,HX.CullMode={NONE:null,BACK:HX.GL.BACK,FRONT:HX.GL.FRONT,ALL:HX.GL.FRONT_AND_BACK},HX.ElementType={POINTS:HX.GL.POINTS,LINES:HX.GL.LINES,LINE_STRIP:HX.GL.LINE_STRIP,LINE_LOOP:HX.GL.LINE_LOOP,TRIANGLES:HX.GL.TRIANGLES,TRIANGLE_STRIP:HX.GL.TRIANGLE_STRIP,TRIANGLE_FAN:HX.GL.TRIANGLE_FAN},HX.BlendFactor={ZERO:HX.GL.ZERO,ONE:HX.GL.ONE,SOURCE_COLOR:HX.GL.SRC_COLOR,ONE_MINUS_SOURCE_COLOR:HX.GL.ONE_MINUS_SRC_COLOR,DESTINATION_COLOR:HX.GL.DST_COLOR,ONE_MINUS_DESTINATION_COLOR:HX.GL.ONE_MINUS_DST_COLOR,SOURCE_ALPHA:HX.GL.SRC_ALPHA,ONE_MINUS_SOURCE_ALPHA:HX.GL.ONE_MINUS_SRC_ALPHA,DESTINATION_ALPHA:HX.GL.DST_ALPHA,ONE_MINUS_DESTINATION_ALPHA:HX.GL.ONE_MINUS_DST_ALPHA,SOURCE_ALPHA_SATURATE:HX.GL.SRC_ALPHA_SATURATE,CONSTANT_ALPHA:HX.GL.CONSTANT_ALPHA,ONE_MINUS_CONSTANT_ALPHA:HX.GL.ONE_MINUS_CONSTANT_ALPHA},HX.BlendOperation={ADD:HX.GL.FUNC_ADD,SUBTRACT:HX.GL.FUNC_SUBTRACT,REVERSE_SUBTRACT:HX.GL.FUNC_REVERSE_SUBTRACT}},HX.ShaderLibrary["lighting_blinn_phong.glsl"]="float hx_lightVisibility(in vec3 normal, in vec3 viewDir, float roughness, float nDotL)\n{\n	float nDotV = max(-dot(normal, viewDir), 0.0);\n	// roughness remapping, this is essentially: sqrt(2 * roughness * roughness / PI)\n	// this remaps beckman distribution roughness to SmithSchlick\n	roughness *= .63772;\n	float g1 = nDotV*(1.0 - roughness) + roughness;\n	float g2 = nDotL*(1.0 - roughness) + roughness;\n	return 1.0/(g1*g2);\n}\n\nfloat hx_blinnPhongDistribution(float roughness, vec3 normal, vec3 halfVector)\n{\n	float roughSqr = roughness*roughness;\n	roughSqr *= roughSqr;\n	float halfDotNormal = max(-dot(halfVector, normal), 0.0);\n	// the\n	return pow(halfDotNormal, 2.0/roughSqr - 2.0)/roughSqr;\n}\n\nvoid hx_lighting(in vec3 normal, in vec3 lightDir, in vec3 viewDir, in vec3 lightColor, vec3 specularNormalReflection, float roughness, out vec3 diffuseColor, out vec3 specularColor)\n{\n	float nDotL = max(-dot(lightDir, normal), 0.0);\n	vec3 irradiance = nDotL * lightColor;	// in fact irradiance / PI\n\n	vec3 halfVector = normalize(lightDir + viewDir);\n\n	float distribution = hx_blinnPhongDistribution(roughness, normal, halfVector);\n\n	float halfDotLight = dot(halfVector, lightDir);\n	float cosAngle = 1.0 - halfDotLight;\n	// to the 5th power\n	float power = cosAngle*cosAngle;\n	power *= power;\n	power *= cosAngle;\n	vec3 fresnel = specularNormalReflection + (1.0 - specularNormalReflection)*power;\n\n	//approximated fresnel-based energy conservation\n	diffuseColor = irradiance;\n\n	specularColor = .25 * irradiance * fresnel * distribution;\n\n#ifdef VISIBILITY\n    specularColor *= hx_lightVisibility(normal, lightDir, roughness, nDotL);\n#endif\n}",HX.ShaderLibrary["lighting_ggx.glsl"]="float hx_lightVisibility(vec3 normal, vec3 viewDir, float roughness, float nDotL)\n{\n	float nDotV = max(-dot(normal, viewDir), 0.0);\n	// roughness remapping, this is essentially: sqrt(2 * roughness * roughness / PI)\n	// this remaps beckman distribution roughness to SmithSchlick\n	roughness *= .63772;\n	float g1 = nDotV*(1.0 - roughness) + roughness;\n	float g2 = nDotL*(1.0 - roughness) + roughness;\n	return 1.0/(g1*g2);\n}\n\nfloat hx_trowbridgeReitz(float roughness, vec3 normal, vec3 halfVector)\n{\n    float roughSqr = roughness*roughness;\n    float halfDotNormal = max(-dot(halfVector, normal), 0.0);\n    float denom = (halfDotNormal * halfDotNormal) * (roughSqr - 1.0) + 1.0;\n    return roughSqr / (denom * denom);\n}\n\nvoid hx_lighting(in vec3 normal, in vec3 lightDir, in vec3 viewDir, in vec3 lightColor, vec3 specularNormalReflection, float roughness, out vec3 diffuseColor, out vec3 specularColor)\n{\n	float nDotL = max(-dot(lightDir, normal), 0.0);\n	vec3 irradiance = nDotL * lightColor;	// in fact irradiance / PI\n\n	vec3 halfVector = normalize(lightDir + viewDir);\n\n	float distribution = hx_trowbridgeReitz(roughness, normal, halfVector);\n\n	float halfDotLight = dot(halfVector, lightDir);\n	float cosAngle = 1.0 - halfDotLight;\n	// to the 5th power\n	float power = cosAngle*cosAngle;\n	power *= power;\n	power *= cosAngle;\n	vec3 fresnel = specularNormalReflection + (1.0 - specularNormalReflection)*power;\n\n	//approximated fresnel-based energy conservation\n	diffuseColor = irradiance;\n\n	specularColor = .25 * irradiance * fresnel * distribution;\n\n#ifdef VISIBILITY\n    specularColor *= hx_lightVisibility(normal, lightDir, roughness, nDotL);\n#endif\n}",HX.ShaderLibrary["ambient_light_fragment.glsl"]="uniform vec3 lightColor;\n\nuniform sampler2D hx_gbufferColor;\n\n#ifdef USE_AO\nuniform sampler2D hx_ambientOcclusion;\n#endif\n\nvarying vec2 uv;\n\nvoid main()\n{\n	vec3 colorSample = texture2D(hx_gbufferColor, uv).xyz;\n#ifdef USE_AO\n	float occlusionSample = texture2D(hx_ambientOcclusion, uv).w;\n	colorSample *= occlusionSample;\n#endif\n\n	gl_FragColor = vec4(lightColor * colorSample, 0.0);\n}",HX.ShaderLibrary["ambient_light_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\n\nvoid main()\n{\n	uv = hx_texCoord;\n	gl_Position = hx_position;\n}",HX.ShaderLibrary["directional_light_fragment.glsl"]="uniform vec3 lightColor;\nuniform vec3 lightViewDirection;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\n\nuniform sampler2D hx_gbufferColor;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferSpecular;\n\n#ifdef CAST_SHADOWS\n	uniform sampler2D hx_gbufferDepth;\n	uniform sampler2D shadowMap;\n\n	uniform float hx_cameraFrustumRange;\n	uniform float hx_cameraNearPlaneDistance;\n\n	uniform mat4 shadowMapMatrices[NUM_CASCADES];\n	uniform float splitDistances[NUM_CASCADES];\n	uniform float depthBias;\n\n	#if NUM_SHADOW_SAMPLES > 1\n		uniform sampler2D hx_dither2D;\n		uniform vec2 hx_dither2DTextureScale;\n\n		uniform vec2 shadowMapSoftnesses[NUM_CASCADES];\n		uniform vec2 hx_poissonDisk[NUM_SHADOW_SAMPLES];\n	#endif\n\n	float readDepth(vec2 uv)\n	{\n	#ifdef HX_NO_DEPTH_TEXTURES\n		return hx_RGBA8ToFloat(texture2D(shadowMap, uv));\n	#else\n		return texture2D(shadowMap, uv).x;\n	#endif\n	}\n\n	// view-space position\n	#if NUM_SHADOW_SAMPLES > 1\n	void getShadowMapCoord(in vec3 viewPos, out vec4 coord, out vec2 softness)\n	#else\n	void getShadowMapCoord(in vec3 viewPos, out vec4 coord)\n	#endif\n	{\n		mat4 shadowMapMatrix = shadowMapMatrices[NUM_CASCADES - 1];\n\n		#if NUM_CASCADES > 1\n		// not very efficient :(\n		for (int i = 0; i < NUM_CASCADES - 1; ++i) {\n		    // remember, negative Z!\n			if (viewPos.z > splitDistances[i]) {\n				shadowMapMatrix = shadowMapMatrices[i];\n				#if NUM_SHADOW_SAMPLES > 1\n					softness = shadowMapSoftnesses[i];\n				#endif\n				break;\n			}\n		}\n		#else\n			shadowMapMatrix = shadowMapMatrices[0];\n			#if NUM_SHADOW_SAMPLES > 1\n				softness = shadowMapSoftnesses[0];\n			#endif\n		#endif\n		coord = shadowMapMatrix * vec4(viewPos, 1.0);\n	}\n#endif\n\n\nvec3 hx_calculateLight(vec3 diffuseAlbedo, vec3 normal, vec3 lightDir, vec3 viewVector, vec3 normalSpecularReflectance, float roughness, float metallicness)\n{\n// start extractable code (for fwd)\n	vec3 diffuseReflection;\n	vec3 specularReflection;\n\n	hx_lighting(normal, lightDir, normalize(viewVector), lightColor, normalSpecularReflectance, roughness, diffuseReflection, specularReflection);\n\n	diffuseReflection *= diffuseAlbedo * (1.0 - metallicness);\n	vec3 totalReflection = diffuseReflection + specularReflection;\n\n	#ifdef CAST_SHADOWS\n		float depth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n		float viewZ = hx_cameraNearPlaneDistance + depth * hx_cameraFrustumRange;\n		vec3 viewPos = viewZ * viewVector;\n\n		vec4 shadowMapCoord;\n		#if NUM_SHADOW_SAMPLES > 1\n			vec2 radii;\n			getShadowMapCoord(viewPos, shadowMapCoord, radii);\n			float shadowTest = 0.0;\n			vec4 dither = texture2D(hx_dither2D, uv * hx_dither2DTextureScale);\n			dither = vec4(dither.x, -dither.y, dither.y, dither.x) * radii.xxyy;  // add radius scale\n			for (int i = 0; i < NUM_SHADOW_SAMPLES; ++i) {\n				vec2 offset;\n				offset.x = dot(dither.xy, hx_poissonDisk[i]);\n				offset.y = dot(dither.zw, hx_poissonDisk[i]);\n				float shadowSample = readDepth(shadowMapCoord.xy + offset);\n				float diff = shadowMapCoord.z - shadowSample - depthBias;\n				shadowTest += float(diff < 0.0);\n			}\n			shadowTest /= float(NUM_SHADOW_SAMPLES);\n		#else\n			getShadowMapCoord(viewPos, shadowMapCoord);\n			float shadowSample = readDepth(shadowMapCoord.xy);\n			float diff = shadowMapCoord.z - shadowSample - depthBias;\n			float shadowTest = float(diff < 0.0);\n		#endif\n\n		totalReflection *= shadowTest;\n	#endif\n\n    return totalReflection;\n}\n\nvoid main()\n{\n	vec4 colorSample = texture2D(hx_gbufferColor, uv);\n	vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n	vec4 specularSample = texture2D(hx_gbufferSpecular, uv);\n	vec3 normal = hx_decodeNormal(normalSample);\n	vec3 normalSpecularReflectance;\n	float roughness;\n	float metallicness;\n\n	hx_decodeReflectionData(colorSample, specularSample, normalSpecularReflectance, roughness, metallicness);\n\n	vec3 totalReflection = hx_calculateLight(colorSample.xyz, normal, lightViewDirection, viewDir, normalSpecularReflectance, roughness, metallicness);\n\n	gl_FragColor = vec4(totalReflection, 0.0);\n\n}",HX.ShaderLibrary["directional_light_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\n\nuniform mat4 hx_inverseProjectionMatrix;\n\nvoid main()\n{\n	uv = hx_texCoord;\n	viewDir = hx_getLinearDepthViewVector(hx_position.xy, hx_inverseProjectionMatrix);\n	gl_Position = hx_position;\n}",HX.ShaderLibrary["global_irradiance_probe_fragment.glsl"]="varying vec3 viewWorldDir;\nvarying vec2 uv;\n\nuniform sampler2D hx_gbufferColor;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferSpecular;\n#ifdef USE_AO\nuniform sampler2D hx_ambientOcclusion;\n#endif\n\nuniform samplerCube irradianceProbeSampler;\n\nuniform mat4 hx_cameraWorldMatrix;\n\nvoid main()\n{\n	vec4 colorSample = texture2D(hx_gbufferColor, uv);\n	vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n	vec4 specularSample = texture2D(hx_gbufferSpecular, uv);\n\n	vec3 normal = mat3(hx_cameraWorldMatrix) * hx_decodeNormal(normalSample);\n	vec3 totalLight = vec3(0.0);\n\n#ifdef USE_AO\n    vec4 occlusionSample = texture2D(hx_ambientOcclusion, uv);\n    colorSample.xyz *= occlusionSample.w;\n#endif\n\n	vec4 irradianceSample = textureCube(irradianceProbeSampler, normal);\n	irradianceSample = hx_gammaToLinear(irradianceSample);\n	irradianceSample.xyz *= (1.0 - specularSample.z);\n	totalLight += irradianceSample.xyz * colorSample.xyz;\n\n	gl_FragColor = vec4(totalLight, 1.0);\n}",HX.ShaderLibrary["global_irradiance_probe_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nuniform mat4 hx_inverseViewProjectionMatrix;\nuniform vec3 hx_cameraWorldPosition;\n\nvarying vec3 viewWorldDir;\nvarying vec2 uv;\n\n// using rect mesh for rendering skyboxes!\nvoid main()\n{\n	vec4 unproj = hx_inverseViewProjectionMatrix * hx_position;\n	viewWorldDir = unproj.xyz / unproj.w - hx_cameraWorldPosition;\n	viewWorldDir.y = viewWorldDir.y;\n	vec4 pos = hx_position;\n	pos.z = 1.0;\n	gl_Position = pos;\n	uv = hx_texCoord;\n}",HX.ShaderLibrary["global_specular_probe_fragment.glsl"]="#ifdef USE_TEX_LOD\n#extension GL_EXT_shader_texture_lod : require\n#endif\n\nvarying vec3 viewWorldDir;\nvarying vec2 uv;\n\nuniform samplerCube specularProbeSampler;\nuniform float numMips;\nuniform float mipOffset;\nuniform float maxMipFactor;\n\nuniform sampler2D hx_gbufferColor;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferSpecular;\n\n#ifdef USE_AO\nuniform sampler2D hx_ambientOcclusion;\n#endif\n\n#ifdef USE_SSR\nuniform sampler2D hx_localReflections;\n#endif\n\nuniform mat4 hx_cameraWorldMatrix;\n\n// cheap geometric shadowing function, not at all physically correct\nfloat hx_reflectionVisibility(vec3 normal, vec3 reflection, float roughness)\n{\n	return 1.0 - roughness*roughness;\n}\n\nvoid main()\n{\n	vec4 colorSample = texture2D(hx_gbufferColor, uv);\n	vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n	vec4 specularSample = texture2D(hx_gbufferSpecular, uv);\n	vec3 normal = mat3(hx_cameraWorldMatrix) * hx_decodeNormal(normalSample);\n	vec3 totalLight = vec3(0.0);\n\n	vec3 reflectedViewDir = reflect(normalize(viewWorldDir), normal);\n	vec3 normalSpecularReflectance;\n	float roughness;\n	float metallicness;\n	hx_decodeReflectionData(colorSample, specularSample, normalSpecularReflectance, roughness, metallicness);\n	#ifdef USE_TEX_LOD\n	// knald method:\n		float power = 2.0/(roughness * roughness) - 2.0;\n		float factor = (exp2(-10.0/sqrt(power)) - K0)/K1;\n		float mipLevel = numMips*(1.0 - clamp(factor/maxMipFactor, 0.0, 1.0));\n		vec4 specProbeSample = textureCubeLodEXT(specularProbeSampler, reflectedViewDir, mipLevel);\n	#else\n		vec4 specProbeSample = textureCube(specularProbeSampler, reflectedViewDir);\n	#endif\n	specProbeSample = hx_gammaToLinear(specProbeSample);\n	vec3 fresnel = hx_fresnel(normalSpecularReflectance, reflectedViewDir, normal);\n	float attenuation = mix(hx_reflectionVisibility(normal, reflectedViewDir, roughness), 1.0, metallicness);\n\n	totalLight += fresnel * specProbeSample.xyz * attenuation;\n\n    #ifdef USE_SSR\n        vec4 reflectionSample = texture2D(hx_localReflections, uv);\n        totalLight = mix(totalLight, reflectionSample.xyz, reflectionSample.w);\n    #endif\n\n	#ifdef USE_AO\n		vec4 occlusionSample = texture2D(hx_ambientOcclusion, uv);\n		totalLight *= occlusionSample.w;\n	#endif\n\n	gl_FragColor = vec4(totalLight, 1.0);\n}",HX.ShaderLibrary["global_specular_probe_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nuniform mat4 hx_inverseViewProjectionMatrix;\nuniform vec3 hx_cameraWorldPosition;\n\nvarying vec3 viewWorldDir;\nvarying vec2 uv;\n\nvoid main()\n{\n	vec4 unproj = hx_inverseViewProjectionMatrix * hx_position;\n	viewWorldDir = unproj.xyz / unproj.w - hx_cameraWorldPosition;\n	viewWorldDir.y = viewWorldDir.y;\n	vec4 pos = hx_position;\n	pos.z = 1.0;\n	gl_Position = pos;\n	uv = hx_texCoord;\n}",HX.ShaderLibrary["point_light_fullscreen_fragment.glsl"]="varying vec2 uv;\nvarying vec3 viewDir;\n\nuniform sampler2D hx_gbufferColor;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferSpecular;\nuniform sampler2D hx_gbufferDepth;\n\nuniform float hx_cameraFrustumRange;\nuniform float hx_cameraNearPlaneDistance;\n\nuniform vec3 lightColor[LIGHTS_PER_BATCH];\nuniform vec3 lightViewPosition[LIGHTS_PER_BATCH];\nuniform vec2 attenuationFixFactors[LIGHTS_PER_BATCH];\n\nvoid main()\n{\n	vec4 colorSample = texture2D(hx_gbufferColor, uv);\n	vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n	vec4 specularSample = texture2D(hx_gbufferSpecular, uv);\n	vec3 normal = hx_decodeNormal(normalSample);\n	float depth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n	vec3 normalSpecularReflectance;\n	float roughness;\n	float metallicness;\n\n	hx_decodeReflectionData(colorSample, specularSample, normalSpecularReflectance, roughness, metallicness);\n\n	float absViewZ = hx_cameraNearPlaneDistance + depth * hx_cameraFrustumRange;\n	vec3 viewPosition = absViewZ * viewDir;\n\n	vec3 viewDirNorm = normalize(viewDir);\n\n\n	vec3 totalDiffuse = vec3(0.0);\n	vec3 totalSpecular = vec3(0.0);\n	vec3 diffuseReflection;\n	vec3 specularReflection;\n\n	for (int i = 0; i < LIGHTS_PER_BATCH; ++i) {\n		vec3 lightViewDirection = viewPosition - lightViewPosition[i];\n		float attenuation = 1.0/dot(lightViewDirection, lightViewDirection);\n		// normalize:\n		lightViewDirection *= sqrt(attenuation);\n\n		// rescale attenuation so that irradiance at bounding edge really is 0\n		attenuation = max(0.0, (attenuation - attenuationFixFactors[i].x) * attenuationFixFactors[i].y);\n		hx_lighting(normal, lightViewDirection, viewDirNorm, lightColor[i] * attenuation, normalSpecularReflectance, roughness, diffuseReflection, specularReflection);\n		totalDiffuse += diffuseReflection;\n		totalSpecular += specularReflection;\n	}\n	totalDiffuse *= colorSample.xyz * (1.0 - metallicness);\n	gl_FragColor = vec4(totalDiffuse + totalSpecular, 1.0);\n}",HX.ShaderLibrary["point_light_fullscreen_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\n\nuniform mat4 hx_inverseProjectionMatrix;\n\nvoid main()\n{\n	uv = hx_texCoord;\n	viewDir = hx_getLinearDepthViewVector(hx_position.xy, hx_inverseProjectionMatrix);\n	gl_Position = hx_position;\n}",HX.ShaderLibrary["point_light_spherical_fragment.glsl"]="varying vec2 uv;\nvarying vec3 viewDir;\nvarying vec3 lightColorVar;\nvarying vec3 lightPositionVar;\nvarying vec2 attenuationFixVar;\n\nuniform sampler2D hx_gbufferColor;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferSpecular;\nuniform sampler2D hx_gbufferDepth;\n\nuniform float hx_cameraFrustumRange;\nuniform float hx_cameraNearPlaneDistance;\n\n\nvoid main()\n{\n	vec4 colorSample = texture2D(hx_gbufferColor, uv);\n	vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n	vec4 specularSample = texture2D(hx_gbufferSpecular, uv);\n	float depth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n\n	float viewZ = hx_cameraNearPlaneDistance + depth * hx_cameraFrustumRange;\n	vec3 viewPosition = viewZ * viewDir;\n\n	vec3 normal = hx_decodeNormal(normalSample);\n	vec3 viewDirNorm = normalize(viewDir);\n\n	vec3 normalSpecularReflectance;\n	float roughness;\n	float metallicness;\n	hx_decodeReflectionData(colorSample, specularSample, normalSpecularReflectance, roughness, metallicness);\n	vec3 diffuseReflection;\n	vec3 specularReflection;\n\n	vec3 lightViewDirection = viewPosition - lightPositionVar;\n	float attenuation = 1.0/dot(lightViewDirection, lightViewDirection);\n	// normalize:\n	lightViewDirection *= sqrt(attenuation);\n\n	// rescale attenuation so that irradiance at bounding edge really is 0\n	attenuation = max(0.0, (attenuation - attenuationFixVar.x) * attenuationFixVar.y);\n	hx_lighting(normal, lightViewDirection, viewDirNorm, lightColorVar * attenuation, normalSpecularReflectance, roughness, diffuseReflection, specularReflection);\n\n	diffuseReflection *= colorSample.xyz * (1.0 - metallicness);\n	gl_FragColor = vec4(diffuseReflection + specularReflection, 0.0);\n}",HX.ShaderLibrary["point_light_spherical_vertex.glsl"]="attribute vec4 hx_position;\nattribute float hx_instanceID;\n\nuniform mat4 hx_viewMatrix;\nuniform mat4 hx_cameraWorldMatrix;\nuniform mat4 hx_projectionMatrix;\n\nuniform float lightRadius[LIGHTS_PER_BATCH];\nuniform vec3 lightWorldPosition[LIGHTS_PER_BATCH];\nuniform vec3 lightColor[LIGHTS_PER_BATCH];\nuniform vec2 attenuationFixFactors[LIGHTS_PER_BATCH];\n\nvarying vec2 uv;\nvarying vec3 viewDir;\nvarying vec3 lightColorVar;\nvarying vec3 lightPositionVar;\nvarying vec2 attenuationFixVar;\n\nvoid main()\n{\n	int instance = int(hx_instanceID);\n	vec4 worldPos = hx_position;\n	lightPositionVar = lightWorldPosition[instance];\n	lightColorVar = lightColor[instance];\n	attenuationFixVar = attenuationFixFactors[instance];\n	worldPos.xyz *= lightRadius[instance];\n	worldPos.xyz += lightPositionVar;\n\n	vec4 viewPos = hx_viewMatrix * worldPos;\n	vec4 proj = hx_projectionMatrix * viewPos;\n\n	lightPositionVar = (hx_viewMatrix * vec4(lightPositionVar, 1.0)).xyz;\n\n	viewDir = viewPos.xyz / viewPos.z;\n\n	/* render as flat disk, prevent clipping */\n	proj /= proj.w;\n	proj.z = 0.0;\n	uv = proj.xy/proj.w * .5 + .5;\n	gl_Position = proj;\n}",HX.ShaderLibrary["default_geometry_mrt_fragment.glsl"]="#if defined(COLOR_MAP) || defined(NORMAL_MAP)|| defined(SPECULAR_MAP)|| defined(ROUGHNESS_MAP)\nvarying vec2 texCoords;\n#endif\n\nvarying vec3 normal;\n\n#ifdef COLOR_MAP\nuniform sampler2D colorMap;\n#else\nuniform vec3 color;\n#endif\n\n#ifdef NORMAL_MAP\nvarying vec3 tangent;\nvarying vec3 bitangent;\n\nuniform sampler2D normalMap;\n#endif\n\nuniform float roughness;\nuniform float specularNormalReflection;\nuniform float metallicness;\n\n#if defined(SPECULAR_MAP) || defined(ROUGHNESS_MAP)\nuniform sampler2D specularMap;\n#endif\n\nvoid main()\n{\n    vec4 outputColor;\n    #ifdef COLOR_MAP\n        outputColor = texture2D(colorMap, texCoords);\n    #else\n        outputColor = vec4(color, 1.0);\n    #endif\n\n    float metallicnessOut = metallicness;\n    float specNormalReflOut = specularNormalReflection;\n    float roughnessOut = roughness;\n\n    vec3 fragNormal = normal;\n    #ifdef NORMAL_MAP\n        vec4 normalSample = texture2D(normalMap, texCoords);\n        mat3 TBN;\n        TBN[2] = normalize(normal);\n        TBN[0] = normalize(tangent);\n        TBN[1] = normalize(bitangent);\n\n        fragNormal = TBN * (normalSample.xyz * 2.0 - 1.0);\n\n        #ifdef NORMAL_ROUGHNESS_MAP\n            roughnessOut = 1.0 - (1.0 - roughnessOut) * normalSample.w;\n        #endif\n    #endif\n\n    #if defined(SPECULAR_MAP) || defined(ROUGHNESS_MAP)\n          vec4 specSample = texture2D(specularMap, texCoords);\n          roughnessOut = 1.0 - (1.0 - roughnessOut) * specularMap.x;\n\n          #ifdef SPECULAR_MAP\n              specNormalReflOut *= specularMap.y;\n              metallicnessOut *= specularMap.z;\n          #endif\n    #endif\n\n    // todo: should we linearize depth here instead?\n    hx_processGeometry(hx_gammaToLinear(outputColor), fragNormal, gl_FragCoord.z, metallicnessOut, specNormalReflOut, roughnessOut);\n}",HX.ShaderLibrary["default_geometry_mrt_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec3 hx_normal;\n\nuniform mat4 hx_wvpMatrix;\nuniform mat3 hx_normalWorldViewMatrix;\n\nvarying vec3 normal;\n\n#if defined(COLOR_MAP) || defined(NORMAL_MAP)|| defined(SPECULAR_MAP)|| defined(ROUGHNESS_MAP)\nattribute vec2 hx_texCoord;\nvarying vec2 texCoords;\n#endif\n\n#ifdef NORMAL_MAP\nattribute vec4 hx_tangent;\n\nvarying vec3 tangent;\nvarying vec3 bitangent;\n\nuniform mat4 hx_worldViewMatrix;\n#endif\n\n\nvoid main()\n{\n    gl_Position = hx_wvpMatrix * hx_position;\n    normal = hx_normalWorldViewMatrix * hx_normal;\n\n#ifdef NORMAL_MAP\n    tangent = mat3(hx_worldViewMatrix) * hx_tangent.xyz;\n    bitangent = cross(tangent, normal) * hx_tangent.w;\n#endif\n\n#if defined(COLOR_MAP) || defined(NORMAL_MAP)|| defined(SPECULAR_MAP)|| defined(ROUGHNESS_MAP)\n    texCoords = hx_texCoord;\n#endif\n}",HX.ShaderLibrary["default_refract_fragment.glsl"]="varying vec2 texCoords;\nvarying vec3 normal;\nvarying vec3 viewVector;\nvarying vec2 screenUV;\n\n#ifdef COLOR_MAP\nuniform sampler2D colorMap;\n#else\nuniform vec3 color;\n#endif\n\n#ifdef NORMAL_MAP\nvarying vec3 tangent;\nvarying vec3 bitangent;\n\nuniform sampler2D normalMap;\n#endif\n\nuniform sampler2D hx_backbuffer;\nuniform sampler2D hx_gbufferDepth;\n\nuniform float hx_cameraNearPlaneDistance;\nuniform float hx_cameraFrustumRange;\n\nuniform float refractiveRatio;   // the ratio of refractive indices\n\nvoid main()\n{\n    vec4 outputColor;\n    #ifdef COLOR_MAP\n        outputColor = texture2D(colorMap, texCoords);\n    #else\n        outputColor = vec4(color, 1.0);\n    #endif\n\n    vec3 fragNormal = normal;\n    #ifdef NORMAL_MAP\n        vec4 normalSample = texture2D(normalMap, texCoords);\n        mat3 TBN;\n        TBN[2] = normalize(normal);\n        TBN[0] = normalize(tangent);\n        TBN[1] = normalize(bitangent);\n\n        fragNormal = TBN * (normalSample.xyz * 2.0 - 1.0);\n    #endif\n\n    // use the immediate background depth value for a distance estimate\n    // it would actually be possible to have the back faces rendered with their depth values only, to get a more local scattering\n\n    float depth = hx_sampleLinearDepth(hx_gbufferDepth, texCoords);\n    float distance = depth * hx_cameraFrustumRange - viewVector.z - hx_cameraNearPlaneDistance;\n\n    vec2 samplePos = screenUV + getPreciseRefractedUVOffset(viewVector, fragNormal, refractiveRatio, distance);\n\n    vec4 background = texture2D(hx_backbuffer, samplePos);\n    gl_FragColor = outputColor * background;\n}",HX.ShaderLibrary["default_refract_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec3 hx_normal;\nattribute vec2 hx_texCoord;\n\nvarying vec3 normal;\nvarying vec2 texCoords;\nvarying vec3 viewVector;\nvarying vec2 screenUV;\n\nuniform mat4 hx_wvpMatrix;\nuniform mat4 hx_worldViewMatrix;\nuniform mat3 hx_normalWorldViewMatrix;\n\n#ifdef NORMAL_MAP\nattribute vec4 hx_tangent;\n\nvarying vec3 tangent;\nvarying vec3 bitangent;\n#endif\n\n\nvoid main()\n{\n    vec4 viewSpace = hx_worldViewMatrix * hx_position;\n    vec4 proj = hx_wvpMatrix * hx_position;\n    normal = hx_normalWorldViewMatrix * hx_normal;\n\n#ifdef NORMAL_MAP\n    tangent = mat3(hx_worldViewMatrix) * hx_tangent.xyz;\n    bitangent = cross(tangent, normal) * hx_tangent.w;\n#endif\n\n    viewVector = viewSpace.xyz;\n    texCoords = hx_texCoord;\n    screenUV = proj.xy / proj.w * .5 + .5;\n    gl_Position = proj;\n}",HX.ShaderLibrary["default_skybox_fragment.glsl"]="varying vec3 viewWorldDir;\n\nuniform samplerCube hx_skybox;\n\nvoid main()\n{\n    vec4 color = textureCube(hx_skybox, viewWorldDir);\n    gl_FragColor = hx_gammaToLinear(color);\n}",HX.ShaderLibrary["default_skybox_vertex.glsl"]="attribute vec4 hx_position;\n\nuniform mat4 hx_inverseViewProjectionMatrix;\nuniform vec3 hx_cameraWorldPosition;\n\nvarying vec3 viewWorldDir;\n\n// using 2D quad for rendering skyboxes rather than 3D cube\nvoid main()\n{\n    vec4 unproj = hx_inverseViewProjectionMatrix * hx_position;\n    viewWorldDir = unproj.xyz / unproj.w - hx_cameraWorldPosition;\n    gl_Position = vec4(hx_position.xy, 1.0, 1.0);  // make sure it's drawn behind everything else\n}",HX.ShaderLibrary["bloom_blur_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sourceTexture;\n\nuniform float gaussianWeights[NUM_SAMPLES];\n\nvoid main()\n{\n	vec4 total = vec4(0.0);\n	vec2 sampleUV = uv;\n	vec2 stepSize = DIRECTION / SOURCE_RES;\n	float totalWeight = 0.0;\n	for (int i = 0; i < NUM_SAMPLES; ++i) {\n		total += texture2D(sourceTexture, sampleUV) * gaussianWeights[i];\n		sampleUV += stepSize;\n	}\n	gl_FragColor = total;\n}",
HX.ShaderLibrary["bloom_blur_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\n\nvoid main()\n{\n	uv = hx_texCoord - RADIUS * DIRECTION / SOURCE_RES;\n	gl_Position = hx_position;\n}",HX.ShaderLibrary["bloom_composite_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D bloomTexture;\n\nvoid main()\n{\n	gl_FragColor = texture2D(bloomTexture, uv);\n}",HX.ShaderLibrary["bloom_composite_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\n\nvoid main()\n{\n	   uv = hx_texCoord;\n	   gl_Position = hx_position;\n}",HX.ShaderLibrary["bloom_threshold_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D hx_frontbuffer;\n\nuniform float threshold;\n\nvoid main()\n{\n        vec4 color = texture2D(hx_frontbuffer, uv);\n        float originalLuminance = .05 + hx_luminance(color);\n        float targetLuminance = max(originalLuminance - threshold, 0.0);\n        gl_FragColor = color * targetLuminance / originalLuminance;\n}\n",HX.ShaderLibrary["default_post_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\n\nvoid main()\n{\n	uv = hx_texCoord;\n	gl_Position = hx_position;\n}",HX.ShaderLibrary["fog_fragment.glsl"]="varying vec2 uv;\n\nuniform vec3 tint;\nuniform float density;\nuniform float startDistance;\n\nuniform float hx_cameraFrustumRange;\nuniform float hx_cameraNearPlaneDistance;\n\nuniform sampler2D hx_gbufferDepth;\n\nvoid main()\n{\n	float depth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n	// do not fog up skybox\n	// this might actually solve itself due to depth map encoding\n	if (depth > .999) depth = 0.0;\n	float distance = depth * hx_cameraFrustumRange;\n\n\n	distance -= startDistance;\n\n	float fog = clamp(exp2(-distance * density), 0.0, 1.0);\n	gl_FragColor = vec4(tint, fog);\n}",HX.ShaderLibrary["fxaa_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D hx_backbuffer;\nuniform vec2 hx_rcpRenderTargetResolution;\nuniform float edgeThreshold;\nuniform float edgeThresholdMin;\nuniform float edgeSharpness;\n\nfloat luminanceHint(vec4 color)\n{\n	return .30/.59 * color.r + color.g;\n}\n\nvoid main()\n{\n	vec4 center = texture2D(hx_backbuffer, uv);\n	vec2 halfRes = vec2(hx_rcpRenderTargetResolution.x, hx_rcpRenderTargetResolution.y) * .5;\n	float topLeftLum = luminanceHint(texture2D(hx_backbuffer, uv + vec2(-halfRes.x, halfRes.y)));\n	float bottomLeftLum = luminanceHint(texture2D(hx_backbuffer, uv + vec2(-halfRes.x, -halfRes.y)));\n	float topRightLum = luminanceHint(texture2D(hx_backbuffer, uv + vec2(halfRes.x, halfRes.y)));\n	float bottomRightLum = luminanceHint(texture2D(hx_backbuffer, uv + vec2(halfRes.x, -halfRes.y)));\n\n	float centerLum = luminanceHint(center);\n	float minLum = min(min(topLeftLum, bottomLeftLum), min(topRightLum, bottomRightLum));\n	float maxLum = max(max(topLeftLum, bottomLeftLum), max(topRightLum, bottomRightLum));\n	float range = max(centerLum, maxLum) - min(centerLum, minLum);\n	float threshold = max(edgeThresholdMin, maxLum * edgeThreshold);\n	float applyFXAA = range < threshold? 0.0 : 1.0;\n\n	float diagDiff1 = bottomLeftLum - topRightLum;\n	float diagDiff2 = bottomRightLum - topLeftLum;\n	vec2 dir1 = normalize(vec2(diagDiff1 + diagDiff2, diagDiff1 - diagDiff2));\n	vec4 sampleNeg1 = texture2D(hx_backbuffer, uv - halfRes * dir1);\n	vec4 samplePos1 = texture2D(hx_backbuffer, uv + halfRes * dir1);\n\n	float minComp = min(abs(dir1.x), abs(dir1.y)) * edgeSharpness;\n	vec2 dir2 = clamp(dir1.xy / minComp, -2.0, 2.0) * 2.0;\n	vec4 sampleNeg2 = texture2D(hx_backbuffer, uv - hx_rcpRenderTargetResolution * dir2);\n	vec4 samplePos2 = texture2D(hx_backbuffer, uv + hx_rcpRenderTargetResolution * dir2);\n	vec4 tap1 = sampleNeg1 + samplePos1;\n	vec4 fxaa = (tap1 + sampleNeg2 + samplePos2) * .25;\n	float fxaaLum = luminanceHint(fxaa);\n	if ((fxaaLum < minLum) || (fxaaLum > maxLum))\n		fxaa = tap1 * .5;\n	gl_FragColor = mix(center, fxaa, applyFXAA);\n}",HX.ShaderLibrary["ssr_fragment.glsl"]='#extension GL_OES_standard_derivatives : enable\n\nuniform sampler2D hx_gbufferColor;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferSpecular;\nuniform sampler2D hx_gbufferDepth;\nuniform sampler2D hx_dither2D;\nuniform vec2 hx_renderTargetResolution;\n\nuniform sampler2D source;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\n\nuniform vec2 ditherTextureScale;\nuniform float hx_cameraNearPlaneDistance;\nuniform float hx_cameraFrustumRange;\nuniform float hx_rcpCameraFrustumRange;\nuniform mat4 hx_projectionMatrix;\n\nuniform float maxDistance;\nuniform float stepSize;\nuniform float maxRoughness;\n\n// all in viewspace\n// 0 is start, 1 is end\nfloat raytrace(in vec3 ray0, in vec3 rayDir, out float hitZ, out vec2 hitUV)\n{\n    vec4 dither = texture2D(hx_dither2D, uv * ditherTextureScale);\n    // Clip to the near plane\n	float rayLength = ((ray0.z + rayDir.z * maxDistance) > -hx_cameraNearPlaneDistance) ?\n						(-hx_cameraNearPlaneDistance - ray0.z) / rayDir.z : maxDistance;\n\n    vec3 ray1 = ray0 + rayDir * rayLength;\n\n    // only need the w component for perspective correct interpolation\n    // need to get adjusted ray end\'s uv value\n    vec4 hom0 = hx_projectionMatrix * vec4(ray0, 1.0);\n    vec4 hom1 = hx_projectionMatrix * vec4(ray1, 1.0);\n    float rcpW0 = 1.0 / hom0.w;\n    float rcpW1 = 1.0 / hom1.w;\n\n    hom0 *= rcpW0;\n    hom1 *= rcpW1;\n\n    // expressed in pixels, so we can snap to 1\n    // need to figure out the ratio between 1 pixel and the entire line "width" (if primarily vertical, it\'s actually height)\n\n    // line dimensions in pixels:\n\n    vec2 pixelSize = (hom1.xy - hom0.xy) * hx_renderTargetResolution * .5;\n\n    // line-"width" = max(abs(pixelSize.x), abs(pixelSize.y))\n    // ratio pixel/width = 1 / max(abs(pixelSize.x), abs(pixelSize.y))\n\n    float stepRatio = 1.0 / max(abs(pixelSize.x), abs(pixelSize.y)) * stepSize;\n\n    vec2 uvEnd = hom1.xy * .5 + .5;\n\n    vec2 dUV = (uvEnd - uv) * stepRatio;\n    hitUV = uv;\n\n    // linear depth\n    float rayDepth = (-ray0.z - hx_cameraNearPlaneDistance) * hx_rcpCameraFrustumRange;\n    float rayPerspDepth0 = rayDepth * rcpW0;\n    float rayPerspDepth1 = (-ray1.z - hx_cameraNearPlaneDistance) * hx_rcpCameraFrustumRange * rcpW1;\n    float rayPerspDepth = rayPerspDepth0;\n    // could probably optimize this:\n    float dRayD = (rayPerspDepth1 - rayPerspDepth0) * stepRatio;\n\n    float rcpW = rcpW0;\n    float dRcpW = (rcpW1 - rcpW0) * stepRatio;\n    float sceneDepth = rayDepth;\n    float prevRayDepth, prevSceneDepth;\n\n    float amount = 0.0;\n\n    hitUV += dUV * dither.z;\n    rayPerspDepth += dRayD * dither.z;\n    rcpW += dRcpW * dither.z;\n\n    float sampleCount;\n    for (int i = 0; i < NUM_SAMPLES; ++i) {\n        rayDepth = rayPerspDepth / rcpW;\n\n        sceneDepth = hx_sampleLinearDepth(hx_gbufferDepth, hitUV);\n\n        if (rayDepth > sceneDepth + .001) {\n            amount = float(sceneDepth < 1.0);\n            sampleCount = float(i);\n            break;\n        }\n\n        hitUV += dUV;\n        rayPerspDepth += dRayD;\n        rcpW += dRcpW;\n    }\n\n    hitZ = -hx_cameraNearPlaneDistance - sceneDepth * hx_cameraFrustumRange;\n\n    // TODO: fade out last samples\n    amount *= clamp((1.0 - (sampleCount - float(NUM_SAMPLES)) / float(NUM_SAMPLES)) * 5.0, 0.0, 1.0);\n    return amount;\n}\n\nvoid main()\n{\n    vec4 colorSample = hx_gammaToLinear(texture2D(hx_gbufferColor, uv));\n    vec4 specularSample = texture2D(hx_gbufferSpecular, uv);\n    float depth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n    vec3 normalSpecularReflectance;\n    float roughness;\n    float metallicness;\n    hx_decodeReflectionData(colorSample, specularSample, normalSpecularReflectance, roughness, metallicness);\n    vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n    vec3 normal = hx_decodeNormal(normalSample);\n    vec3 reflDir = reflect(normalize(viewDir), normal);\n\n    vec3 fresnel = hx_fresnel(normalSpecularReflectance, reflDir, normal);\n    // not physically correct, but attenuation is required to look good\n\n    // step for every pixel\n\n    float absViewZ = hx_cameraNearPlaneDistance + depth * hx_cameraFrustumRange;\n    vec3 viewSpacePos = absViewZ * viewDir;\n\n    float hitZ = 0.0;\n    vec2 hitUV;\n    float amount = raytrace(viewSpacePos, reflDir, hitZ, hitUV);\n    float fadeFactor = 1.0; //clamp(-reflDir.z * 100.0, 0.0, 1.0);\n\n    vec2 borderFactors = abs(hitUV * 2.0 - 1.0);\n    borderFactors = (1.0 - borderFactors) * 10.0;\n    fadeFactor *= clamp(borderFactors.x, 0.0, 1.0) * clamp(borderFactors.y, 0.0, 1.0);\n\n    float diff = viewSpacePos.z - hitZ;\n    fadeFactor *= smoothstep(-1.0, 0.0, diff);\n    fadeFactor *= smoothstep(maxRoughness, 0.0, roughness);\n\n    vec4 reflColor = texture2D(source, hitUV);\n\n    float amountUsed = amount * fadeFactor;\n    gl_FragColor = vec4(fresnel * reflColor.xyz, amountUsed);\n}\n\n',HX.ShaderLibrary["ssr_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\n\nuniform mat4 hx_inverseProjectionMatrix;\n\nvoid main()\n{\n    uv = hx_texCoord;\n    viewDir = hx_getLinearDepthViewVector(hx_position.xy, hx_inverseProjectionMatrix);\n    gl_Position = hx_position;\n}",HX.ShaderLibrary["tonemap_filmic_fragment.glsl"]="// This approach is by Jim Hejl and Richard Burgess-Dawson\nvoid main()\n{\n	vec4 color = hx_getToneMapScaledColor();\n	vec3 x = max(vec3(0.0), color.xyz - 0.004);\n	gl_FragColor = vec4((x * (6.2 * x + .5))/(x * (6.2 * x + 1.7) + 0.06), 1.0);\n}",HX.ShaderLibrary["tonemap_reference_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D hx_backbuffer;\n\nvoid main()\n{\n	vec4 color = texture2D(hx_backbuffer, uv);\n	float l = log(.001 + hx_luminance(color));\n	gl_FragColor = vec4(l, l, l, 1.0);\n}",HX.ShaderLibrary["tonemap_reinhard_fragment.glsl"]="void main()\n{\n	vec4 color = hx_getToneMapScaledColor();\n	gl_FragColor = color / (1.0 + color);\n}",HX.ShaderLibrary["copy_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sampler;\n\nvoid main()\n{\n    // extractChannel comes from a macro\n   gl_FragColor = vec4(extractChannels(texture2D(sampler, uv)));\n\n#ifndef COPY_ALPHA\n   gl_FragColor.a = 1.0;\n#endif\n}\n",HX.ShaderLibrary["copy_to_gamma_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sampler;\n\nvoid main()\n{\n   gl_FragColor = vec4(hx_linearToGamma(texture2D(sampler, uv).xyz), 1.0);\n}",HX.ShaderLibrary["copy_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\n\nvoid main()\n{\n    uv = hx_texCoord;\n    gl_Position = hx_position;\n}",HX.ShaderLibrary["copy_with_separate_alpha_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sampler;\nuniform sampler2D alphaSource;\n\nvoid main()\n{\n   gl_FragColor = texture2D(sampler, uv);\n   gl_FragColor.a = texture2D(alphaSource, uv).a;\n}\n",HX.ShaderLibrary["debug_depth_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sampler;\n\nvoid main()\n{\n   gl_FragColor = vec4(1.0 - hx_sampleLinearDepth(sampler, uv));\n}",HX.ShaderLibrary["debug_normals_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sampler;\n\nvoid main()\n{\n   vec4 data = texture2D(sampler, uv);\n   vec3 normal = hx_decodeNormal(data);\n   gl_FragColor = vec4(normal * .5 + .5, 1.0);\n}",HX.ShaderLibrary["linearize_depth_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D sampler;\nuniform mat4 hx_projectionMatrix;\nuniform float hx_rcpCameraFrustumRange;\n\nfloat readDepth(sampler2D sampler, vec2 uv)\n{\n	#ifdef HX_NO_DEPTH_TEXTURES\n		vec4 data = texture2D(sampler, uv);\n		return hx_RG8ToFloat(data.zw);\n    #else\n    	return texture2D(sampler, uv).x;\n    #endif\n}\n\nvoid main()\n{\n	float depth = readDepth(sampler, uv);\n	float linear = hx_depthToViewZ(depth, hx_projectionMatrix) * hx_rcpCameraFrustumRange;\n	gl_FragColor = hx_floatToRGBA8(linear);\n}",HX.ShaderLibrary["linearize_depth_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nvarying vec2 uv;\n\nvoid main()\n{\n	uv = hx_texCoord;\n	gl_Position = hx_position;\n}",HX.ShaderLibrary["snippets_general.glsl"]="// see Aras' blog post: http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n// Only for 0 - 1\nvec4 hx_floatToRGBA8(float value)\n{\n// scale to encodable range [0, 1)\n    value *= .99;\n    vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * value;\n    enc = fract(enc);\n    return enc - enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);\n}\n\nfloat hx_RGBA8ToFloat(vec4 rgba)\n{\n    return dot(rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/16581375.0)) / .99;\n}\n\nvec2 hx_floatToRG8(float value)\n{\n// scale to encodable range [0, 1)\n    value *= .99;\n    vec2 enc = vec2(1.0, 255.0) * value;\n    enc = fract(enc);\n    enc.x -= enc.y / 255.0;\n    return enc;\n}\n\nfloat hx_RG8ToFloat(vec2 rg)\n{\n    return dot(rg, vec2(1.0, 1.0/255.0)) / .99;\n}\n\nvec4 hx_encodeNormalDepth(vec3 normal, float depth)\n{\n	#ifdef HX_NO_DEPTH_TEXTURES\n    	vec4 data;\n    	data.xy = normal.xy * .5 + .5;\n		data.zw = hx_floatToRG8(depth);\n		return data;\n	#else\n		return vec4(normal * .5 + .5, 1.0);\n    #endif\n}\n\nvec3 hx_decodeNormal(vec4 data)\n{\n    #ifdef HX_NO_DEPTH_TEXTURES\n    	vec3 normal;\n    	normal.xy = data.xy * 2.0 - 1.0;\n		normal.z = 1.0 - dot(normal.xy, normal.xy);\n		normal.z = sqrt(normal.z);\n		return normal;\n    #else\n    	return normalize(data.xyz - .5);\n    #endif\n}\n\nvec4 hx_encodeSpecularData(float metallicness, float specularNormalReflection, float roughness)\n{\n	return vec4(roughness, specularNormalReflection * 5.0, metallicness, 1.0);\n}\n\nvec4 hx_gammaToLinear(vec4 color)\n{\n    #ifdef HX_LINEAR_SPACE\n        color.x = pow(color.x, 2.2);\n        color.y = pow(color.y, 2.2);\n        color.z = pow(color.z, 2.2);\n    #endif\n    return color;\n}\n\nvec3 hx_gammaToLinear(vec3 color)\n{\n    #ifdef HX_LINEAR_SPACE\n        color.x = pow(color.x, 2.2);\n        color.y = pow(color.y, 2.2);\n        color.z = pow(color.z, 2.2);\n    #endif\n    return color;\n}\n\nvec4 hx_linearToGamma(vec4 linear)\n{\n    #ifdef HX_LINEAR_SPACE\n        linear.x = pow(linear.x, 0.45);\n        linear.y = pow(linear.y, 0.45);\n        linear.z = pow(linear.z, 0.45);\n    #endif\n    return linear;\n}\n\nvec3 hx_linearToGamma(vec3 linear)\n{\n    #ifdef HX_LINEAR_SPACE\n        linear.x = pow(linear.x, 0.45);\n        linear.y = pow(linear.y, 0.45);\n        linear.z = pow(linear.z, 0.45);\n    #endif\n    return linear;\n}\n\nfloat hx_sampleLinearDepth(sampler2D tex, vec2 uv)\n{\n    return hx_RGBA8ToFloat(texture2D(tex, uv));\n}\n\nvec3 hx_getFrustumVector(vec2 position, mat4 unprojectionMatrix)\n{\n    vec4 unprojNear = unprojectionMatrix * vec4(position, -1.0, 1.0);\n    vec4 unprojFar = unprojectionMatrix * vec4(position, 1.0, 1.0);\n    return unprojFar.xyz/unprojFar.w - unprojNear.xyz/unprojNear.w;\n}\n\n// view vector with z = 1, so we can use nearPlaneDist + linearDepth * (farPlaneDist - nearPlaneDist) as a scale factor to find view space position\nvec3 hx_getLinearDepthViewVector(vec2 position, mat4 unprojectionMatrix)\n{\n    vec4 unproj = unprojectionMatrix * vec4(position, 0.0, 1.0);\n    unproj /= unproj.w;\n    return -unproj.xyz / unproj.z;\n}\n\n// THIS IS FOR NON_LINEAR DEPTH!\nfloat hx_depthToViewZ(float depthSample, mat4 projectionMatrix)\n{\n    return -projectionMatrix[3][2] / (depthSample * 2.0 - 1.0 + projectionMatrix[2][2]);\n}\n\n\nvec3 hx_getNormalSpecularReflectance(float metallicness, float insulatorNormalSpecularReflectance, vec3 color)\n{\n    return mix(vec3(insulatorNormalSpecularReflectance), color, metallicness);\n}\n\n// for use when sampling gbuffer data for lighting\nvoid hx_decodeReflectionData(in vec4 colorSample, in vec4 specularSample, out vec3 normalSpecularReflectance, out float roughness, out float metallicness)\n{\n    //prevent from being 0\n    roughness = clamp(specularSample.x, .01, 1.0);\n	metallicness = specularSample.z;\n    normalSpecularReflectance = mix(vec3(specularSample.y * .2), colorSample.xyz, metallicness);\n}\n\nvec3 hx_fresnel(vec3 normalSpecularReflectance, vec3 lightDir, vec3 halfVector)\n{\n    float cosAngle = 1.0 - max(dot(halfVector, lightDir), 0.0);\n    // to the 5th power\n    float power = pow(cosAngle, 5.0);\n    return normalSpecularReflectance + (1.0 - normalSpecularReflectance) * power;\n}\n\nfloat hx_luminance(vec4 color)\n{\n    return dot(color.xyz, vec3(.30, 0.59, .11));\n}\n\nfloat hx_luminance(vec3 color)\n{\n    return dot(color, vec3(.30, 0.59, .11));\n}\n\nvec2 getPreciseRefractedUVOffset(vec3 viewSpacePosition, vec3 normal, float refractiveRatio, float distance)\n{\n    vec3 refractionVector = refract(normalize(viewSpacePosition), normal, refractiveRatio);\n    return -refractionVector.xy / (viewSpacePosition.z + refractionVector.z * distance) * distance;\n}\n",HX.ShaderLibrary["snippets_geometry_pass.glsl"]="void hx_processGeometryMRT(vec4 color, vec3 normal, float depth, float metallicness, float specularNormalReflection, float roughness, out vec4 colorData, out vec4 normalData, out vec4 specularData)\n{\n    colorData = color;\n	normalData = hx_encodeNormalDepth(normal, depth);\n    specularData = hx_encodeSpecularData(metallicness, specularNormalReflection, roughness);\n}\n\n#if defined(HX_NO_MRT_GBUFFER_COLOR)\n#define hx_processGeometry(color, normal, depth, metallicness, specularNormalReflection, roughness) (gl_FragColor = color)\n#elif defined(HX_NO_MRT_GBUFFER_NORMALS)\n#define hx_processGeometry(color, normal, depth, metallicness, specularNormalReflection, roughness) (gl_FragColor = hx_encodeNormalDepth(normal, depth))\n#elif defined(HX_NO_MRT_GBUFFER_SPECULAR)\n#define hx_processGeometry(color, normal, depth, metallicness, specularNormalReflection, roughness) (gl_FragColor = hx_encodeSpecularData(metallicness, specularNormalReflection, roughness))\n#elif defined(HX_SHADOW_MAP_PASS)\n#define hx_processGeometry(color, normal, depth, metallicness, specularNormalReflection, roughness) (gl_FragColor = hx_floatToRGBA8(depth))\n#else\n#define hx_processGeometry(color, normal, depth, metallicness, specularNormalReflection, roughness) hx_processGeometryMRT(color, normal, depth, metallicness, specularNormalReflection, roughness, gl_FragData[0], gl_FragData[1], gl_FragData[2])\n#endif",HX.ShaderLibrary["snippets_tonemap.glsl"]="#ifdef ADAPTIVE\n#extension GL_EXT_shader_texture_lod : require\n#endif\n\nvarying vec2 uv;\n\n#ifdef ADAPTIVE\nuniform sampler2D hx_luminanceMap;\nuniform float hx_luminanceMipLevel;\n#endif\n\nuniform float hx_exposure;\n\nuniform sampler2D hx_backbuffer;\n\n\nvec4 hx_getToneMapScaledColor()\n{\n    #ifdef ADAPTIVE\n    float referenceLuminance = exp(texture2DLodEXT(hx_luminanceMap, uv, hx_luminanceMipLevel).x);\n	float key = 1.03 - (2.0 / (2.0 + log(referenceLuminance + 1.0)/log(10.0)));\n	float exposure = key / referenceLuminance * hx_exposure;\n	#else\n	float exposure = hx_exposure;\n	#endif\n    return texture2D(hx_backbuffer, uv) * exposure;\n}",HX.ShaderLibrary["ao_blur_fragment.glsl"]="varying vec2 uv;\n\nuniform sampler2D source;\nuniform vec2 halfTexelOffset;\n\nvoid main()\n{\n    vec4 total = texture2D(source, uv - halfTexelOffset * 3.0);\n    total += texture2D(source, uv + halfTexelOffset);\n	gl_FragColor = total * .5;\n}",HX.ShaderLibrary["hbao_fragment.glsl"]="uniform float hx_cameraFrustumRange;\nuniform float hx_cameraNearPlaneDistance;\nuniform vec2 hx_rcpRenderTargetResolution;\nuniform mat4 hx_projectionMatrix;\n\n\nuniform int numRays;\nuniform int numSamplesPerRay;\nuniform float strengthPerRay;\nuniform float halfSampleRadius;\nuniform float bias;\nuniform float rcpFallOffDistance;\nuniform vec2 ditherScale;\n\nuniform sampler2D hx_gbufferDepth;\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D sampleDirTexture;\nuniform sampler2D ditherTexture;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\nvarying vec3 frustumCorner;\n\nvec3 getViewPos(vec2 sampleUV)\n{\n    float depth = hx_sampleLinearDepth(hx_gbufferDepth, sampleUV);\n    float viewZ = depth * hx_cameraFrustumRange + hx_cameraNearPlaneDistance;\n    vec3 viewPos = frustumCorner * vec3(sampleUV * 2.0 - 1.0, 1.0);\n    return viewPos * viewZ;\n}\n\n// Retrieves the occlusion factor for a particular sample\nfloat getSampleOcclusion(vec2 sampleUV, vec3 centerViewPos, vec3 centerNormal, vec3 tangent, inout float topOcclusion)\n{\n    vec3 sampleViewPos = getViewPos(sampleUV);\n\n    // get occlusion factor based on candidate horizon elevation\n    vec3 horizonVector = sampleViewPos - centerViewPos;\n    float horizonVectorLength = length(horizonVector);\n\n    float occlusion;\n\n    // If the horizon vector points away from the tangent, make an estimate\n    if (dot(tangent, horizonVector) < 0.0)\n        occlusion = .5;\n    else\n        occlusion = dot(centerNormal, horizonVector) / horizonVectorLength;\n\n    // this adds occlusion only if angle of the horizon vector is higher than the previous highest one without branching\n    float diff = max(occlusion - topOcclusion, 0.0);\n    topOcclusion = max(occlusion, topOcclusion);\n\n    // attenuate occlusion contribution using distance function 1 - (d/f)^2\n    float distanceFactor = clamp(horizonVectorLength * rcpFallOffDistance, 0.0, 1.0);\n    distanceFactor = 1.0 - distanceFactor * distanceFactor;\n    return diff * distanceFactor;\n}\n\n// Retrieves the occlusion for a given ray\nfloat getRayOcclusion(vec2 direction, float jitter, vec2 projectedRadii, vec3 centerViewPos, vec3 centerNormal)\n{\n    // calculate the nearest neighbour sample along the direction vector\n    vec2 texelSizedStep = direction * hx_rcpRenderTargetResolution;\n    direction *= projectedRadii;\n\n    // gets the tangent for the current ray, this will be used to handle opposing horizon vectors\n    // Tangent is corrected with respect to face normal by projecting it onto the tangent plane defined by the normal\n    vec3 tangent = getViewPos(uv + texelSizedStep) - centerViewPos;\n    tangent -= dot(centerNormal, tangent) * centerNormal;\n\n    vec2 stepUV = direction.xy / float(NUM_SAMPLES_PER_RAY - 1);\n\n    // jitter the starting position for ray marching between the nearest neighbour and the sample step size\n    vec2 jitteredOffset = mix(texelSizedStep, stepUV, jitter);\n    //stepUV *= 1.0 + jitter * .1;\n    vec2 sampleUV = uv + jitteredOffset;\n\n    // top occlusion keeps track of the occlusion contribution of the last found occluder.\n    // set to bias value to avoid near-occluders\n    float topOcclusion = bias;\n    float occlusion = 0.0;\n\n    // march!\n    for (int step = 0; step < NUM_SAMPLES_PER_RAY; ++step) {\n        occlusion += getSampleOcclusion(sampleUV, centerViewPos, centerNormal, tangent, topOcclusion);\n        sampleUV += stepUV;\n    }\n\n    return occlusion;\n}\n\nvoid main()\n{\n    vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n    vec3 centerNormal = hx_decodeNormal(normalSample);\n    float centerDepth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n    float viewZ = centerDepth * hx_cameraFrustumRange + hx_cameraNearPlaneDistance;\n    vec3 centerViewPos = viewZ * viewDir;\n\n    // clamp z to a minimum, so the radius does not get excessively large in screen-space\n    float projRadius = halfSampleRadius / max(-centerViewPos.z, 7.0);\n    vec2 projectedRadii = projRadius * vec2(hx_projectionMatrix[0][0], hx_projectionMatrix[1][1]);\n\n    // do not take more steps than there are pixels\n    float totalOcclusion = 0.0;\n\n    vec2 randomFactors = texture2D(ditherTexture, uv * ditherScale).xy;\n\n    vec2 rayUV = vec2(0.0);\n    for (int i = 0; i < NUM_RAYS; ++i) {\n        rayUV.x = (float(i) + randomFactors.x) / float(NUM_RAYS);\n        vec2 sampleDir = texture2D(sampleDirTexture, rayUV).xy * 2.0 - 1.0;\n        totalOcclusion += getRayOcclusion(sampleDir, randomFactors.y, projectedRadii, centerViewPos, centerNormal);\n    }\n\n    totalOcclusion = 1.0 - clamp(strengthPerRay * totalOcclusion, 0.0, 1.0);\n    gl_FragColor = vec4(totalOcclusion);\n}",HX.ShaderLibrary["hbao_vertex.glsl"]="attribute vec4 hx_position;\nattribute vec2 hx_texCoord;\n\nuniform mat4 hx_inverseProjectionMatrix;\n\nvarying vec2 uv;\nvarying vec3 viewDir;\nvarying vec3 frustumCorner;\n\nvoid main()\n{\n    uv = hx_texCoord;\n    viewDir = hx_getLinearDepthViewVector(hx_position.xy, hx_inverseProjectionMatrix);\n    frustumCorner = hx_getLinearDepthViewVector(vec2(1.0, 1.0), hx_inverseProjectionMatrix);\n    gl_Position = hx_position;\n}",HX.ShaderLibrary["ssao_fragment.glsl"]="uniform mat4 hx_projectionMatrix;\nuniform mat4 hx_cameraWorldMatrix;\nuniform float hx_cameraFrustumRange;\n\nuniform vec2 ditherScale;\nuniform float strengthPerSample;\nuniform float rcpFallOffDistance;\nuniform float sampleRadius;\nuniform vec3 samples[NUM_SAMPLES]; // w contains bias\n\nuniform sampler2D hx_gbufferNormals;\nuniform sampler2D hx_gbufferDepth;\nuniform sampler2D ditherTexture;\n\nvarying vec2 uv;\n\nvoid main()\n{\n    vec4 normalSample = texture2D(hx_gbufferNormals, uv);\n    vec3 centerNormal = hx_decodeNormal(normalSample);\n    float centerDepth = hx_sampleLinearDepth(hx_gbufferDepth, uv);\n    float totalOcclusion = 0.0;\n    vec3 dither = texture2D(ditherTexture, uv * ditherScale).xyz;\n    vec3 randomPlaneNormal = normalize(dither - .5);\n    float w = -centerDepth * hx_cameraFrustumRange * hx_projectionMatrix[2][3] + hx_projectionMatrix[3][3];\n    vec3 sampleRadii;\n    sampleRadii.x = sampleRadius * .5 * hx_projectionMatrix[0][0] / w;\n    sampleRadii.y = sampleRadius * .5 * hx_projectionMatrix[1][1] / w;\n    sampleRadii.z = sampleRadius;\n\n    for (int i = 0; i < NUM_SAMPLES; ++i) {\n        vec3 sampleOffset = reflect(samples[i], randomPlaneNormal);\n        vec3 normOffset = normalize(sampleOffset);\n        float cosFactor = dot(normOffset, centerNormal);\n        float sign = sign(cosFactor);\n        sampleOffset *= sign;\n        cosFactor *= sign;\n\n        vec3 scaledOffset = sampleOffset * sampleRadii;\n\n        vec2 samplePos = uv + scaledOffset.xy;\n        float occluderDepth = hx_sampleLinearDepth(hx_gbufferDepth, samplePos);\n        float diffZ = (centerDepth - occluderDepth) * hx_cameraFrustumRange;\n\n        // distanceFactor: from 1 to 0, near to far\n        float distanceFactor = clamp(diffZ * rcpFallOffDistance, 0.0, 1.0);\n        distanceFactor = 1.0 - distanceFactor;\n\n        // sampleOcclusion: 1 if occluding, 0 otherwise\n        float sampleOcclusion = float(diffZ > scaledOffset.z);\n        totalOcclusion += sampleOcclusion * distanceFactor * cosFactor;\n\n    }\n    gl_FragColor = vec4(1.0 - totalOcclusion * strengthPerSample);\n}",HX.Float2=function(t,e){this.x=t||0,this.y=e||0},HX.Float2.angle=function(t,e){return Math.acos(HX.dot2(t,e)/(t.length()*e.length()))},HX.Float2.distance=function(t,e){var i=t.x-e.x,n=t.y-e.y;return Math.sqrt(i*i+n*n)},HX.Float2.angleNormalized=function(t,e){return Math.acos(HX.dot2(t,e))},HX.Float2.sum=function(t,e){return new HX.Float2(t.x+e.x,t.y+e.y)},HX.Float2.scale=function(t,e){return new HX.Float2(t.x*e,t.y*e)},HX.Float2.prototype={constructor:HX.Float2,set:function(t,e){this.x=t,this.y=e},lengthSqr:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){var t=1/this.length();this.x*=t,this.y*=t},clone:function(){return new HX.Float2(this.x,this.y)},add:function(t){this.x+=t.x,this.y+=t.y},subtract:function(t){this.x-=t.x,this.y-=t.y},scale:function(t){this.x*=t,this.y*=t},sum:function(t,e){this.x=t.x+e.x,this.y=t.y+e.y},difference:function(t,e){this.x=t.x-e.x,this.y=t.y-e.y},scaled:function(t,e){this.x=t*e.x,this.y=t*e.y},negate:function(){this.x=-this.x,this.y=-this.y},multiply:function(t){this.x*=t.x,this.y*=t.y},abs:function(){this.x=Math.abs(this.x),this.y=Math.abs(this.y)},lerp:function(t,e,i){var n=t.x,r=t.y;this.x=n+(e.x-n)*factor,this.y=r+(e.y-r)*factor},fromPolarCoordinates:function(t,e){this.x=t*Math.cos(e),this.y=t*Math.sin(e)},copyFrom:function(t){this.x=t.x,this.y=t.y},maximize:function(t){t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y)},minimize:function(t){t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y)}},HX.Float2.ZERO=new HX.Float2(0,0),HX.Float2.X_AXIS=new HX.Float2(1,0),HX.Float2.Y_AXIS=new HX.Float2(0,1),HX.PlaneSide={FRONT:1,BACK:-1,INTERSECTING:0},HX.Float4=function(t,e,i,n){this.x=t||0,this.y=e||0,this.z=i||0,this.w=void 0===n?1:n},HX.Float4.angle=function(t,e){return Math.acos(HX.dot3(t,e)/(t.length()*e.length()))},HX.Float4.distance=function(t,e){var i=t.x-e.x,n=t.y-e.y,r=t.z-e.z;return Math.sqrt(i*i+n*n+r*r)},HX.Float4.angleNormalized=function(t,e){return Math.acos(HX.dot3(t,e))},HX.Float4.sum=function(t,e){return new HX.Float4(t.x+e.x,t.y+e.y,t.z+e.z,t.w+e.w)},HX.Float4.scale=function(t,e){return new HX.Float4(t.x*e,t.y*e,t.z*e,t.w*e)},HX.Float4.prototype={constructor:HX.Float4,set:function(t,e,i,n){this.x=t,this.y=e,this.z=i,this.w=n},lengthSqr:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},normalize:function(){var t=1/this.length();this.x*=t,this.y*=t,this.z*=t},normalizeAsPlane:function(){var t=1/this.length();this.x*=t,this.y*=t,this.z*=t,this.w*=t},clone:function(){return new HX.Float4(this.x,this.y,this.z,this.w)},add:function(t){this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w},subtract:function(t){this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w},scale:function(t){this.x*=t,this.y*=t,this.z*=t,this.w*=t},sum:function(t,e){this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w},difference:function(t,e){this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w},scaled:function(t,e){this.x=t*e.x,this.y=t*e.y,this.z=t*e.z,this.w=t*e.w},negate:function(){this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w},multiply:function(t){this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w},homogeneousProject:function(){var t=1/w;this.x*=t,this.y*=t,this.z*=t,this.w=1},abs:function(){this.x=Math.abs(this.x),this.y=Math.abs(this.y),this.z=Math.abs(this.z),this.w=Math.abs(this.w)},cross:function(t,e){var i=t.x,n=t.y,r=t.z,a=e.x,s=e.y,o=e.z;this.x=n*o-r*s,this.y=r*a-i*o,this.z=i*s-n*a},lerp:function(t,e,i){var n=t.x,r=t.y,a=t.z,s=t.w;this.x=n+(e.x-n)*i,this.y=r+(e.y-r)*i,this.z=a+(e.z-a)*i,this.w=s+(e.w-s)*i},fromSphericalCoordinates:function(t,e,i){this.x=t*Math.sin(i)*Math.cos(e),this.y=t*Math.cos(i),this.z=t*Math.sin(i)*Math.sin(e),this.w=0},copyFrom:function(t){this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w},maximize:function(t){t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y),t.z>this.z&&(this.z=t.z),t.w>this.w&&(this.w=t.w)},maximize3:function(t){t.x>this.x&&(this.x=t.x),t.y>this.y&&(this.y=t.y),t.z>this.z&&(this.z=t.z)},minimize:function(t){t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y),t.z<this.z&&(this.z=t.z),t.w<this.w&&(this.w=t.w)},minimize3:function(t){t.x<this.x&&(this.x=t.x),t.y<this.y&&(this.y=t.y),t.z<this.z&&(this.z=t.z)}},HX.Float4.ORIGIN_POINT=new HX.Float4(0,0,0,1),HX.Float4.ZERO=new HX.Float4(0,0,0,0),HX.Float4.X_AXIS=new HX.Float4(1,0,0,0),HX.Float4.Y_AXIS=new HX.Float4(0,1,0,0),HX.Float4.Z_AXIS=new HX.Float4(0,0,1,0),HX.Gaussian={estimateGaussianRadius:function(t,e){return Math.sqrt(-2*t*Math.log(e))}},HX.CenteredGaussianCurve=function(t){this._amplitude=1/Math.sqrt(2*t*Math.PI),this._expScale=-1/(2*t)},HX.CenteredGaussianCurve.prototype={getValueAt:function(t){return this._amplitude*Math.pow(Math.E,t*t*this._expScale)}},HX.CenteredGaussianCurve.fromRadius=function(t,e){e=e||.01;var i=t/Math.sqrt(-2*Math.log(e));return new HX.CenteredGaussianCurve(i*i)},HX.dot2=function(t,e){return t.x*e.x+t.y*e.y},HX.dot3=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},HX.dot4=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w},HX.clamp=function(t,e,i){return e>t?e:t>i?i:t},HX.saturate=function(t){return HX.clamp(t,0,1);

},HX.Matrix4x4=function(t,e,i,n,r,a,s,o,h,_,l,c,u,m,f,d){this._m=new HX.TypedArray(16),this._m[0]=void 0===t?1:0,this._m[1]=r||0,this._m[2]=h||0,this._m[3]=u||0,this._m[4]=e||0,this._m[5]=void 0===a?1:0,this._m[6]=_||0,this._m[7]=m||0,this._m[8]=i||0,this._m[9]=s||0,this._m[10]=void 0===l?1:0,this._m[11]=f||0,this._m[12]=n||0,this._m[13]=o||0,this._m[14]=c||0,this._m[15]=void 0===d?1:0},HX.Matrix4x4.prototype={constructor:HX.Matrix4x4,transform:function(t,e){var e=e||new HX.Float4,i=t.x,n=t.y,r=t.z,a=t.w,s=this._m;return e.x=s[0]*i+s[4]*n+s[8]*r+s[12]*a,e.y=s[1]*i+s[5]*n+s[9]*r+s[13]*a,e.z=s[2]*i+s[6]*n+s[10]*r+s[14]*a,e.w=s[3]*i+s[7]*n+s[11]*r+s[15]*a,e},transformPoint:function(t,e){var e=e||new HX.Float4,i=t.x,n=t.y,r=t.z,a=this._m;return e.x=a[0]*i+a[4]*n+a[8]*r+a[12],e.y=a[1]*i+a[5]*n+a[9]*r+a[13],e.z=a[2]*i+a[6]*n+a[10]*r+a[14],e.w=1,e},transformVector:function(t){var e=t.x,i=t.y,n=t.z;return new HX.Float4(this._m[0]*e+this._m[4]*i+this._m[8]*n,this._m[1]*e+this._m[5]*i+this._m[9]*n,this._m[2]*e+this._m[6]*i+this._m[10]*n,0)},transformExtent:function(t){var e=t.x,i=t.y,n=t.z,r=this._m[0],a=this._m[1],s=this._m[2],o=this._m[4],h=this._m[5],_=this._m[6],l=this._m[8],c=this._m[9],u=this._m[10];return 0>r&&(r=-r),0>a&&(a=-a),0>s&&(s=-s),0>o&&(o=-o),0>h&&(h=-h),0>_&&(_=-_),0>l&&(l=-l),0>c&&(c=-c),0>u&&(u=-u),new HX.Float4(r*e+o*i+l*n,a*e+h*i+c*n,s*e+_*i+u*n,0)},transformTo:function(t,e){var i=t.x,n=t.y,r=t.z,a=t.w,s=this._m[0]*i+this._m[4]*n+this._m[8]*r+this._m[12]*a,o=this._m[1]*i+this._m[5]*n+this._m[9]*r+this._m[13]*a,h=this._m[2]*i+this._m[6]*n+this._m[10]*r+this._m[14]*a,_=this._m[3]*i+this._m[7]*n+this._m[11]*r+this._m[15]*a;e.x=s,e.y=o,e.z=h,e.w=_},transformPointTo:function(t,e){var i=t.x,n=t.y,r=t.z,a=(t.w,this._m[0]*i+this._m[4]*n+this._m[8]*r+this._m[12]),s=this._m[1]*i+this._m[5]*n+this._m[9]*r+this._m[13],o=this._m[2]*i+this._m[6]*n+this._m[10]*r+this._m[14];e.x=a,e.y=s,e.z=o,e.w=1},transformVectorTo:function(t,e){var i=t.x,n=t.y,r=t.z,a=m00*i+m01*n+m02*r,s=m10*i+m11*n+m12*r,o=m20*i+m21*n+m22*r;e.x=a,e.y=s,e.z=o,e.w=0},transformExtentTo:function(t,e){var i=t.x,n=t.y,r=t.z,a=this._m[0],s=this._m[1],o=this._m[2],h=this._m[4],_=this._m[5],l=this._m[6],c=this._m[8],u=this._m[9],m=this._m[10];0>a&&(a=-a),0>s&&(s=-s),0>o&&(o=-o),0>h&&(h=-h),0>_&&(_=-_),0>l&&(l=-l),0>c&&(c=-c),0>u&&(u=-u),0>m&&(m=-m),e.x=a*i+h*n+c*r,e.y=s*i+_*n+u*r,e.z=o*i+l*n+m*r,e.w=0},copyFrom:function(t){this._m[0]=t._m[0],this._m[1]=t._m[1],this._m[2]=t._m[2],this._m[3]=t._m[3],this._m[4]=t._m[4],this._m[5]=t._m[5],this._m[6]=t._m[6],this._m[7]=t._m[7],this._m[8]=t._m[8],this._m[9]=t._m[9],this._m[10]=t._m[10],this._m[11]=t._m[11],this._m[12]=t._m[12],this._m[13]=t._m[13],this._m[14]=t._m[14],this._m[15]=t._m[15]},fromQuaternion:function(t){var e=t.x,i=t.y,n=t.z,r=t.w;this._m[0]=1-2*(i*i+n*n),this._m[1]=2*(e*i+r*n),this._m[2]=2*(e*n-r*i),this._m[3]=0,this._m[4]=2*(e*i-r*n),this._m[5]=1-2*(e*e+n*n),this._m[6]=2*(i*n+r*e),this._m[7]=0,this._m[8]=2*(e*n+r*i),this._m[9]=2*(i*n-r*e),this._m[10]=1-2*(e*e+i*i),this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},product:function(t,e){var i=t._m[0],n=t._m[1],r=t._m[2],a=t._m[3],s=t._m[4],o=t._m[5],h=t._m[6],_=t._m[7],l=t._m[8],c=t._m[9],u=t._m[10],m=t._m[11],f=t._m[12],d=t._m[13],p=t._m[14],X=t._m[15],H=e._m[0],g=e._m[1],x=e._m[2],S=e._m[3],E=e._m[4],v=e._m[5],T=e._m[6],L=e._m[7],M=e._m[8],P=e._m[9],y=e._m[10],A=e._m[11],R=e._m[12],b=e._m[13],w=e._m[14],D=e._m[15];this._m[0]=i*H+s*g+l*x+f*S,this._m[1]=n*H+o*g+c*x+d*S,this._m[2]=r*H+h*g+u*x+p*S,this._m[3]=a*H+_*g+m*x+X*S,this._m[4]=i*E+s*v+l*T+f*L,this._m[5]=n*E+o*v+c*T+d*L,this._m[6]=r*E+h*v+u*T+p*L,this._m[7]=a*E+_*v+m*T+X*L,this._m[8]=i*M+s*P+l*y+f*A,this._m[9]=n*M+o*P+c*y+d*A,this._m[10]=r*M+h*P+u*y+p*A,this._m[11]=a*M+_*P+m*y+X*A,this._m[12]=i*R+s*b+l*w+f*D,this._m[13]=n*R+o*b+c*w+d*D,this._m[14]=r*R+h*b+u*w+p*D,this._m[15]=a*R+_*b+m*w+X*D},productAffine:function(t,e){var i=t._m[0],n=t._m[1],r=t._m[2],a=t._m[4],s=t._m[5],o=t._m[6],h=t._m[8],_=t._m[9],l=t._m[10],c=t._m[12],u=t._m[13],m=t._m[14],f=e._m[0],d=e._m[1],p=e._m[2],X=e._m[4],H=e._m[5],g=e._m[6],x=e._m[8],S=e._m[9],E=e._m[10],v=e._m[12],T=e._m[13],L=e._m[14];this._m[0]=i*f+a*d+h*p,this._m[1]=n*f+s*d+_*p,this._m[2]=r*f+o*d+l*p,this._m[4]=i*X+a*H+h*g,this._m[5]=n*X+s*H+_*g,this._m[6]=r*X+o*H+l*g,this._m[8]=i*x+a*S+h*E,this._m[9]=n*x+s*S+_*E,this._m[10]=r*x+o*S+l*E,this._m[12]=i*v+a*T+h*L+c,this._m[13]=n*v+s*T+_*L+u,this._m[14]=r*v+o*T+l*L+m},sum:function(t,e){this._m[0]=t._m[0]+e._m[0],this._m[1]=t._m[1]+e._m[1],this._m[2]=t._m[2]+e._m[3],this._m[3]=t._m[3]+e._m[3],this._m[4]=t._m[4]+e._m[4],this._m[5]=t._m[5]+e._m[5],this._m[6]=t._m[6]+e._m[6],this._m[7]=t._m[7]+e._m[7],this._m[8]=t._m[8]+e._m[8],this._m[9]=t._m[9]+e._m[9],this._m[10]=t._m[10]+e._m[10],this._m[11]=t._m[11]+e._m[11],this._m[12]=t._m[12]+e._m[12],this._m[13]=t._m[13]+e._m[13],this._m[14]=t._m[14]+e._m[14],this._m[15]=t._m[15]+e._m[15]},sumAffine:function(t,e){this._m[0]=t._m[0]+e._m[0],this._m[1]=t._m[1]+e._m[1],this._m[2]=t._m[2]+e._m[3],this._m[4]=t._m[4]+e._m[4],this._m[5]=t._m[5]+e._m[5],this._m[6]=t._m[6]+e._m[6],this._m[8]=t._m[8]+e._m[8],this._m[9]=t._m[9]+e._m[9],this._m[10]=t._m[10]+e._m[10]},difference:function(t,e){this._m[0]=t._m[0]-e._m[0],this._m[1]=t._m[1]-e._m[1],this._m[2]=t._m[2]-e._m[3],this._m[3]=t._m[3]-e._m[3],this._m[4]=t._m[4]-e._m[4],this._m[5]=t._m[5]-e._m[5],this._m[6]=t._m[6]-e._m[6],this._m[7]=t._m[7]-e._m[7],this._m[8]=t._m[8]-e._m[8],this._m[9]=t._m[9]-e._m[9],this._m[10]=t._m[10]-e._m[10],this._m[11]=t._m[11]-e._m[11],this._m[12]=t._m[12]-e._m[12],this._m[13]=t._m[13]-e._m[13],this._m[14]=t._m[14]-e._m[14],this._m[15]=t._m[15]-e._m[15]},differenceAffine:function(t,e){this._m[0]=t._m[0]-e._m[0],this._m[1]=t._m[1]-e._m[1],this._m[2]=t._m[2]-e._m[3],this._m[4]=t._m[4]-e._m[4],this._m[5]=t._m[5]-e._m[5],this._m[6]=t._m[6]-e._m[6],this._m[8]=t._m[8]-e._m[8],this._m[9]=t._m[9]-e._m[9],this._m[10]=t._m[10]-e._m[10]},rotationX:function(t){var e=Math.cos(t),i=Math.sin(t);this._m[0]=1,this._m[1]=0,this._m[2]=0,this._m[3]=0,this._m[4]=0,this._m[5]=e,this._m[6]=i,this._m[7]=0,this._m[8]=0,this._m[9]=-i,this._m[10]=e,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},rotationY:function(t){var e=Math.cos(t),i=Math.sin(t);this._m[0]=e,this._m[1]=0,this._m[2]=-i,this._m[3]=0,this._m[4]=0,this._m[5]=1,this._m[6]=0,this._m[7]=0,this._m[8]=i,this._m[9]=0,this._m[10]=e,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},rotationZ:function(t){var e=Math.cos(t),i=Math.sin(t);this._m[0]=e,this._m[1]=i,this._m[2]=0,this._m[3]=0,this._m[4]=-i,this._m[5]=e,this._m[6]=0,this._m[7]=0,this._m[8]=0,this._m[9]=0,this._m[10]=1,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},rotationAxisAngle:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=1/t.length(),a=t.x*r,s=t.y*r,o=t.z*r,h=1-i;this._m[0]=h*a*a+i,this._m[1]=h*a*s+n*o,this._m[2]=h*a*o-n*s,this._m[3]=0,this._m[4]=h*a*s-n*o,this._m[5]=h*s*s+i,this._m[6]=h*s*o+n*a,this._m[7]=0,this._m[8]=h*a*o+n*s,this._m[9]=h*s*o-n*a,this._m[10]=h*o*o+i,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},rotationXYZ:function(t,e,i){var n=Math.cos(t),r=Math.sin(t),a=Math.cos(e),s=Math.sin(e),o=Math.cos(i),h=Math.sin(i);this._m[0]=a*o,this._m[1]=r*s*o-n*h,this._m[2]=n*s*o+r*h,this._m[3]=0,this._m[4]=a*h,this._m[5]=r*s*h+n*o,this._m[6]=n*s*h-r*o,this._m[7]=0,this._m[8]=-s,this._m[9]=r*a,this._m[10]=n*a,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},rotationPitchYawRoll:function(t,e,i){var n=Math.cos(-t),r=Math.cos(-e),a=Math.cos(i),s=Math.sin(-t),o=Math.sin(-e),h=Math.sin(i),_=-o*n,l=-s,c=r*n,u=-r*h-o*s*a,m=n*a,f=-o*h+s*a*r,d=m*c-f*l,p=f*_-u*c,X=u*l-m*_;this._m[0]=d,this._m[1]=p,this._m[2]=X,this._m[3]=0,this._m[4]=u,this._m[5]=m,this._m[6]=f,this._m[7]=0,this._m[8]=_,this._m[9]=l,this._m[10]=c,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},translation:function(t,e,i){this._m[0]=1,this._m[1]=0,this._m[2]=0,this._m[3]=0,this._m[4]=0,this._m[5]=1,this._m[6]=0,this._m[7]=0,this._m[8]=0,this._m[9]=0,this._m[10]=1,this._m[11]=0,this._m[12]=t,this._m[13]=e,this._m[14]=i,this._m[15]=1},scaleMatrix:function(t,e,i){this._m[0]=t,this._m[1]=0,this._m[2]=0,this._m[3]=0,this._m[4]=0,this._m[5]=e,this._m[6]=0,this._m[7]=0,this._m[8]=0,this._m[9]=0,this._m[10]=i,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=0,this._m[15]=1},perspectiveProjection:function(t,e,i,n){var r=1/Math.tan(.5*t),a=r/e,s=1/(i-n);this._m[0]=a,this._m[1]=0,this._m[2]=0,this._m[3]=0,this._m[4]=0,this._m[5]=r,this._m[6]=0,this._m[7]=0,this._m[8]=0,this._m[9]=0,this._m[10]=(n+i)*s,this._m[11]=-1,this._m[12]=0,this._m[13]=0,this._m[14]=2*i*n*s,this._m[15]=0},orthographicOffCenterProjection:function(t,e,i,n,r,a){var s=1/(e-t),o=1/(i-n),h=1/(r-a);this._m[0]=2*s,this._m[1]=0,this._m[2]=0,this._m[3]=0,this._m[4]=0,this._m[5]=2*o,this._m[6]=0,this._m[7]=0,this._m[8]=0,this._m[9]=0,this._m[10]=2*h,this._m[11]=0,this._m[12]=-(t+e)*s,this._m[13]=-(i+n)*o,this._m[14]=(a+r)*h,this._m[15]=1},orthographicProjection:function(t,e,i,n){var r=Math.tan(.5*vFOV),a=r*aspectRatio,s=1/(i-n);this._m[0]=1/a,this._m[1]=0,this._m[2]=0,this._m[3]=0,this._m[4]=0,this._m[5]=1/r,this._m[6]=0,this._m[7]=0,this._m[8]=0,this._m[9]=0,this._m[10]=2*s,this._m[11]=0,this._m[12]=0,this._m[13]=0,this._m[14]=(n+i)*s,this._m[15]=1},scaled:function(t,e){this._m[0]=e._m[0]*t,this._m[1]=e._m[1]*t,this._m[2]=e._m[2]*t,this._m[3]=e._m[3]*t,this._m[4]=e._m[4]*t,this._m[5]=e._m[5]*t,this._m[6]=e._m[6]*t,this._m[7]=e._m[7]*t,this._m[8]=e._m[8]*t,this._m[9]=e._m[9]*t,this._m[10]=e._m[10]*t,this._m[11]=e._m[11]*t,this._m[12]=e._m[12]*t,this._m[13]=e._m[13]*t,this._m[14]=e._m[14]*t,this._m[15]=e._m[15]*t},add:function(t){this._m[0]+=t._m[0],this._m[1]+=t._m[1],this._m[2]+=t._m[2],this._m[3]+=t._m[3],this._m[4]+=t._m[4],this._m[5]+=t._m[5],this._m[6]+=t._m[6],this._m[7]+=t._m[7],this._m[8]+=t._m[8],this._m[9]+=t._m[9],this._m[10]+=t._m[10],this._m[11]+=t._m[11],this._m[12]+=t._m[12],this._m[13]+=t._m[13],this._m[14]+=t._m[14],this._m[15]+=t._m[15]},subtract:function(t){this._m[0]-=t._m[0],this._m[1]-=t._m[1],this._m[2]-=t._m[2],this._m[3]-=t._m[3],this._m[4]-=t._m[4],this._m[5]-=t._m[5],this._m[6]-=t._m[6],this._m[7]-=t._m[7],this._m[8]-=t._m[8],this._m[9]-=t._m[9],this._m[10]-=t._m[10],this._m[11]-=t._m[11],this._m[12]-=t._m[12],this._m[13]-=t._m[13],this._m[14]-=t._m[14],this._m[15]-=t._m[15]},clone:function(){return new HX.Matrix4x4(this._m[0],this._m[4],this._m[8],this._m[12],this._m[1],this._m[5],this._m[9],this._m[13],this._m[2],this._m[6],this._m[10],this._m[14],this._m[3],this._m[7],this._m[11],this._m[15])},transpose:function(){var t=this._m[1],e=this._m[2],i=this._m[3],n=this._m[6],r=this._m[7],a=this._m[11];this._m[1]=this._m[4],this._m[2]=this._m[8],this._m[3]=this._m[12],this._m[4]=t,this._m[6]=this._m[9],this._m[7]=this._m[13],this._m[8]=e,this._m[9]=n,this._m[11]=this._m[14],this._m[12]=i,this._m[13]=r,this._m[14]=a},determinant3x3:function(t,e){var i=0==e?4:0,n=2>e?8:4,r=3==e?8:12,a=0==t?1:0,s=2>t?2:1,o=3==t?2:3,h=this._m[i|s],_=this._m[s|n],l=this._m[r|s],c=this._m[i|o],u=this._m[n|o],m=this._m[o|r];return this._m[i|a]*(_*m-l*u)-this._m[n|a]*(h*m-l*c)+this._m[r|a]*(h*u-_*c)},cofactor:function(t,e){var i=1-((t+e&1)<<1);return i*this.determinant3x3(t,e)},getCofactorMatrix:function(t,e){for(var i=new HX.Matrix4x4,n=0;16>n;++n)i._m[n]=this.cofactor(3&n,n>>2);return i},getAdjugate:function(t,e){for(var i=new HX.Matrix4x4,n=0;16>n;++n)i._m[n]=this.cofactor(n>>2,3&n);return i},determinant:function(){return this._m[0]*this.determinant3x3(0,0)-this._m[4]*this.determinant3x3(0,1)+this._m[8]*this.determinant3x3(0,2)-this._m[12]*this.determinant3x3(0,3)},inverseOf:function(t){var e=1/t.determinant();this._m[0]=e*t.cofactor(0,0),this._m[1]=e*t.cofactor(0,1),this._m[2]=e*t.cofactor(0,2),this._m[3]=e*t.cofactor(0,3),this._m[4]=e*t.cofactor(1,0),this._m[5]=e*t.cofactor(1,1),this._m[6]=e*t.cofactor(1,2),this._m[7]=e*t.cofactor(1,3),this._m[8]=e*t.cofactor(2,0),this._m[9]=e*t.cofactor(2,1),this._m[10]=e*t.cofactor(2,2),this._m[11]=e*t.cofactor(2,3),this._m[12]=e*t.cofactor(3,0),this._m[13]=e*t.cofactor(3,1),this._m[14]=e*t.cofactor(3,2),this._m[15]=e*t.cofactor(3,3)},inverseAffineOf:function(t){var e=t._m[0],i=t._m[1],n=t._m[2],r=t._m[4],a=t._m[5],s=t._m[6],o=t._m[8],h=t._m[9],_=t._m[10],l=t._m[12],c=t._m[13],u=t._m[14],m=e*(a*_-h*s)-r*(i*_-h*n)+o*(i*s-a*n),f=1/m,d=(a*_-h*s)*f,p=(h*n-i*_)*f,X=(i*s-a*n)*f,H=(o*s-r*_)*f,g=(e*_-o*n)*f,x=(r*n-e*s)*f,S=(r*h-o*a)*f,E=(o*i-e*h)*f,v=(e*a-r*i)*f;this._m[0]=d,this._m[1]=p,this._m[2]=X,this._m[3]=0,this._m[4]=H,this._m[5]=g,this._m[6]=x,this._m[7]=0,this._m[8]=S,this._m[9]=E,this._m[10]=v,this._m[11]=0,this._m[12]=-d*l-H*c-S*u,this._m[13]=-p*l-g*c-E*u,this._m[14]=-X*l-x*c-v*u,this._m[15]=1},writeNormalMatrix:function(t){var e=this._m[0],i=this._m[1],n=this._m[2],r=this._m[4],a=this._m[5],s=this._m[6],o=this._m[8],h=this._m[9],_=this._m[10],l=e*(a*_-h*s)-this._m[4]*(i*_-h*n)+this._m[8]*(i*s-a*n),c=1/l;t[0]=(a*_-h*s)*c,t[1]=(o*s-r*_)*c,t[2]=(r*h-o*a)*c,t[3]=(h*n-i*_)*c,t[4]=(e*_-o*n)*c,t[5]=(o*i-e*h)*c,t[6]=(i*s-a*n)*c,t[7]=(r*n-e*s)*c,t[8]=(e*a-r*i)*c},invert:function(){var t=1/this.determinant(),e=t*this.cofactor(0,0),i=t*this.cofactor(0,1),n=t*this.cofactor(0,2),r=t*this.cofactor(0,3),a=t*this.cofactor(1,0),s=t*this.cofactor(1,1),o=t*this.cofactor(1,2),h=t*this.cofactor(1,3),_=t*this.cofactor(2,0),l=t*this.cofactor(2,1),c=t*this.cofactor(2,2),u=t*this.cofactor(2,3),m=t*this.cofactor(3,0),f=t*this.cofactor(3,1),d=t*this.cofactor(3,2),p=t*this.cofactor(3,3);this._m[0]=e,this._m[1]=i,this._m[2]=n,this._m[3]=r,this._m[4]=a,this._m[5]=s,this._m[6]=o,this._m[7]=h,this._m[8]=_,this._m[9]=l,this._m[10]=c,this._m[11]=u,this._m[12]=m,this._m[13]=f,this._m[14]=d,this._m[15]=p},invertAffine:function(){var t=this._m[0],e=this._m[1],i=this._m[2],n=this._m[4],r=this._m[5],a=this._m[6],s=this._m[8],o=this._m[9],h=this._m[10],_=this._m[12],l=this._m[13],c=this._m[14],u=t*(r*h-o*a)-n*(e*h-o*i)+s*(e*a-r*i),m=1/u,f=(r*h-o*a)*m,d=(o*i-e*h)*m,p=(e*a-r*i)*m,X=(s*a-n*h)*m,H=(t*h-s*i)*m,g=(n*i-t*a)*m,x=(n*o-s*r)*m,S=(s*e-t*o)*m,E=(t*r-n*e)*m;this._m[0]=f,this._m[1]=d,this._m[2]=p,this._m[4]=X,this._m[5]=H,this._m[6]=g,this._m[8]=x,this._m[9]=S,this._m[10]=E,this._m[12]=-f*_-X*l-x*c,this._m[13]=-d*_-H*l-S*c,this._m[14]=-p*_-g*l-E*c},append:function(t){this.product(this,t)},prepend:function(t){this.product(t,this)},appendAffine:function(t){this.productAffine(t,this)},prependAffine:function(t){this.productAffine(this,t)},add:function(t){this._m[0]+=t._m[0],this._m[1]+=t._m[1],this._m[2]+=t._m[2],this._m[3]+=t._m[3],this._m[4]+=t._m[4],this._m[5]+=t._m[5],this._m[6]+=t._m[6],this._m[7]+=t._m[7],this._m[8]+=t._m[8],this._m[9]+=t._m[9],this._m[10]+=t._m[10],this._m[11]+=t._m[11],this._m[12]+=t._m[12],this._m[13]+=t._m[13],this._m[14]+=t._m[14],this._m[15]+=t._m[15]},addAffine:function(t){this._m[0]+=t._m[0],this._m[1]+=t._m[1],this._m[2]+=t._m[2],this._m[4]+=t._m[4],this._m[5]+=t._m[5],this._m[6]+=t._m[6],this._m[8]+=t._m[8],this._m[9]+=t._m[9],this._m[10]+=t._m[10]},subtract:function(t){this._m[0]-=t._m[0],this._m[1]-=t._m[1],this._m[2]-=t._m[2],this._m[3]-=t._m[3],this._m[4]-=t._m[4],this._m[5]-=t._m[5],this._m[6]-=t._m[6],this._m[7]-=t._m[7],this._m[8]-=t._m[8],this._m[9]-=t._m[9],this._m[10]-=t._m[10],this._m[11]-=t._m[11],this._m[12]-=t._m[12],this._m[13]-=t._m[13],this._m[14]-=t._m[14],this._m[15]-=t._m[15]},subtractAffine:function(t){this._m[0]-=t._m[0],this._m[1]-=t._m[1],this._m[2]-=t._m[2],this._m[4]-=t._m[4],this._m[5]-=t._m[5],this._m[6]-=t._m[6],this._m[8]-=t._m[8],this._m[9]-=t._m[9],this._m[10]-=t._m[10]},appendScale:function(t,e,i){this._m[0]*=t,this._m[1]*=e,this._m[2]*=i,this._m[4]*=t,this._m[5]*=e,this._m[6]*=i,this._m[8]*=t,this._m[9]*=e,this._m[10]*=i,this._m[12]*=t,this._m[13]*=e,this._m[14]*=i},prependScale:function(t,e,i){this._m[0]*=t,this._m[1]*=t,this._m[2]*=t,this._m[3]*=t,this._m[4]*=e,this._m[5]*=e,this._m[6]*=e,this._m[7]*=e,this._m[8]*=i,this._m[9]*=i,this._m[10]*=i,this._m[11]*=i},appendTranslation:function(t,e,i){this._m[12]+=t,this._m[13]+=e,this._m[14]+=i},prependTranslation:function(t,e,i){this._m[12]+=this._m[0]*t+this._m[4]*e+this._m[8]*i,this._m[13]+=this._m[1]*t+this._m[5]*e+this._m[9]*i,this._m[14]+=this._m[2]*t+this._m[6]*e+this._m[10]*i,this._m[15]+=this._m[3]*t+this._m[7]*e+this._m[11]*i},appendRotationQuaternion:function(t){var e=t.x,i=t.y,n=t.z,r=t.w,a=1-2*(i*i+n*n),s=2*(e*i+r*n),o=2*(e*n-r*i),h=2*(e*i-r*n),_=1-2*(e*e+n*n),l=2*(i*n+r*e),c=2*(e*n+r*i),u=2*(i*n-r*e),m=1-2*(e*e+i*i),f=this._m[0],d=this._m[1],p=this._m[2],X=this._m[4],H=this._m[5],g=this._m[6],x=this._m[8],S=this._m[9],E=this._m[10],v=this._m[12],T=this._m[13],L=this._m[14];this._m[0]=a*f+h*d+c*p,this._m[1]=s*f+_*d+u*p,this._m[2]=o*f+l*d+m*p,this._m[4]=a*X+h*H+c*g,this._m[5]=s*X+_*H+u*g,this._m[6]=o*X+l*H+m*g,this._m[8]=a*x+h*S+c*E,this._m[9]=s*x+_*S+u*E,this._m[10]=o*x+l*S+m*E,this._m[12]=a*v+h*T+c*L,this._m[13]=s*v+_*T+u*L,this._m[14]=o*v+l*T+m*L},prependRotationQuaternion:function(t){var e=t.x,i=t.y,n=t.z,r=t.w,a=this._m[0],s=this._m[1],o=this._m[2],h=this._m[4],_=this._m[5],l=this._m[6],c=this._m[8],u=this._m[9],m=this._m[10],f=1-2*(i*i+n*n),d=2*(e*i+r*n),p=2*(e*n-r*i),X=2*(e*i-r*n),H=1-2*(e*e+n*n),g=2*(i*n+r*e),x=2*(e*n+r*i),S=2*(i*n-r*e),E=1-2*(e*e+i*i);this._m[0]=a*f+h*d+c*p,this._m[1]=s*f+_*d+u*p,this._m[2]=o*f+l*d+m*p,this._m[4]=a*X+h*H+c*g,this._m[5]=s*X+_*H+u*g,this._m[6]=o*X+l*H+m*g,this._m[8]=a*x+h*S+c*E,this._m[9]=s*x+_*S+u*E,this._m[10]=o*x+l*S+m*E},appendRotationAxisAngle:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=1/t.length(),a=t.x*r,s=t.y*r,o=t.z*r,h=1-i,_=h*a*a+i,l=h*a*s+n*o,c=h*a*o-n*s,u=h*a*s-n*o,m=h*s*s+i,f=h*s*o+n*a,d=h*a*o+n*s,p=h*s*o-n*a,X=h*o*o+i,H=this._m[0],g=this._m[1],x=this._m[2],S=this._m[4],E=this._m[5],v=this._m[6],T=this._m[8],L=this._m[9],M=this._m[10],P=this._m[12],y=this._m[13],A=this._m[14];this._m[0]=_*H+u*g+d*x,this._m[1]=l*H+m*g+p*x,this._m[2]=c*H+f*g+X*x,this._m[4]=_*S+u*E+d*v,this._m[5]=l*S+m*E+p*v,this._m[6]=c*S+f*E+X*v,this._m[8]=_*T+u*L+d*M,this._m[9]=l*T+m*L+p*M,this._m[10]=c*T+f*L+X*M,this._m[12]=_*P+u*y+d*A,this._m[13]=l*P+m*y+p*A,this._m[14]=c*P+f*y+X*A},prependRotationAxisAngle:function(t,e){var i=Math.cos(e),n=Math.sin(e),r=1/t.length(),a=t.x*r,s=t.y*r,o=t.z*r,h=1-i,_=this._m[0],l=this._m[1],c=this._m[2],u=this._m[4],m=this._m[5],f=this._m[6],d=this._m[8],p=this._m[9],X=this._m[10],H=h*a*a+i,g=h*a*s+n*o,x=h*a*o-n*s,S=h*a*s-n*o,E=h*s*s+i,v=h*s*o+n*a,T=h*a*o+n*s,L=h*s*o-n*a,M=h*o*o+i;this._m[0]=_*H+u*g+d*x,this._m[1]=l*H+m*g+p*x,this._m[2]=c*H+f*g+X*x,this._m[4]=_*S+u*E+d*v,this._m[5]=l*S+m*E+p*v,this._m[6]=c*S+f*E+X*v,this._m[8]=_*T+u*L+d*M,this._m[9]=l*T+m*L+p*M,this._m[10]=c*T+f*L+X*M},getRow:function(t,e){return e||(e=new HX.Float4),e.x=this._m[t],e.y=this._m[4|t],e.z=this._m[8|t],e.w=this._m[12|t],e},setRow:function(t,e){this._m[t]=e.x,this._m[4|t]=e.y,this._m[8|t]=e.z,this._m[12|t]=e.w},getElement:function(t,e){return this._m[t|e<<2]},setElement:function(t,e,i){this._m[t|e<<2]=i},getColumn:function(t,e){return e||(e=new HX.Float4),t<<=2,e.x=this._m[t],e.y=this._m[1|t],e.z=this._m[2|t],e.w=this._m[3|t],e},setColumn:function(t,e){t<<=2,this._m[t]=e.x,this._m[1|t]=e.y,this._m[2|t]=e.z,this._m[3|t]=e.w},lookAt:function(t,e,i){var n=new HX.Float4;n.difference(e,t),n.normalize();var r=new HX.Float4;if(r.cross(i,n),Math.abs(r.lengthSqr())>1e-4)r.normalize();else{var a=new HX.Float4(i.x,i.z,i.y,0);r.cross(a,n),Math.abs(r.lengthSqr())<=1e-4&&(a.set(i.z,i.y,i.z,0),r.cross(a,n)),r.normalize()}var s=new HX.Float4;s.cross(n,r),this._m[0]=r.x,this._m[1]=r.y,this._m[2]=r.z,this._m[3]=0,this._m[4]=s.x,this._m[5]=s.y,this._m[6]=s.z,this._m[7]=0,this._m[8]=n.x,this._m[9]=n.y,this._m[10]=n.z,this._m[11]=0,this._m[12]=e.x,this._m[13]=e.y,this._m[14]=e.z,this._m[15]=1},compose:function(t){this.fromQuaternion(t.rotation);var e=t.scale,i=t.position;this.appendScale(e.x,e.y,e.z),this.appendTranslation(i.x,i.y,i.z)},decompose:function(t){t=t||new Transform;var e=this._m[0],i=this._m[1],n=this._m[2],r=this._m[4],a=this._m[5],s=this._m[6],o=this._m[8],h=this._m[9],_=this._m[10];return t.scale.x=Math.sqrt(e*e+i*i+n*n),t.scale.y=Math.sqrt(r*r+a*a+s*s),t.scale.z=Math.sqrt(o*o+h*h+_*_),t.rotation.fromMatrix(this),t.position.copyFrom(this.getColumn(3)),t}},HX.Matrix4x4.IDENTITY=new HX.Matrix4x4,HX.Matrix4x4.ZERO=new HX.Matrix4x4(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),HX.PoissonDisk=function(t,e,i,n){this._mode=void 0===t?HX.PoissonDisk.CIRCULAR:t,this._initialDistance=e||1,this._decayFactor=i||.99,this._maxTests=n||2e4,this._currentDistance=0,this._points=null,this.reset()},HX.PoissonDisk.SQUARE=0,HX.PoissonDisk.CIRCULAR=1,HX.PoissonDisk.prototype={getPoints:function(){return this._points},reset:function(){this._currentDistance=this._initialDistance,this._points=[]},generatePoints:function(t){for(var e=0;t>e;++e)this.generatePoint()},generatePoint:function(){for(;;){for(var t=0,e=this._currentDistance*this._currentDistance;t++<this._maxTests;){var i=this._getCandidate();if(this._isValid(i,e))return this._points.push(i),i}this._currentDistance*=this._decayFactor}},_getCandidate:function(){for(;;){var t=2*Math.random()-1,e=2*Math.random()-1;if(this._mode==HX.PoissonDisk.SQUARE||1>=t*t+e*e)return new HX.Float2(t,e)}},_isValid:function(t,e){for(var i=this._points.length,n=0;i>n;++n){var r=this._points[n],a=t.x-r.x,s=t.y-r.y;if(e>a*a+s*s)return!1}return!0}},HX.PoissonSphere=function(t,e,i,n){this._mode=void 0===t?HX.PoissonSphere.CIRCULAR:t,this._initialDistance=e||1,this._decayFactor=i||.99,this._maxTests=n||2e4,this._currentDistance=0,this._points=null,this.reset()},HX.PoissonSphere.BOX=0,HX.PoissonSphere.CIRCULAR=1,HX.PoissonSphere.prototype={getPoints:function(){return this._points},reset:function(){this._currentDistance=this._initialDistance,this._points=[]},generatePoints:function(t){for(var e=0;t>e;++e)this.generatePoint()},generatePoint:function(){for(;;){for(var t=0,e=this._currentDistance*this._currentDistance;t++<this._maxTests;){var i=this._getCandidate();if(this._isValid(i,e))return this._points.push(i),i}this._currentDistance*=this._decayFactor}},_getCandidate:function(){for(;;){var t=2*Math.random()-1,e=2*Math.random()-1,i=2*Math.random()-1;if(this._mode==HX.PoissonSphere.BOX||1>=t*t+e*e+i*i)return new HX.Float4(t,e,i,0)}},_isValid:function(t,e){for(var i=this._points.length,n=0;i>n;++n){var r=this._points[n],a=t.x-r.x,s=t.y-r.y,o=t.z-r.z;if(e>a*a+s*s+o*o)return!1}return!0}},HX.Quaternion=function(){this.x=0,this.y=0,this.z=0,this.w=1},HX.Quaternion.fromAxisAngle=function(t,e){var i=new HX.Quaternion;return i.fromAxisAngle(t,e),i},HX.Quaternion.fromPitchYawRoll=function(t,e,i){var n=new HX.Quaternion;return n.fromPitchYawRoll(t,e,i),n},HX.Quaternion.prototype={fromAxisAngle:function(t,e){var i=Math.sin(.5*e)/t.length();this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(.5*e)},fromPitchYawRoll:function(t,e,i){var n=new HX.Matrix4x4;n.fromPitchYawRoll(t,e,i),this.fromMatrix(n)},fromMatrix:function(t){var e=t._m[0],i=t._m[5],n=t._m[10],r=e+i+n;if(r>0){r+=1;var a=1/Math.sqrt(r)*.5;this.x=a*(t._m[6]-t._m[9]),this.y=a*(t._m[8]-t._m[2]),this.z=a*(t._m[1]-t._m[4]),this.w=a*r}else if(e>i&&e>n){r=e-i-n+1;var a=1/Math.sqrt(r)*.5;this.x=a*r,this.y=a*(t._m[1]+t._m[4]),this.z=a*(t._m[8]+t._m[2]),this.w=a*(t._m[6]-t._m[9])}else if(i>n){r=i-e-n+1;var a=1/Math.sqrt(r)*.5;this.x=a*(t._m[1]+t._m[4]),this.y=a*r,this.z=a*(t._m[6]+t._m[9]),this.w=a*(t._m[8]-t._m[2])}else{r=n-e-i+1;var a=1/Math.sqrt(r)*.5;this.x=a*(t._m[8]+t._m[2]),this.y=a*(t._m[6]+t._m[9]),this.z=a*r,this.w=a*(t._m[1]-t._m[4])}},rotate:function(t){var e=t.x,i=t.y,n=t.z,r=-this.x*e-this.y*i-this.z*n,a=w*e+this.y*n-this.z*i,s=w*i-this.x*n+this.z*e,o=w*n+this.x*i-this.y*e;return new HX.Float4(-r*this.x+a*this.w-s*this.z+o*this.y,-r*this.y+a*this.z+s*this.w-o*this.x,-r*this.z-a*this.y+s*this.x+o*this.w,t.w)},lerp:function(t,e,i){var n=t.w,r=t.x,a=t.y,s=t.z,o=e.w,h=e.x,_=e.y,l=e.z;0>n*o+r*h+a*_+s*l&&(o=-o,h=-h,_=-_,l=-l),this.x=r+i*(h-r),this.y=a+i*(_-a),this.z=s+i*(l-s),this.w=n+i*(o-n),this.normalize()},slerp:function(t,e,i){var n=t.w,r=t.x,a=t.y,s=t.z,o=e.w,h=e.x,_=e.y,l=e.z,c=n*o+r*h+a*_+s*l;if(0>c&&(c=-c,o=-o,h=-h,_=-_,l=-l),.95>c){var u=Math.acos(c),m=i*u;this.x=h-r*c,this.y=_-a*c,this.z=l-s*c,this.w=o-n*c,this.normalize();var f=Math.cos(m),d=Math.sin(m);this.x=r*f+this.x*d,this.y=a*f+this.y*d,this.z=s*f+this.z*d,this.w=n*f+this.w*d}else this.x=r+i*(h-r),this.y=a+i*(_-a),this.z=s+i*(l-s),this.w=n+i*(o-n),this.normalize()},negate:function(){this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w},set:function(t,e,i,n){this.x=t,this.y=e,this.z=i,this.w=n},normSquared:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},norm:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var t=1/Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);this.x*=t,this.y*=t,this.z*=t,this.w*=t},conjugateOf:function(t){this.x=-t.x,this.y=-t.y,this.z=-t.z,this.w=t.w},inverseOf:function(t){var e=t.x,i=t.y,n=t.z,r=t.w,a=1/(e*e+i*i+n*n+r*r);this.x=-e*a,this.y=-i*a,this.z=-n*a,this.w=r*a},invert:function(t){var e=this.x,i=this.y,n=this.z,r=this.w,a=1/(e*e+i*i+n*n+r*r);this.x=-e*a,this.y=-i*a,this.z=-n*a,this.w=r*a},product:function(t,e){var i=t.w,n=t.x,r=t.y,a=t.z,s=e.w,o=e.x,h=e.y,_=e.z;this.x=i*o+n*s+r*_-a*h,this.y=i*h-n*_+r*s+a*o,this.z=i*_+n*h-r*o+a*s,this.w=i*s-n*o-r*h-a*_},append:function(t){this.product(t,this)},prepend:function(t){this.product(this,t)}},HX.Transform=function(){this._position=new HX.Float4(0,0,0,1),this._rotation=new HX.Quaternion,this._scale=new HX.Float4(1,1,1,1),this._matrix=new HX.Matrix4x4,this._changeListener=new HX.PropertyListener,this._changeListener.add(this._position,"x"),this._changeListener.add(this._position,"y"),this._changeListener.add(this._position,"z"),this._changeListener.add(this._rotation,"x"),this._changeListener.add(this._rotation,"y"),this._changeListener.add(this._rotation,"z"),this._changeListener.add(this._rotation,"w"),this._changeListener.add(this._scale,"x"),this._changeListener.add(this._scale,"y"),this._changeListener.add(this._scale,"z"),this._changeListener.onChange.bind(this,this._invalidateTransformationMatrix)},HX.Transform.prototype={get position(){return this._position},set position(t){this._position.copyFrom(t)},get rotation(){return this._rotation},set rotation(t){this._rotation.copyFrom(t)},get scale(){return this._scale},set scale(t){this._scale.copyFrom(t)},lookAt:function(t){this._matrix.lookAt(t,this._position,HX.Float4.Y_AXIS),this._applyMatrix()},copyFrom:function(t){this._changeListener.enabled=!1,this.position.copyFrom(t.position),this.rotation.copyFrom(t.rotation),this.scale.copyFrom(t.scale),this._changeListener.enabled=!0},getTransformationMatrix:function(){return this._matrixInvalid&&this._updateTransformationMatrix(),this._matrix},setTransformationMatrix:function(t){this._matrix.copyFrom(t),this._applyMatrix()},_invalidateTransformationMatrix:function(){this._matrixInvalid=!0},_updateTransformationMatrix:function(){this._matrix.compose(this),this._matrixInvalid=!1},_applyMatrix:function(){this._matrixInvalid=!1,this._changeListener.enabled=!1,this._matrix.decompose(this),this._changeListener.enabled=!0}},HX.shuffle=function(t){for(var e,i,n=t.length;0!==n;)i=Math.floor(Math.random()*n),n-=1,e=t[n],t[n]=t[i],t[i]=e;return t},HX.BoundingVolume=function(t){this._type=t,this._expanse=HX.BoundingVolume.EXPANSE_EMPTY,this._minimumX=0,this._minimumY=0,this._minimumZ=0,this._maximumX=0,this._maximumY=0,this._maximumZ=0,this._halfExtentX=0,this._halfExtentY=0,this._halfExtentZ=0,this._centerX=0,this._centerY=0,this._centerZ=0},HX.BoundingVolume.EXPANSE_EMPTY=0,HX.BoundingVolume.EXPANSE_INFINITE=1,HX.BoundingVolume.EXPANSE_FINITE=2,HX.BoundingVolume._testAABBToSphere=function(t,e){var i=e._maximumX,n=e._maximumY,r=e._maximumZ,a=t._minimumX,s=t._minimumY,o=t._minimumZ,h=e._halfExtentX,_=this._centerX,l=this._centerY,c=this._centerZ,u=0;if(a>_){var m=_-a;u+=m*m}else if(_>i){var m=_-i;u+=m*m}if(s>l){var m=l-s;u+=m*m}else if(l>n){var m=l-n;u+=m*m}if(o>c){var m=c-o;u+=m*m}else if(c>r){var m=c-r;u+=m*m}return h*h>u},HX.BoundingVolume.prototype={getExpanse:function(){return this._expanse},type:function(){return this._type},growToIncludeMesh:function(t){throw"Abstract method!"},growToIncludeBound:function(t){throw"Abstract method!"},growToIncludeMinMax:function(t,e){throw"Abstract method!"},clear:function(t){this._minimumX=this._minimumY=this._minimumZ=0,this._maximumX=this._maximumY=this._maximumZ=0,this._centerX=this._centerY=this._centerZ=0,this._halfExtentX=this._halfExtentY=this._halfExtentZ=0,this._expanse=void 0===t?HX.BoundingVolume.EXPANSE_EMPTY:t},getMinimum:function(){return new HX.Float4(this._minimumX,this._minimumY,this._minimumZ,1)},getMaximum:function(){return new HX.Float4(this._maximumX,this._maximumY,this._maximumZ,1)},getCenter:function(){return new HX.Float4(this._centerX,this._centerY,this._centerZ,1)},getHalfExtent:function(){return new HX.Float4(this._halfExtentX,this._halfExtentY,this._halfExtentZ,0)},getRadius:function(){throw"Abstract method!"},transformFrom:function(t,e){throw"Abstract method!"},intersectsConvexSolid:function(t,e){throw"Abstract method!"},intersectsBound:function(t){throw"Abstract method!"},classifyAgainstPlane:function(t){throw"Abstract method!"},createDebugModelInstance:function(){throw"Abstract method!"},getDebugModelInstance:function(){return void 0===this._type._debugModel&&(this._type._debugModel=this.createDebugModelInstance()),this._type._debugModel},getDebugMaterial:function(){if(void 0===HX.BoundingVolume._debugMaterial){var t=new DOMParser,e=t.parseFromString(HX.BoundingVolume._debugMaterialXML,"text/xml");HX.BoundingVolume._debugMaterial=HX.Material.parseFromXML(e)}return HX.BoundingVolume._debugMaterial}},HX.BoundingAABB=function(){HX.BoundingVolume.call(this,HX.BoundingAABB)},HX.BoundingAABB.prototype=Object.create(HX.BoundingVolume.prototype),HX.BoundingAABB.prototype.growToIncludeMesh=function(t){if(this._expanse!==HX.BoundingVolume.EXPANSE_INFINITE){var e,i,n,r,a,s,o=t.getVertexAttribute("hx_position"),h=o.offset,_=t.getVertexStride(),l=t._vertexData,c=l.length;for(this._expanse===HX.BoundingVolume.EXPANSE_EMPTY?(r=e=l[h],a=i=l[h+1],s=n=l[h+2],h+=_):(e=this._minimumX,i=this._minimumY,n=this._minimumZ,r=this._maximumX,a=this._maximumY,s=this._maximumZ);c>h;h+=_){var u=l[h],m=l[h+1],f=l[h+2];u>r?r=u:e>u&&(e=u),m>a?a=m:i>m&&(i=m),f>s?s=f:n>f&&(n=f)}this._minimumX=e,this._minimumY=i,this._minimumZ=n,this._maximumX=r,this._maximumY=a,this._maximumZ=s,this._expanse=HX.BoundingVolume.EXPANSE_FINITE,this._updateCenterAndExtent()}},HX.BoundingAABB.prototype.growToIncludeBound=function(t){t._expanse!==HX.BoundingVolume.EXPANSE_EMPTY&&this._expanse!==HX.BoundingVolume.EXPANSE_INFINITE&&(t._expanse===HX.BoundingVolume.EXPANSE_INFINITE?this._expanse=HX.BoundingVolume.EXPANSE_INFINITE:this._expanse==HX.BoundingVolume.EXPANSE_EMPTY?(this._minimumX=t._minimumX,this._minimumY=t._minimumY,this._minimumZ=t._minimumZ,this._maximumX=t._maximumX,this._maximumY=t._maximumY,this._maximumZ=t._maximumZ,this._expanse=HX.BoundingVolume.EXPANSE_FINITE):(t._minimumX<this._minimumX&&(this._minimumX=t._minimumX),t._minimumY<this._minimumY&&(this._minimumY=t._minimumY),t._minimumZ<this._minimumZ&&(this._minimumZ=t._minimumZ),t._maximumX>this._maximumX&&(this._maximumX=t._maximumX),t._maximumY>this._maximumY&&(this._maximumY=t._maximumY),t._maximumZ>this._maximumZ&&(this._maximumZ=t._maximumZ)),this._updateCenterAndExtent())},HX.BoundingAABB.prototype.growToIncludeMinMax=function(t,e){this._expanse!==HX.BoundingVolume.EXPANSE_INFINITE&&(this._expanse==HX.BoundingVolume.EXPANSE_EMPTY?(this._minimumX=t.x,this._minimumY=t.y,this._minimumZ=t.z,this._maximumX=e.x,this._maximumY=e.y,this._maximumZ=e.z,this._expanse=HX.BoundingVolume.EXPANSE_FINITE):(t.x<this._minimumX&&(this._minimumX=t.x),
t.y<this._minimumY&&(this._minimumY=t.y),t.z<this._minimumZ&&(this._minimumZ=t.z),e.x>this._maximumX&&(this._maximumX=e.x),e.y>this._maximumY&&(this._maximumY=e.y),e.z>this._maximumZ&&(this._maximumZ=e.z)),this._updateCenterAndExtent())},HX.BoundingAABB.prototype.transformFrom=function(t,e){if(t._expanse==HX.BoundingVolume.EXPANSE_INFINITE||t._expanse==HX.BoundingVolume.EXPANSE_EMPTY)this.clear(t._expanse);else{var i=e._m,n=i[0],r=i[1],a=i[2],s=i[4],o=i[5],h=i[6],_=i[8],l=i[9],c=i[10],u=t._centerX,m=t._centerY,f=t._centerZ;this._centerX=n*u+s*m+_*f+i[12],this._centerY=r*u+o*m+l*f+i[13],this._centerZ=a*u+h*m+c*f+i[14],0>n&&(n=-n),0>r&&(r=-r),0>a&&(a=-a),0>s&&(s=-s),0>o&&(o=-o),0>h&&(h=-h),0>_&&(_=-_),0>l&&(l=-l),0>c&&(c=-c),u=t._halfExtentX,m=t._halfExtentY,f=t._halfExtentZ,this._halfExtentX=n*u+s*m+_*f,this._halfExtentY=r*u+o*m+l*f,this._halfExtentZ=a*u+h*m+c*f,this._minimumX=this._centerX-this._halfExtentX,this._minimumY=this._centerY-this._halfExtentY,this._minimumZ=this._centerZ-this._halfExtentZ,this._maximumX=this._centerX+this._halfExtentX,this._maximumY=this._centerY+this._halfExtentY,this._maximumZ=this._centerZ+this._halfExtentZ,this._expanse=t._expanse}},HX.BoundingAABB.prototype.intersectsConvexSolid=function(t,e){if(this._expanse==HX.BoundingVolume.EXPANSE_INFINITE)return!0;if(this._expanse==HX.BoundingVolume.EXPANSE_EMPTY)return!1;for(var i=this._minimumX,n=this._minimumY,r=this._minimumZ,a=this._maximumX,s=this._maximumY,o=this._maximumZ,h=0;e>h;++h){var _=t[h],l=_.x,c=_.y,u=_.z,m=_.w,f=0>l?i:a,d=0>c?n:s,p=0>u?r:o,X=l*f+c*d+u*p+m;if(0>X)return!1}return!0},HX.BoundingAABB.prototype.intersectsBound=function(t){return this._expanse==HX.BoundingVolume.EXPANSE_EMPTY||t._expanse==HX.BoundingVolume.EXPANSE_EMPTY?!1:this._expanse==HX.BoundingVolume.EXPANSE_INFINITE||t._expanse==HX.BoundingVolume.EXPANSE_INFINITE?!0:t._type===this._type?this._maximumX>t._minimumX&&this._minimumX<t._maximumX&&this._maximumY>t._minimumY&&this._minimumY<t._maximumY&&this._maximumZ>t._minimumZ&&this._minimumZ<t._maximumZ:HX.BoundingVolume._testAABBToSphere(this,t)},HX.BoundingAABB.prototype.classifyAgainstPlane=function(t){var e=t.x,i=t.y,n=t.z,r=r,a=e*this._centerX+i*this._centerY+n*this._centerZ+r;0>e&&(e=-e),0>i&&(i=-i),0>n&&(n=-n);var s=e*this._halfExtentX+i*this._halfExtentY+n*this._halfExtentZ;return a>s?HX.PlaneSide.FRONT:-s>a?HX.PlaneSide.BACK:HX.PlaneSide.INTERSECTING},HX.BoundingAABB.prototype.setExplicit=function(t,e){this._minimumX=t.x,this._minimumY=t.y,this._minimumZ=t.z,this._maximumX=e.x,this._maximumY=e.y,this._maximumZ=e.z,this._expanse=HX.BoundingVolume.EXPANSE_FINITE,this._updateCenterAndExtent()},HX.BoundingAABB.prototype._updateCenterAndExtent=function(){var t=this._minimumX,e=this._minimumY,i=this._minimumZ,n=this._maximumX,r=this._maximumY,a=this._maximumZ;this._centerX=.5*(t+n),this._centerY=.5*(e+r),this._centerZ=.5*(i+a),this._halfExtentX=.5*(n-t),this._halfExtentY=.5*(r-e),this._halfExtentZ=.5*(a-i)},HX.BoundingAABB.prototype.getRadius=function(){return Math.sqrt(this._halfExtentX*this._halfExtentX+this._halfExtentY*this._halfExtentY+this._halfExtentZ*this._halfExtentZ)},HX.BoundingAABB.prototype.createDebugModelInstance=function(){return new HX.ModelInstance(HX.BoxPrimitive.create({doubleSided:!0}),[this.getDebugMaterial()])},HX.BoundingSphere=function(){HX.BoundingVolume.call(this,HX.BoundingSphere)},HX.BoundingSphere.prototype=Object.create(HX.BoundingVolume.prototype),HX.BoundingSphere.prototype.setExplicit=function(t,e){this._centerX=t.x,this._centerY=t.y,this._centerZ=t.z,this._halfExtentX=this._halfExtentY=this._halfExtentZ=e,this._expanse=HX.BoundingVolume.EXPANSE_FINITE,this._updateMinAndMax()},HX.BoundingSphere.prototype.growToIncludeMesh=function(t){if(this._expanse!==HX.BoundingVolume.EXPANSE_INFINITE){var e,i,n,r,a,s,o=t.getVertexAttribute("hx_position"),h=o.offset,_=t.getVertexStride(),l=o._vertexData,c=l.length();for(this._expanse===HX.BoundingVolume.EXPANSE_EMPTY?(r=e=l[h],a=i=l[h+1],s=n=l[h+2],h+=_):(e=this._minimumX,i=this._minimumY,n=this._minimumZ,r=this._maximumX,a=this._maximumY,s=this._maximumZ);c>h;h+=_){var u=l[h],m=l[h+1],f=l[h+2];u>r?r=u:e>u&&(e=u),m>a?a=m:i>m&&(i=m),f>s?s=f:n>f&&(n=f)}var d=.5*(r+e),p=.5*(a+i),X=.5*(s+n),H=0;for(h=o.offset;c>h;h+=_){var g=d-l[h],x=p-l[h+1],S=X-l[h+2],E=g*g+x*x+S*S;E>H&&(H=E)}this._centerX=d,this._centerY=p,this._centerZ=X;var v=Math.sqrt(H);this._halfExtentX=v,this._halfExtentY=v,this._halfExtentZ=v,this._expanse=HX.BoundingVolume.EXPANSE_FINITE,this._updateMinAndMax()}},HX.BoundingSphere.prototype.growToIncludeBound=function(t){if(t._expanse!==HX.BoundingVolume.EXPANSE_EMPTY&&this._expanse!==HX.BoundingVolume.EXPANSE_INFINITE){if(t._expanse===HX.BoundingVolume.EXPANSE_INFINITE)this._expanse=HX.BoundingVolume.EXPANSE_INFINITE;else if(expanse==HX.BoundingVolume.EXPANSE_EMPTY)this._centerX=t._centerX,this._centerY=t._centerY,this._centerZ=t._centerZ,t._type==this._type?(this._halfExtentX=t._halfExtentX,this._halfExtentY=t._halfExtentY,this._halfExtentZ=t._halfExtentZ):this._halfExtentX=this._halfExtentY=this._halfExtentZ=t.getRadius(),this._expanse=HX.BoundingVolume.EXPANSE_FINITE;else{var e=this._minimumX,i=this._minimumY,n=this._minimumZ,r=this._maximumX,a=this._maximumY,s=this._maximumZ;t._maximumX>r&&(r=t._maximumX),t._maximumY>a&&(a=t._maximumY),t._maximumZ>s&&(s=t._maximumZ),t._minimumX<e&&(e=t._minimumX),t._minimumY<i&&(i=t._minimumY),t._minimumZ<n&&(n=t._minimumZ),this._centerX=.5*(e+r),this._centerY=.5*(i+a),this._centerZ=.5*(n+s);var o=r-this._centerX,h=a-this._centerY,_=s-this._centerZ,l=Math.sqrt(o*o+h*h+_*_);this._halfExtentX=this._halfExtentY=this._halfExtentZ=l}this._updateMinAndMax()}},HX.BoundingSphere.prototype.growToIncludeMinMax=function(t,e){var i=new HX.BoundingAABB;i.growToIncludeMinMax(t,e),this.growToIncludeBound(i)},HX.BoundingSphere.prototype.getRadius=function(){return this._halfExtentX},HX.BoundingSphere.prototype.transformFrom=function(t,e){if(t._expanse==HX.BoundingVolume.EXPANSE_INFINITE||t._expanse==HX.BoundingVolume.EXPANSE_EMPTY)this.clear(t._expanse);else{var i=e._m,n=i[0],r=i[1],a=i[2],s=i[4],o=i[5],h=i[6],_=i[8],l=i[9],c=i[10],u=t._centerX,m=t._centerY,f=t._centerZ;this._centerX=n*u+s*m+_*f+i[12],this._centerY=r*u+o*m+l*f+i[13],this._centerZ=a*u+h*m+c*f+i[14],0>n&&(n=-n),0>r&&(r=-r),0>a&&(a=-a),0>s&&(s=-s),0>o&&(o=-o),0>h&&(h=-h),0>_&&(_=-_),0>l&&(l=-l),0>c&&(c=-c),u=t._halfExtentX,m=t._halfExtentY,f=t._halfExtentZ;var d=n*u+s*m+_*f,p=r*u+o*m+l*f,X=a*u+h*m+c*f,H=Math.sqrt(d*d+p*p+X*X);this._halfExtentX=this._halfExtentY=this._halfExtentZ=H,this._minimumX=this._centerX-this._halfExtentX,this._minimumY=this._centerY-this._halfExtentY,this._minimumZ=this._centerZ-this._halfExtentZ,this._maximumX=this._centerX+this._halfExtentX,this._maximumY=this._centerX+this._halfExtentY,this._maximumZ=this._centerX+this._halfExtentZ,this._expanse=HX.BoundingVolume.EXPANSE_FINITE}},HX.BoundingSphere.prototype.intersectsConvexSolid=function(t,e){if(this._expanse==HX.BoundingVolume.EXPANSE_INFINITE)return!0;if(this._expanse==HX.BoundingVolume.EXPANSE_EMPTY)return!1;for(var i=this._centerX,n=this._centerY,r=this._centerZ,a=-this._halfExtentX,s=0;e>s;++s){var o=t[s],h=o.x*i+o.y*n+o.z*r+o.w;if(a>h)return!1}return!0},HX.BoundingSphere.prototype.intersectsBound=function(t){if(this._expanse==HX.BoundingVolume.EXPANSE_EMPTY||t._expanse==HX.BoundingVolume.EXPANSE_EMPTY)return!1;if(this._expanse==HX.BoundingVolume.EXPANSE_INFINITE||t._expanse==HX.BoundingVolume.EXPANSE_INFINITE)return!0;if(t._type===this._type){var e=this._centerX-t._centerX,i=this._centerY-t._centerY,n=this._centerZ-t._centerZ,r=this._halfExtentX+t._halfExtentX;return r*r>e*e+i*i+n*n}return HX.BoundingVolume._testAABBToSphere(t,this)},HX.BoundingSphere.prototype.classifyAgainstPlane=function(t){var e=t.x*this._centerX+t.y*this._centerY+t.z*this._centerZ+t.w,i=this._halfExtentX;return e>i?HX.PlaneSide.FRONT:-i>e?HX.PlaneSide.BACK:HX.PlaneSide.INTERSECTING},HX.BoundingSphere.prototype._updateMinAndMax=function(){var t=this._centerX,e=this._centerY,i=this._centerZ,n=this._halfExtentX;this._minimumX=t-n,this._minimumY=e-n,this._minimumZ=i-n,this._maximumX=t+n,this._maximumY=e+n,this._maximumZ=i+n},HX.BoundingSphere.prototype.createDebugModelInstance=function(){return new HX.ModelInstance(HX.SpherePrimitive.create({doubleSided:!0}),[this.getDebugMaterial()])},HX.FixedAABB=function(){HX.BoundingAABB.call(this)},HX.FixedAABB.prototype=Object.create(HX.BoundingAABB.prototype),HX.BoundingVolume._debugMaterialXML='\r\n<?xml version="1.0" encoding="UTF-8"?>\n\r\n<material>\n\r\n    <shaders>\n\r\n        <shader id="vertexShader">\n\r\n            void main()\n\r\n            {\n\r\n                gl_Position = hx_wvpMatrix * hx_position;\n\r\n            }\n\r\n        </shader>\n\r\n        <shader id="fragmentShader">\n\r\n            uniform vec4 color;\n\r\n            \n\r\n            void main()\n\r\n            {\n\r\n                gl_FragColor = color;\n\r\n            }\n\r\n        </shader>\n\r\n    </shaders>\n\r\n    <passes>\n\r\n        <preEffect>\n\r\n            <element>lines</element>\n\r\n            <vertex>vertexShader</vertex>\n\r\n            <fragment>fragmentShader</fragment>\n\r\n        </preEffect>\n\r\n    </passes>\n\r\n    <uniforms>\n\r\n        <color value="1.0, 0.0, 1.0, 1.0"/>\n\r\n    </uniforms>\n\r\n</material>',HX.Color=function(t,e,i,n){this.set(t,e,i,n)},HX.Color.prototype={set:function(t,e,i,n){void 0===t?(this.a=1,this.r=1,this.g=1,this.b=1):void 0===e?(this.a=1,this.r=((16711680&t)>>>16)/255,this.g=((65280&t)>>>8)/255,this.b=(255&t)/255):(this.r=t,this.g=e,this.b=i,this.a=void 0===n?1:n)},hex:function(){var t=255*Math.min(this.r,1),e=255*Math.min(this.g,1),i=255*Math.min(this.b,1);return t<<16|e<<8|i},luminance:function(){return.3*this.r+.59*this.g+.11*this.b},gammaToLinear:function(t){return t=t||new HX.Color,t.r=Math.pow(this.r,2.2),t.g=Math.pow(this.g,2.2),t.b=Math.pow(this.b,2.2),t.a=this.a,t},linearToGamma:function(t){return t=t||new HX.Color,t.r=Math.pow(this.r,.454545),t.g=Math.pow(this.g,.454545),t.b=Math.pow(this.b,.454545),t.a=this.a,t}},HX.Color.BLACK=new HX.Color(0,0,0,1),HX.Color.RED=new HX.Color(1,0,0,1),HX.Color.GREEN=new HX.Color(0,1,0,1),HX.Color.BLUE=new HX.Color(0,0,1,1),HX.Color.YELLOW=new HX.Color(1,1,0,1),HX.Color.MAGENTA=new HX.Color(1,0,1,1),HX.Color.CYAN=new HX.Color(0,1,1,1),HX.Color.WHITE=new HX.Color(1,1,1,1),HX._numActiveAttributes=0,HX._numActiveTextures=0,HX._renderTargetStack=[null],HX._renderTargetInvalid=!0,HX._viewport={x:0,y:0,width:0,height:0},HX._viewportInvalid=!0,HX._cullMode=null,HX._cullModeInvalid=!1,HX._blendState=null,HX._blendStateInvalid=!1,HX.clear=function(t){void 0===t&&(t=HX.GL.COLOR_BUFFER_BIT|HX.GL.DEPTH_BUFFER_BIT|HX.GL.STENCIL_BUFFER_BIT),HX._updateRenderState(),HX.GL.clear(t)},HX.drawElements=function(t,e,i){HX._updateRenderState(),HX.GL.drawElements(t,e,HX.GL.UNSIGNED_SHORT,i)},HX.setViewport=function(t){HX._viewportInvalid=!0,t?(HX._viewport.x=t.x||0,HX._viewport.y=t.y||0,HX._viewport.width=t.width||0,HX._viewport.height=t.height||0):(HX._viewport.x=0,HX._viewport.y=0,HX._viewport.width=HX.TARGET_CANVAS.clientWidth,HX._viewport.height=HX.TARGET_CANVAS.clientHeight)},HX.getCurrentRenderTarget=function(){return HX._renderTargetStack[HX._renderTargetStack.length-1]},HX.pushRenderTarget=function(t){HX._renderTargetStack.push(t),HX._renderTargetInvalid=!0,HX.setViewport(t)},HX.popRenderTarget=function(){HX._renderTargetStack.pop(),HX._renderTargetInvalid=!0,HX.setViewport(HX._renderTargetStack[HX._renderTargetStack.length-1])},HX.enableAttributes=function(t){var e=HX._numActiveAttributes;if(t>e)for(var i=e;t>i;++i)HX.GL.enableVertexAttribArray(i);else if(e>t){t+=1;for(var i=t;e>i;++i)HX.GL.disableVertexAttribArray(i)}HX._numActiveAttributes=2},HX.setClearColor=function(t){t=isNaN(t)?t:new HX.Color(t),HX.GL.clearColor(t.r,t.g,t.b,t.a)},HX.setCullMode=function(t){HX._cullMode!==t&&(HX._cullMode=t,HX._cullModeInvalid=!0)},HX.setBlendState=function(t){HX._blendState!==t&&(HX._blendState=t,HX._blendStateInvalid=!0)},HX._updateRenderState=function(){if(this._renderTargetInvalid){var t=HX._renderTargetStack[HX._renderTargetStack.length-1];t?(HX.GL.bindFramebuffer(HX.GL.FRAMEBUFFER,t._fbo),t._numColorTextures>1&&HX.EXT_DRAW_BUFFERS.drawBuffersWEBGL(t._drawBuffers)):HX.GL.bindFramebuffer(HX.GL.FRAMEBUFFER,null),HX._renderTargetInvalid=!1}if(this._viewportInvalid&&(HX.GL.viewport(HX._viewport.x,HX._viewport.y,HX._viewport.width,HX._viewport.height),HX._viewportInvalid=!1),HX._cullModeInvalid&&(HX._cullMode===HX.CullMode.NONE?HX.GL.disable(HX.GL.CULL_FACE):(HX.GL.enable(HX.GL.CULL_FACE),HX.GL.cullFace(HX._cullMode))),HX._blendStateInvalid){var e=HX._blendState;if(null==e||e.enabled===!1)HX.GL.disable(HX.GL.BLEND);else{HX.GL.enable(HX.GL.BLEND),HX.GL.blendFunc(e.srcFactor,e.dstFactor),HX.GL.blendEquation(e.operator);var i=e.color;i&&HX.GL.blendColor(i.r,i.g,i.b,i.a)}HX._blendStateInvalid=!1}},HX.IndexBuffer=function(){this._buffer=HX.GL.createBuffer()},HX.IndexBuffer.prototype={constructor:HX.IndexBuffer,uploadData:function(t,e){void 0===e&&(e=HX.GL.STATIC_DRAW),this.bind(),HX.GL.bufferData(HX.GL.ELEMENT_ARRAY_BUFFER,t,e)},dispose:function(){this._buffer&&(HX.GL.deleteBuffer(this._buffer),this._buffer=0)},bind:function(){HX.GL.bindBuffer(HX.GL.ELEMENT_ARRAY_BUFFER,this._buffer)}},HX.PropertyListener=function(){this._enabled=!0,this.onChange=new HX.Signal,this._targets=[]},HX.PropertyListener.prototype={get enabled(){return this._enabled},set enabled(t){this._enabled=t},add:function(t,e){var i=this._targets.length;this._targets.push({object:t,propertyName:e,value:t[e]});var n=this,r=n._targets[i];Object.defineProperty(t,e,{get:function(){return r.value},set:function(t){t!==r.value&&(r.value=t,n._enabled&&n.onChange.dispatch())}})},remove:function(t,e){for(var i=0;i<this._targets.length;++i){var n=this._targets[i];n.object===t&&n.propertyName===e&&(delete n.object[n.propertyName],n.object[n.propertyName]=n.value,this._targets.splice(i--,1))}}},HX.Rect=function(t,e,i,n){this.x=t||0,this.y=e||0,this.width=i||0,this.height=n||0},HX.Signal=function(){this._listeners=[],this._lookUp={}},HX.Signal.prototype={bind:function(t,e){this._lookUp[e]=this._listeners.length,this._listeners.push(e.bind(t))},unbind:function(t){var e=this._lookUp[t];this._listeners.splice(e,1),delete this._lookUp[t]},dispatch:function(){for(var t=this._listeners.length,e=0;t>e;++e)this._listeners[e]()}},HX.URLLoader=function(){this._params=void 0,this._data=null,this._timeout=5e3,this._method="GET",this._type=HX.URLLoader.DATA_TEXT},HX.URLLoader.ERROR_TIME_OUT=408,HX.URLLoader.METHOD_GET="get",HX.URLLoader.METHOD_POST="post",HX.URLLoader.DATA_TEXT=0,HX.URLLoader.DATA_BINARY=1,HX.URLLoader.prototype={getType:function(){return this._type},setType:function(t){this._type=t},getData:function(){return this._data},getMethod:function(){return this._method},setMethod:function(t){this._method=t},getTimeoutDuration:function(){return this._timeout},setTimeoutDuration:function(t){this._timeout=t},setParameters:function(t){this._params=t},load:function(t){var e=new XMLHttpRequest;e.open(this._method,t,!0),e.timeout=this._timeout;var i=this;e.ontimeout=function(){i.onError(HX.URLLoader.ERROR_TIME_OUT)},e.onreadystatechange=function(){var t=this.DONE||4;this.readyState===t&&(200==this.status?(this._data=this._type==HX.URLLoader.DATA_TEXT?e.responseText:e.response,i.onComplete&&i.onComplete(this._data)):i.onError&&i.onError(this.status))},e.send(this._params)},onComplete:function(t){},onError:function(t){}},HX.VertexBuffer=function(){this._buffer=HX.GL.createBuffer()},HX.VertexBuffer.prototype={constructor:HX.VertexBuffer,uploadData:function(t,e){void 0===e&&(e=HX.GL.STATIC_DRAW),this.bind(),HX.GL.bufferData(HX.GL.ARRAY_BUFFER,t,e)},dispose:function(){this._buffer&&(HX.GL.deleteBuffer(this._buffer),this._buffer=0)},bind:function(){HX.GL.bindBuffer(HX.GL.ARRAY_BUFFER,this._buffer)}},HX.Shader=function(t,e){this._ready=!1,this._vertexShader=null,this._fragmentShader=null,this._program=null,this._uniformSetters=null,t&&e&&this.init(t,e)},HX.Shader.ID_COUNTER=0,HX.Shader.prototype={constructor:HX.Shader,isReady:function(){return this._ready},init:function(t,e){if(t=HX.GLSLIncludeGeneral+t,e=HX.GLSLIncludeGeneral+e,this._vertexShader=HX.GL.createShader(HX.GL.VERTEX_SHADER),!this._initShader(this._vertexShader,t)){if(this.dispose(),HX.OPTIONS.throwOnShaderError)throw new Error("Failed generating vertex shader: \n"+t);return void console.warn("Failed generating vertex shader")}if(this._fragmentShader=HX.GL.createShader(HX.GL.FRAGMENT_SHADER),!this._initShader(this._fragmentShader,e)){if(this.dispose(),HX.OPTIONS.throwOnShaderError)throw new Error("Failed generating fragment shader: \n"+e);return void console.warn("Failed generating fragment shader:")}if(this._program=HX.GL.createProgram(),HX.GL.attachShader(this._program,this._vertexShader),HX.GL.attachShader(this._program,this._fragmentShader),HX.GL.linkProgram(this._program),!HX.GL.getProgramParameter(this._program,HX.GL.LINK_STATUS)){var i=HX.GL.getProgramInfoLog(this._program);if(this.dispose(),console.log("**********"),console.log(t),console.log("**********"),console.log(e),HX.OPTIONS.throwOnShaderError)throw new Error("Error in program linking:"+i);return void console.warn("Error in program linking:"+i)}this._ready=!0,this._uniformSetters=HX.UniformSetter.getSetters(this)},updateRenderState:function(t,e){HX.GL.useProgram(this._program);for(var i=this._uniformSetters.length,n=0;i>n;++n)this._uniformSetters[n].execute(t,e)},_initShader:function(t,e){return HX.GL.shaderSource(t,e),HX.GL.compileShader(t),HX.GL.getShaderParameter(t,HX.GL.COMPILE_STATUS)?!0:(console.warn(HX.GL.getShaderInfoLog(t)),console.log(e),!1)},dispose:function(){HX.GL.deleteShader(this._vertexShader),HX.GL.deleteShader(this._fragmentShader),HX.GL.deleteProgram(this._program),this._ready=!1},getProgram:function(){return this._program},getVertexAttributeIndex:function(t){return HX.GL.getAttribLocation(this._program,t)}},HX.TextureSlot=function(){this.location=-1,this.texture=null,this.name=null},HX.TransparencyMode={OPAQUE:0,ALPHA:1,ADDITIVE:2,NUM_MODES:3},HX.MaterialPass=function(t){this._shader=t,this._textureSlots=[],this._uniforms={},this._elementType=HX.ElementType.TRIANGLES,this._cullMode=HX.CullMode.BACK,this._blendState=null,this._gbuffer=null,this._enabled=!0,this._storeUniforms(),this._textureSetters=HX.TextureSetter.getSetters(this)},HX.MaterialPass.GEOMETRY_PASS=0,HX.MaterialPass.POST_LIGHT_PASS=1,HX.MaterialPass.POST_PASS=2,HX.MaterialPass.NUM_PASS_TYPES=3,HX.MaterialPass.GEOMETRY_COLOR_PASS=HX.MaterialPass.GEOMETRY_PASS,HX.MaterialPass.GEOMETRY_NORMAL_PASS=HX.MaterialPass.NUM_PASS_TYPES,HX.MaterialPass.GEOMETRY_SPECULAR_PASS=HX.MaterialPass.NUM_PASS_TYPES+1,HX.MaterialPass.SHADOW_MAP_PASS=-1,HX.MaterialPass.prototype={constructor:HX.MaterialPass,getShader:function(){return this._shader},set elementType(t){this._elementType=t},get elementType(){return this._elementType},set cullMode(t){this._cullMode=t},get cullMode(){return this._cullMode},get blendState(){return this._blendState},set blendState(t){this._blendState=t},updateRenderState:function(t){for(var e=this._textureSetters.length,i=0;e>i;++i)this._textureSetters[i].execute(t);e=this._textureSlots.length;for(var i=0;e>i;++i){var n=this._textureSlots[i],r=n.texture;r.isReady()?r.bind(i):r._default.bind(i)}HX.setCullMode(this._cullMode),HX.setBlendState(this._blendState)},_storeUniforms:function(){for(var t=HX.GL.getProgramParameter(this._shader._program,HX.GL.ACTIVE_UNIFORMS),e=0;t>e;++e){var i=HX.GL.getActiveUniform(this._shader._program,e),n=i.name,r=HX.GL.getUniformLocation(this._shader._program,n);this._uniforms[n]={type:i.type,location:r,size:i.size}}},getTextureSlot:function(t){if(!this._uniforms.hasOwnProperty(t))return null;HX.GL.useProgram(this._shader._program);var e=this._uniforms[t];if(e){for(var i=e.location,n=null,r=this._textureSlots.length,a=0;r>a;++a)if(this._textureSlots[a].location===i){n=this._textureSlots[a];break}return null==n&&(n=new HX.TextureSlot,n.name=t,this._textureSlots.push(n),HX.GL.uniform1i(i,a),n.location=i),n}},setTexture:function(t,e){var i=this.getTextureSlot(t);i&&(i.texture=e)},getUniformLocation:function(t){return this._uniforms.hasOwnProperty(t)?this._uniforms[t].location:void 0},setUniformArray:function(t,e){if(t+="[0]",this._uniforms.hasOwnProperty(t)){var i=this._uniforms[t];switch(HX.GL.useProgram(this._shader._program),i.type){case HX.GL.FLOAT:HX.GL.uniform1fv(i.location,e);break;case HX.GL.FLOAT_VEC2:HX.GL.uniform2fv(i.location,e);break;case HX.GL.FLOAT_VEC3:HX.GL.uniform3fv(i.location,e);break;case HX.GL.FLOAT_VEC4:HX.GL.uniform4fv(i.location,e);break;case HX.GL.INT:HX.GL.uniform1iv(i.location,e);break;case HX.GL.INT_VEC2:HX.GL.uniform2iv(i.location,e);break;case HX.GL.INT_VEC3:HX.GL.uniform3iv(i.location,e);break;case HX.GL.INT_VEC4:HX.GL.uniform1iv(i.location,e);break;case HX.GL.BOOL:HX.GL.uniform1bv(i.location,e);break;case HX.GL.BOOL_VEC2:HX.GL.uniform2bv(i.location,e);break;case HX.GL.BOOL_VEC3:HX.GL.uniform3bv(i.location,e);break;case HX.GL.BOOL_VEC4:HX.GL.uniform4bv(i.location,e);break;default:throw"Unsupported uniform format for setting. May be a todo."}}},setUniform:function(t,e){if(this._uniforms.hasOwnProperty(t)){var i=this._uniforms[t];switch(HX.GL.useProgram(this._shader._program),i.type){case HX.GL.FLOAT:HX.GL.uniform1f(i.location,e);break;case HX.GL.FLOAT_VEC2:HX.GL.uniform2f(i.location,e.x,e.y);break;case HX.GL.FLOAT_VEC3:HX.GL.uniform3f(i.location,e.x||e.r,e.y||e.g,e.z||e.b);break;case HX.GL.FLOAT_VEC4:HX.GL.uniform4f(i.location,e.x||e.r,e.y||e.g,e.z||e.b,e.w||e.a);break;case HX.GL.INT:HX.GL.uniform1i(i.location,e);break;case HX.GL.INT_VEC2:HX.GL.uniform2i(i.location,e.x,e.y);break;case HX.GL.INT_VEC3:HX.GL.uniform3i(i.location,e.x,e.y,e.z);break;case HX.GL.INT_VEC4:HX.GL.uniform1i(i.location,e.x,e.y,e.z,e.w);break;case HX.GL.BOOL:HX.GL.uniform1i(i.location,e);break;case HX.GL.BOOL_VEC2:HX.GL.uniform2i(i.location,e.x,e.y);break;case HX.GL.BOOL_VEC3:HX.GL.uniform3i(i.location,e.x,e.y,e.z);break;case HX.GL.BOOL_VEC4:HX.GL.uniform4i(i.location,e.x,e.y,e.z,e.w);break;default:throw"Unsupported uniform format for setting. May be a todo."}}},isEnabled:function(){return this._enabled},setEnabled:function(t){this._enabled=t}},HX.Material=function(){this._transparencyMode=HX.TransparencyMode.OPAQUE,this._passes=new Array(HX.Material.NUM_PASS_TYPES),this._renderOrderHint=++HX.Material.ID_COUNTER,this._renderOrder=0,this.onChange=new HX.Signal,this._textures={},this._uniforms={},this._lightingModelID=1},HX.Material.parseFromXML=function(t){var e=new HX.Material;return HX.Material._parseXMLTo(t,e),e},HX.Material._parseXMLTo=function(t,e){HX.Material._parsePassFromXML(t,HX.MaterialPass.GEOMETRY_PASS,"geometry",e),HX.Material._parsePassFromXML(t,HX.MaterialPass.POST_LIGHT_PASS,"preEffect",e),HX.Material._parsePassFromXML(t,HX.MaterialPass.POST_PASS,"post",e),e.transparencyMode=HX.Material._translateTransparencyMode(t.documentElement.getAttribute("transparencyMode"));var i=t.getElementsByTagName("uniforms")[0];if(i)for(var n=i.firstChild;n;){if("#text"!=n.nodeName){var r=n.getAttribute("value").split(",");1==r.length?e.setUniform(n.nodeName,Number(r[0]),!1):e.setUniform(n.nodeName,{x:Number(r[0]),y:Number(r[1]),z:Number(r[2]),w:Number(r[3])},!1)}n=n.nextSibling}e.setTexture("hx_dither2D",HX.DEFAULT_2D_DITHER_TEXTURE)},HX.Material._translateTransparencyMode=function(t){switch(t){case"additive":return HX.TransparencyMode.ADDITIVE;case"alpha":return HX.TransparencyMode.ALPHA;default:return HX.TransparencyMode.OPAQUE}},HX.Material._translateProperty=function(t){return HX.Material._properties||(HX.Material._properties={back:HX.GL.BACK,front:HX.CullMode.FRONT,both:HX.CullMode.ALL,none:null,lines:HX.ElementType.LINES,points:HX.ElementType.POINTS,triangles:HX.ElementType.TRIANGLES,one:HX.BlendFactor.ONE,zero:HX.BlendFactor.ZERO,sourceColor:HX.BlendFactor.SOURCE_COLOR,oneMinusSourceColor:HX.BlendFactor.ONE_MINUS_SOURCE_COLOR,sourceAlpha:HX.BlendFactor.SOURCE_ALPHA,oneMinusSourceAlpha:HX.BlendFactor.ONE_MINUS_SOURCE_ALPHA,destinationAlpha:HX.BlendFactor.DST_ALPHA,oneMinusDestinationAlpha:HX.BlendFactor.ONE_MINUS_DESTINATION_ALPHA,destinationColor:HX.BlendFactor.DESTINATION_COLOR,sourceAlphaSaturate:HX.BlendFactor.SOURCE_ALPHA_SATURATE,add:HX.BlendOperation.ADD,subtract:HX.BlendOperation.SUBTRACT,reverseSubtract:HX.BlendOperation.REVERSE_SUBTRACT}),HX.Material._properties[t]},HX.Material._decodeHTML=function(t){var e=document.createElement("div");return e.innerHTML=t,0===e.childNodes.length?"":e.childNodes[0].nodeValue},HX.Material._addParsedPass=function(t,e,i,n,r,a,s,o){if(e=HX.GLSLIncludeGeometryPass+e,o){var h="#define "+o+"\n";t=h+t,e=h+e}var _=new HX.Shader(t,e),l=new HX.MaterialPass(_);if(i&&(l.elementType=HX.Material._translateProperty(i.innerHTML)),n&&(l.cullMode=HX.Material._translateProperty(n.innerHTML)),r){var c=new HX.BlendState,u=r.getElementsByTagName("source")[0],m=r.getElementsByTagName("destination")[0],f=r.getElementsByTagName("operator")[0];c.srcFactor=u?HX.Material._translateProperty(u.innerHTML):HX.BlendFactor.ONE,c.dstFactor=m?HX.Material._translateProperty(m.innerHTML):HX.BlendFactor.ZERO,c.operator=u?HX.Material._translateProperty(f.innerHTML):HX.BlendOperation.ADD,l.blendState=c}a.setPass(s,l)},HX.Material._parsePassFromXML=function(t,e,i,n){var r=t.getElementsByTagName("common")[0];r=r?r.innerHTML:"";var a=t.getElementsByTagName(i);if(void 0!==a&&0!==a.length){var s=a[0],o=s.getElementsByTagName("vertex")[0].innerHTML,h=s.getElementsByTagName("fragment")[0].innerHTML,_=s.getElementsByTagName("element")[0],l=s.getElementsByTagName("cullmode")[0],c=s.getElementsByTagName("blend")[0],u=r+t.querySelector("[id="+o+"]").innerHTML,m=r+t.querySelector("[id="+h+"]").innerHTML;u=HX.Material._decodeHTML(u),m=HX.Material._decodeHTML(m),e===HX.MaterialPass.GEOMETRY_PASS?(HX.EXT_DRAW_BUFFERS?this._addParsedPass(u,m,_,l,c,n,e):(this._addParsedPass(u,m,_,l,c,n,HX.MaterialPass.GEOMETRY_COLOR_PASS,"HX_NO_MRT_GBUFFER_COLOR"),this._addParsedPass(u,m,_,l,c,n,HX.MaterialPass.GEOMETRY_NORMAL_PASS,"HX_NO_MRT_GBUFFER_NORMALS"),this._addParsedPass(u,m,_,l,c,n,HX.MaterialPass.GEOMETRY_SPECULAR_PASS,"HX_NO_MRT_GBUFFER_SPECULAR")),-1!==HX.MaterialPass.SHADOW_MAP_PASS&&this._addParsedPass(u,m,_,l,c,n,HX.MaterialPass.SHADOW_MAP_PASS,"HX_SHADOW_MAP_PASS")):this._addParsedPass(u,m,_,l,c,n,e)}},HX.Material.ID_COUNTER=0,HX.Material.prototype={constructor:HX.Material,get transparencyMode(){return this._transparencyMode},set transparencyMode(t){this._transparencyMode=t},get renderOrder(){return this._renderOrder},set renderOrder(t){this._renderOrder=t},getPass:function(t){return this._passes[t]},setPass:function(t,e){if(this._passes[t]=e,e){for(var i in this._textures)this._textures.hasOwnProperty(i)&&e.setTexture(i,this._textures[i]);for(var n in this._uniforms)this._uniforms.hasOwnProperty(n)&&("]"==n.charAt(n.length-1)?e.setUniformArray(n.substr(0,n.length-3),this._uniforms[n]):e.setUniform(n,this._uniforms[n]))}this.onChange.dispatch()},hasPass:function(t){return!!this._passes[t]},setTexture:function(t,e){this._textures[t]=e;for(var i=0;i<HX.MaterialPass.NUM_PASS_TYPES;++i)this.hasPass(i)&&this._passes[i].setTexture(t,e)},setUniform:function(t,e,i){if(void 0===i&&(i=!0),i||!this._uniforms.hasOwnProperty(t)){this._uniforms[t]=e;for(var n=0;n<HX.MaterialPass.NUM_PASS_TYPES;++n)this._passes[n]&&this._passes[n].setUniform(t,e)}},setUniformArray:function(t,e,i){if(void 0===i&&(i=!0),i||!this._uniforms.hasOwnProperty(t+"[0]")){this._uniforms[t+"[0]"]=e;for(var n=0;n<HX.MaterialPass.NUM_PASS_TYPES;++n)this._passes[n]&&this._passes[n].setUniformArray(t,e)}}},HX.FileMaterial=function(t,e,i){HX.Material.call(this);var n=new HX.URLLoader,r=this;n.onComplete=function(t){var i=new DOMParser,n=i.parseFromString(t,"text/xml");HX.Material._parseXMLTo(n,r),e&&e()},n.onError=function(e){console.warn("Failed loading "+t+". Error code: "+e),i&&i(e)},n.load(t)},HX.FileMaterial.prototype=Object.create(HX.Material.prototype),HX.SceneNode=function(){HX.Transform.call(this),this._effects=null,this._worldTransformMatrix=new HX.Matrix4x4,this._worldBoundsInvalid=!0,this._matrixInvalid=!0,this._worldMatrixInvalid=!0,this._parent=null,this._worldBounds=this._createBoundingVolume(),this._debugBounds=null,this._renderOrderHint=0},HX.SceneNode.prototype=Object.create(HX.Transform.prototype),Object.defineProperties(HX.SceneNode.prototype,{effects:{get:function(){return this._effects},set:function(t){this._effects=t}},showDebugBounds:{get:function(){return null!==this._debugBounds},set:function(t){this.showDebugBounds!==t&&(t?(this._debugBounds=new HX.ModelNode(this._worldBounds.getDebugModelInstance()),this._debugBounds.setTransform(null),this._updateDebugBounds()):this._debugBounds=null)}}}),HX.SceneNode.prototype.setTransformationMatrix=function(t){HX.Transform.prototype.setTransformationMatrix.call(this,t),this._invalidateWorldTransformationMatrix()},HX.SceneNode.prototype.getWorldMatrix=function(){return this._worldMatrixInvalid&&this._updateWorldTransformationMatrix(),this._worldTransformMatrix},HX.SceneNode.prototype.getWorldBounds=function(){return this._worldBoundsInvalid&&(this._updateWorldBounds(),this._worldBoundsInvalid=!1),this._worldBounds},HX.SceneNode.prototype.acceptVisitor=function(t){this._effects&&t.visitEffects(this._effects,this),this._debugBounds&&this._debugBounds.acceptVisitor(t)},HX.SceneNode.prototype._invalidateTransformationMatrix=function(){HX.Transform.prototype._invalidateTransformationMatrix.call(this),this._invalidateWorldTransformationMatrix()},HX.SceneNode.prototype._invalidateWorldTransformationMatrix=function(){this._worldMatrixInvalid=!0,this._invalidateWorldBounds()},HX.SceneNode.prototype._invalidateWorldBounds=function(t){this._worldBoundsInvalid||(this._worldBoundsInvalid=!0,t!==!1&&this._parent&&this._parent._invalidateWorldBounds())},HX.SceneNode.prototype._updateWorldBounds=function(){this._debugBounds&&this._updateDebugBounds()},HX.SceneNode.prototype._updateDebugBounds=function(){var t=this._debugBounds.getTransformationMatrix(),e=this._worldBounds;t.scaleMatrix(2*e._halfExtentX,2*e._halfExtentY,2*e._halfExtentZ),t.appendTranslation(e._centerX,e._centerY,e._centerZ),this._debugBounds.setTransformationMatrix(t)},HX.SceneNode.prototype._updateTransformationMatrix=function(){HX.Transform.prototype._updateTransformationMatrix.call(this),this._invalidateWorldBounds()},HX.SceneNode.prototype._updateWorldTransformationMatrix=function(){this._parent?this._worldTransformMatrix.product(this._parent.getWorldMatrix(),this.getTransformationMatrix()):this._worldTransformMatrix.copyFrom(this.getTransformationMatrix()),this._worldMatrixInvalid=!1},HX.SceneNode.prototype._createBoundingVolume=function(){return new HX.BoundingAABB},HX.BoundingHierarchyNode=function(){HX.SceneNode.call(this),this._children=[]},HX.BoundingHierarchyNode.prototype=Object.create(HX.SceneNode.prototype),HX.BoundingHierarchyNode.prototype.attach=function(t){if(t._parent)throw"Child is already parented!";t._parent=this,this._children.push(t),this._invalidateWorldBounds()},HX.BoundingHierarchyNode.prototype.detach=function(t){var e=this._children.indexOf(t);if(0>e)throw"Trying to remove a scene object that is not a child";t._parent=null,this._children.splice(e,1),this._invalidateWorldBounds()},HX.BoundingHierarchyNode.prototype.numChildren=function(){return this._children.length},HX.BoundingHierarchyNode.prototype.getChild=function(t){return this._children[t]},HX.BoundingHierarchyNode.prototype.acceptVisitor=function(t){HX.SceneNode.prototype.acceptVisitor.call(this,t);for(var e=this._children.length,i=0;e>i;++i){var n=this._children[i];t.qualifies(n)&&n.acceptVisitor(t)}},HX.BoundingHierarchyNode.prototype._invalidateWorldTransformationMatrix=function(){HX.SceneNode.prototype._invalidateWorldTransformationMatrix.call(this);

for(var t=this._children.length,e=0;t>e;++e)this._children[e]._invalidateWorldTransformationMatrix()},HX.BoundingHierarchyNode.prototype._updateWorldBounds=function(){this._worldBounds.clear();for(var t=this._children.length,e=0;t>e;++e)this._worldBounds.growToIncludeBound(this._children[e].getWorldBounds());HX.SceneNode.prototype._updateWorldBounds.call(this)},HX.Scene=function(t){this._rootNode=t||new HX.BoundingHierarchyNode,this._skybox=null},HX.Scene.prototype={constructor:HX.Scene,get skybox(){return this._skybox},set skybox(t){this._skybox=t},get effects(){return this._rootNode._effects},set effects(t){this._rootNode._effects=t},attach:function(t){this._rootNode.attach(t)},detach:function(t){this._rootNode.detach(t)},numChildren:function(){return this._rootNode.numChildren()},getChild:function(t){return this._rootNode.getChild(t)},contains:function(t){this._rootNode.contains(t)},acceptVisitor:function(t){t.visitScene(this),this._rootNode.acceptVisitor(t)}},HX.ModelNode=function(t){HX.SceneNode.call(this),this.setModelInstance(t)},HX.ModelNode.prototype=Object.create(HX.SceneNode.prototype),HX.ModelNode.prototype.acceptVisitor=function(t){HX.SceneNode.prototype.acceptVisitor.call(this,t),t.visitModelInstance(this._modelInstance,this.getWorldMatrix(),this.getWorldBounds())},HX.ModelNode.prototype.getModelInstance=function(){return this._modelInstance},HX.ModelNode.prototype.setModelInstance=function(t){this._modelInstance&&this._modelInstance.onChange.unbind(this,HX.ModelNode.prototype._invalidateWorldBounds),this._modelInstance=t,this._modelInstance.onChange.bind(this,HX.ModelNode.prototype._invalidateWorldBounds),this._invalidateWorldBounds()},HX.ModelNode.prototype._updateWorldBounds=function(){this._modelInstance&&this._worldBounds.transformFrom(this._modelInstance.getLocalBounds(),this.getWorldMatrix()),HX.SceneNode.prototype._updateWorldBounds.call(this)},HX.Light=function(){HX.SceneNode.call(this),this._type=this.getTypeID(),this._intensity=3.1415,this._luminanceBound=1/255,this._color=new HX.Color(1,1,1),this._scaledIrradiance=new HX.Color,this._castShadows=!1,this._updateScaledIrradiance()},HX.Light.prototype=Object.create(HX.SceneNode.prototype),HX.Light.prototype.getTypeID=function(){throw"Light is not registered! Be sure to pass the light type into the customLights array upon Helix initialization."},HX.Light.prototype.acceptVisitor=function(t){HX.SceneNode.prototype.acceptVisitor.call(this,t),t.visitLight(this)},Object.defineProperties(HX.Light.prototype,{intensity:{get:function(){return this._intensity},set:function(t){this._intensity=t,this._updateScaledIrradiance()}},color:{get:function(){return this._color},set:function(t){this._color=isNaN(t)?t:new HX.Color(t),this._updateScaledIrradiance()}}}),HX.Light.prototype.renderBatch=function(t,e,i){throw"Abstract method!"},HX.Light.prototype.getLuminanceBound=function(){return this._luminanceBound},HX.Light.prototype.setLuminanceBound=function(t){this._luminanceBound=t,this._invalidateWorldBounds()},HX.Light.prototype.luminance=function(){return this._color.luminance()*this._intensity},HX.Light.prototype._updateScaledIrradiance=function(){var t=this._intensity/Math.PI;HX.OPTIONS.useLinearSpace?this._color.gammaToLinear(this._scaledIrradiance):(this._scaledIrradiance.r=this._color.r,this._scaledIrradiance.g=this._color.g,this._scaledIrradiance.b=this._color.b),this._scaledIrradiance.r*=t,this._scaledIrradiance.g*=t,this._scaledIrradiance.b*=t,this._invalidateWorldBounds()},HX.RenderItem=function(){this.worldMatrix=null,this.meshInstance=null,this.material=null,this.pass=null,this.camera=null,this.renderOrderHint=0},HX.SceneVisitor=function(){},HX.SceneVisitor.prototype={collect:function(t,e){},qualifies:function(t){},visitLight:function(t){},visitModelInstance:function(t,e){},visitScene:function(t){},visitEffects:function(t,e){}},HX.EffectPass=function(t,e){t=t||HX.ShaderLibrary.get("default_post_vertex.glsl");var i=new HX.Shader(t,e);HX.MaterialPass.call(this,i),this._uniformSetters=HX.UniformSetter.getSetters(this._shader),this._gbuffer=null,this._vertexLayout=null,this._cullMode=HX.CullMode.NONE,this.setMesh(HX.DEFAULT_RECT_MESH),this.setTexture("hx_dither2D",HX.DEFAULT_2D_DITHER_TEXTURE)},HX.EffectPass.prototype=Object.create(HX.MaterialPass.prototype),HX.EffectPass.prototype.setMesh=function(t){this._mesh!==t&&(this._mesh=t,this._vertexLayout=new HX.VertexLayout(this._mesh,this))},HX.EffectPass.prototype.updateRenderState=function(t){this._shader.updateRenderState(null,t._camera),HX.MaterialPass.prototype.updateRenderState.call(this,t),this._mesh._vertexBuffer.bind(),this._mesh._indexBuffer.bind();for(var e=this._vertexLayout,i=e.attributes,n=i.length,r=0;n>r;++r){var a=i[r];HX.GL.vertexAttribPointer(a.index,a.numComponents,HX.GL.FLOAT,!1,a.stride,a.offset)}HX.enableAttributes(e._numAttributes)},HX.Effect=function(){this._isSupported=!0,this._mesh=null,this._outputsGamma=!1},HX.Effect.prototype={isSupported:function(){return this._isSupported},render:function(t,e){this._renderer=t,this.draw(e)},draw:function(t){throw"Abstract method error!"},_drawPass:function(t){t.updateRenderState(this._renderer),HX.drawElements(HX.GL.TRIANGLES,6,0)},_swapHDRBuffers:function(){this._renderer._swapHDRFrontAndBack()}},HX.GLSLIncludeGeneral="precision highp float;\n\n"+HX.ShaderLibrary.get("snippets_general.glsl")+"\n\n",HX.GLSLIncludeGeometryPass="\n"+HX.ShaderLibrary.get("snippets_geometry_pass.glsl")+"\n",HX.TextureSetter={},HX.TextureSetter.getSetters=function(t){return void 0===HX.TextureSetter._table&&HX.TextureSetter._init(),HX.TextureSetter._findSetters(t)},HX.TextureSetter._findSetters=function(t){var e=[];for(var i in HX.TextureSetter._table){var n=t.getTextureSlot(i);if(null!=n){var r=new HX.TextureSetter._table[i];e.push(r),r.slot=n}}return e},HX.TextureSetter._init=function(){HX.TextureSetter._table={},HX.TextureSetter._table.hx_gbufferColor=HX.GBufferColorSetter,HX.TextureSetter._table.hx_gbufferNormals=HX.GBufferNormalsSetter,HX.TextureSetter._table.hx_gbufferSpecular=HX.GBufferSpecularSetter,HX.TextureSetter._table.hx_gbufferDepth=HX.GBufferDepthSetter,HX.TextureSetter._table.hx_backbuffer=HX.BackbufferSetter,HX.TextureSetter._table.hx_frontbuffer=HX.FrontbufferSetter,HX.TextureSetter._table.hx_ambientOcclusion=HX.AmbientOcclusionSetter,HX.TextureSetter._table.hx_localReflections=HX.LocalReflectionsSetter},HX.GBufferColorSetter=function(){},HX.GBufferColorSetter.prototype.execute=function(t){this.slot.texture=t._gbuffer[0]},HX.GBufferNormalsSetter=function(){},HX.GBufferNormalsSetter.prototype.execute=function(t){this.slot.texture=t._gbuffer[1]},HX.GBufferSpecularSetter=function(){},HX.GBufferSpecularSetter.prototype.execute=function(t){this.slot.texture=t._gbuffer[2]},HX.GBufferDepthSetter=function(){},HX.GBufferDepthSetter.prototype.execute=function(t){this.slot.texture=t._gbuffer[3]},HX.FrontbufferSetter=function(){},HX.FrontbufferSetter.prototype.execute=function(t){this.slot.texture=t._hdrFront.texture},HX.BackbufferSetter=function(){},HX.BackbufferSetter.prototype.execute=function(t){this.slot.texture=t._hdrBack.texture},HX.AmbientOcclusionSetter=function(){},HX.AmbientOcclusionSetter.prototype.execute=function(t){this.slot.texture=t._aoTexture},HX.LocalReflectionsSetter=function(){},HX.LocalReflectionsSetter.prototype.execute=function(t){this.slot.texture=t._ssrTexture},HX.UniformSetter={},HX.UniformSetter.getSetters=function(t){return void 0===HX.UniformSetter._table&&HX.UniformSetter._init(),HX.UniformSetter._findSetters(t)},HX.UniformSetter._findSetters=function(t){var e=[];for(var i in HX.UniformSetter._table){var n=HX.GL.getUniformLocation(t._program,i);if(null!=n){var r=new HX.UniformSetter._table[i];e.push(r),r.location=n}}return e},HX.UniformSetter._init=function(){HX.UniformSetter._table={},HX.UniformSetter._table.hx_worldMatrix=HX.WorldMatrixSetter,HX.UniformSetter._table.hx_worldViewMatrix=HX.WorldViewMatrixSetter,HX.UniformSetter._table.hx_wvpMatrix=HX.WorldViewProjectionSetter,HX.UniformSetter._table.hx_viewMatrix=HX.ViewMatrixSetter,HX.UniformSetter._table.hx_projectionMatrix=HX.ProjectionSetter,HX.UniformSetter._table.hx_inverseProjectionMatrix=HX.InverseProjectionSetter,HX.UniformSetter._table.hx_inverseWVPMatrix=HX.InverseWVPSetter,HX.UniformSetter._table.hx_viewProjectionMatrix=HX.ViewProjectionSetter,HX.UniformSetter._table.hx_inverseViewProjectionMatrix=HX.InverseViewProjectionSetter,HX.UniformSetter._table.hx_normalWorldMatrix=HX.NormalWorldMatrixSetter,HX.UniformSetter._table.hx_normalWorldViewMatrix=HX.NormalWorldViewMatrixSetter,HX.UniformSetter._table.hx_cameraWorldPosition=HX.CameraWorldPosSetter,HX.UniformSetter._table.hx_cameraWorldMatrix=HX.CameraWorldMatrixSetter,HX.UniformSetter._table.hx_cameraFrustumRange=HX.CameraFrustumRangeSetter,HX.UniformSetter._table.hx_rcpCameraFrustumRange=HX.RCPCameraFrustumRangeSetter,HX.UniformSetter._table.hx_cameraNearPlaneDistance=HX.CameraNearPlaneDistanceSetter,HX.UniformSetter._table.hx_cameraFarPlaneDistance=HX.CameraFarPlaneDistanceSetter,HX.UniformSetter._table.hx_renderTargetResolution=HX.RenderTargetResolutionSetter,HX.UniformSetter._table.hx_rcpRenderTargetResolution=HX.RCPRenderTargetResolutionSetter,HX.UniformSetter._table.hx_dither2DTextureScale=HX.Dither2DTextureScaleSetter,HX.UniformSetter._table["hx_poissonDisk[0]"]=HX.PoissonDiskSetter},HX.WorldMatrixSetter=function(){},HX.WorldMatrixSetter.prototype.execute=function(t,e){HX.GL.uniformMatrix4fv(this.location,!1,t._m)},HX.ViewProjectionSetter=function(){},HX.ViewProjectionSetter.prototype.execute=function(t,e){var i=e.getViewProjectionMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.InverseViewProjectionSetter=function(){},HX.InverseViewProjectionSetter.prototype.execute=function(t,e){var i=e.getInverseViewProjectionMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.InverseWVPSetter=function(){},HX.InverseWVPSetter.prototype.execute=function(t,e){var i=e.getInverseViewProjectionMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.ProjectionSetter=function(){},HX.ProjectionSetter.prototype.execute=function(t,e){var i=e.getProjectionMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.InverseProjectionSetter=function(){},HX.InverseProjectionSetter.prototype.execute=function(t,e){var i=e.getInverseProjectionMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.WorldViewProjectionSetter=function(){this._matrix=new HX.Matrix4x4},HX.WorldViewProjectionSetter.prototype.execute=function(t,e){this._matrix.product(e.getViewProjectionMatrix(),t),HX.GL.uniformMatrix4fv(this.location,!1,this._matrix._m)},HX.WorldViewMatrixSetter=function(){this._matrix=new HX.Matrix4x4},HX.WorldViewMatrixSetter.prototype.execute=function(t,e){this._matrix.product(e.getViewMatrix(),t),HX.GL.uniformMatrix4fv(this.location,!1,this._matrix._m)},HX.NormalWorldMatrixSetter=function(){this._data=new Float32Array(9)},HX.NormalWorldMatrixSetter.prototype.execute=function(t,e){t.writeNormalMatrix(this._data),HX.GL.uniformMatrix3fv(this.location,!1,this._data)},HX.NormalWorldViewMatrixSetter=function(){this._matrix=new HX.Matrix4x4,this._data=new Float32Array(9)},HX.NormalWorldViewMatrixSetter.prototype.execute=function(t,e){this._matrix.product(e.getViewMatrix(),t),this._matrix.writeNormalMatrix(this._data),HX.GL.uniformMatrix3fv(this.location,!1,this._data)},HX.CameraWorldPosSetter=function(){},HX.CameraWorldPosSetter.prototype.execute=function(t,e){var i=e.getWorldMatrix()._m;HX.GL.uniform3f(this.location,i[12],i[13],i[14])},HX.CameraWorldMatrixSetter=function(){},HX.CameraWorldMatrixSetter.prototype.execute=function(t,e){var i=e.getWorldMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.CameraFrustumRangeSetter=function(){},HX.CameraFrustumRangeSetter.prototype.execute=function(t,e){HX.GL.uniform1f(this.location,e._farDistance-e._nearDistance)},HX.RCPCameraFrustumRangeSetter=function(){},HX.RCPCameraFrustumRangeSetter.prototype.execute=function(t,e){HX.GL.uniform1f(this.location,1/(e._farDistance-e._nearDistance))},HX.CameraNearPlaneDistanceSetter=function(){},HX.CameraNearPlaneDistanceSetter.prototype.execute=function(t,e){HX.GL.uniform1f(this.location,e._nearDistance)},HX.CameraFarPlaneDistanceSetter=function(){},HX.CameraFarPlaneDistanceSetter.prototype.execute=function(t,e){HX.GL.uniform1f(this.location,e._farDistance)},HX.ViewMatrixSetter=function(){},HX.ViewMatrixSetter.prototype.execute=function(t,e){var i=e.getViewMatrix();HX.GL.uniformMatrix4fv(this.location,!1,i._m)},HX.RenderTargetResolutionSetter=function(){},HX.RenderTargetResolutionSetter.prototype.execute=function(t,e){HX.GL.uniform2f(this.location,e._renderTargetWidth,e._renderTargetHeight)},HX.RCPRenderTargetResolutionSetter=function(){},HX.RCPRenderTargetResolutionSetter.prototype.execute=function(t,e){HX.GL.uniform2f(this.location,1/e._renderTargetWidth,1/e._renderTargetHeight)},HX.Dither2DTextureScaleSetter=function(){},HX.Dither2DTextureScaleSetter.prototype.execute=function(t,e){HX.GL.uniform2f(this.location,e._renderTargetWidth/HX.DEFAULT_2D_DITHER_TEXTURE.width,e._renderTargetHeight/HX.DEFAULT_2D_DITHER_TEXTURE.height)},HX.PoissonDiskSetter=function(){},HX.PoissonDiskSetter.prototype.execute=function(t,e){HX.GL.uniform2fv(this.location,HX.DEFAULT_POISSON_DISK)},HX.PBRMaterial=function(){HX.Material.call(this),this._passesInvalid=!0,this._color=new HX.Color(1,1,1,1),this._colorMap=null,this._normalMap=null,this._specularMap=null,this._specularMapMode=HX.SPECULAR_MAP_ROUGHNESS_ONLY,this._metallicness=0,this._roughness=.3,this._specularNormalReflection=.027,this._refractiveRatio=.9,this._transparent=!1,this._refract=!1,this.metallicness=this._metallicness,this.roughness=this._roughness,this.specularNormalReflection=this._specularNormalReflection,this.refractiveRatio=this._refractiveRatio},HX.PBRMaterial.SPECULAR_MAP_ROUGHNESS_ONLY=1,HX.PBRMaterial.SPECULAR_MAP_ALL=2,HX.PBRMaterial.SPECULAR_MAP_SHARE_NORMAL_MAP=3,HX.PBRMaterial.prototype=Object.create(HX.Material.prototype),HX.PBRMaterial.prototype.getPass=function(t){return this._passesInvalid&&this._updatePasses(),HX.Material.prototype.getPass.call(this,t)},HX.PBRMaterial.prototype._clearPasses=function(){for(var t=0;t<HX.MaterialPass.NUM_PASS_TYPES;++t)this.setPass(t,null)},HX.PBRMaterial.prototype._updatePasses=function(){this._clearPasses();var t=this._generateColorDefines(),e=this._generateNormalDefines(),i=this._generateSpecularDefines();if(this._transparent)if(this._refract){var n=e+t;this._initPass(HX.MaterialPass.POST_PASS,n,"default_refract_vertex.glsl","default_refract_fragment.glsl")}else{var n="#define HX_NO_MRT_GBUFFER_COLOR\n"+e+t,r=this._initPass(HX.MaterialPass.POST_LIGHT_PASS,n,"default_geometry_mrt_vertex.glsl","default_geometry_mrt_fragment.glsl");r.setBlendMode(HX.BlendFactor.ZERO,HX.BlendFactor.SOURCE_COLOR,HX.BlendOperation.ADD)}var a;if(HX.EXT_DRAW_BUFFERS){var n=t+e+i;a=this._initPass(HX.MaterialPass.GEOMETRY_PASS,n,"default_geometry_mrt_vertex.glsl","default_geometry_mrt_fragment.glsl")}else t="#define HX_NO_MRT_GBUFFER_COLOR\n"+t,e="#define HX_NO_MRT_GBUFFER_NORMALS\n"+e,i="#define HX_NO_MRT_GBUFFER_SPECULAR\n"+i,a=this._initPass(HX.MaterialPass.GEOMETRY_COLOR_PASS,t,"default_geometry_mrt_vertex.glsl","default_geometry_mrt_fragment.glsl"),this._initPass(HX.MaterialPass.GEOMETRY_NORMAL_PASS,e,"default_geometry_mrt_vertex.glsl","default_geometry_mrt_fragment.glsl"),this._initPass(HX.MaterialPass.GEOMETRY_SPECULAR_PASS,i,"default_geometry_mrt_vertex.glsl","default_geometry_mrt_fragment.glsl");if(-1!==HX.MaterialPass.SHADOW_MAP_PASS){var n="#define HX_SHADOW_MAP_PASS\n";this._initPass(HX.MaterialPass.SHADOW_MAP_PASS,n,"default_geometry_mrt_vertex.glsl","default_geometry_mrt_fragment.glsl")}this.setUniform("color",this._color),this._colorMap&&this.setTexture("colorMap",this._colorMap),this._normalMap&&this.setTexture("normalMap",this._normalMap),this._specularMap&&this.setTexture("specularMap",this._specularMap),this._transparent&&(a.setUniform("color",new HX.Color(0,0,0,1)),a.setTexture("colorMap",null)),this._passesInvalid=!1},HX.PBRMaterial.prototype._generateColorDefines=function(){return this._colorMap?"#define COLOR_MAP\n":""},HX.PBRMaterial.prototype._generateNormalDefines=function(){return this._normalMap?"#define NORMAL_MAP\n":""},HX.PBRMaterial.prototype._generateSpecularDefines=function(){switch(this._specularMapMode){case HX.PBRMaterial.SPECULAR_MAP_ROUGHNESS_ONLY:return this._specularMap?"#define ROUGHNESS_MAP\n":"";case HX.PBRMaterial.SPECULAR_MAP_ALL:return this._specularMap?"#define SPECULAR_MAP\n":"";default:return"#define NORMAL_ROUGHNESS_MAP\n"}},HX.PBRMaterial.prototype._initPass=function(t,e,i,n){var r=e+HX.ShaderLibrary.get(i),a=e+HX.GLSLIncludeGeometryPass+HX.ShaderLibrary.get(n),s=new HX.Shader(r,a),o=new HX.MaterialPass(s);return this.setPass(t,o),o},Object.defineProperty(HX.PBRMaterial.prototype,"color",{get:function(){return this._color},set:function(t){this._color=isNaN(t)?t:new HX.Color(t),this.setUniform("color",this._color)}}),Object.defineProperty(HX.PBRMaterial.prototype,"colorMap",{get:function(){return this._colorMap},set:function(t){!!this._colorMap!=!!t&&(this._passesInvalid=!0),!this._passesInvalid&&t&&this.setTexture("colorMap",t),this._colorMap=t}}),Object.defineProperty(HX.PBRMaterial.prototype,"normalMap",{get:function(){return this._normalMap},set:function(t){!!this._normalMap!=!!t&&(this._passesInvalid=!0),!this._passesInvalid&&t&&this.setTexture("normalMap",t),this._normalMap=t}}),Object.defineProperty(HX.PBRMaterial.prototype,"specularMap",{get:function(){return this._specularMap},set:function(t){!!this._normalMap!=!!t&&(this._passesInvalid=!0),!this._passesInvalid&&t&&this.setTexture("specularMap",t),this._specularMap=t}}),Object.defineProperty(HX.PBRMaterial.prototype,"specularMapMode",{get:function(){return this._specularMapMode},set:function(t){this._specularMapMode!=t&&(this._passesInvalid=!0),this._specularMapMode=t}}),Object.defineProperty(HX.PBRMaterial.prototype,"metallicness",{get:function(){return this._metallicness},set:function(t){this._metallicness=HX.saturate(t),this.setUniform("metallicness",this._metallicness)}}),Object.defineProperty(HX.PBRMaterial.prototype,"specularNormalReflection",{get:function(){return this._specularNormalReflection},set:function(t){this._specularNormalReflection=HX.saturate(t),this.setUniform("specularNormalReflection",this._specularNormalReflection)}}),Object.defineProperty(HX.PBRMaterial.prototype,"roughness",{get:function(){return this._roughness},set:function(t){this._roughness=HX.saturate(t),this.setUniform("roughness",this._roughness)}}),Object.defineProperty(HX.PBRMaterial.prototype,"transparent",{get:function(){return this._transparent},set:function(t){this._transparent!==t&&(this._passesInvalid=!0),this._transparent=t,this._transparencyMode=t?HX.TransparencyMode.ADDITIVE:HX.TransparencyMode.OPAQUE}}),Object.defineProperty(HX.PBRMaterial.prototype,"refract",{get:function(){return this._refract},set:function(t){!!this._refract!=!!t&&(this._passesInvalid=!0),this._refract=HX.saturate(t)}}),Object.defineProperty(HX.PBRMaterial.prototype,"refractiveRatio",{get:function(){return this._refractiveRatio},set:function(t){this._refractiveRatio=t,this.setUniform("refractiveRatio",t)}}),HX.SkyboxMaterial=function(t){HX.Material.call(this);var e=HX.ShaderLibrary.get("default_skybox_vertex.glsl"),i=HX.ShaderLibrary.get("default_skybox_fragment.glsl"),n=new HX.Shader(e,i),r=new HX.MaterialPass(n);r.cullMode=HX.CullMode.NONE,this.setPass(HX.MaterialPass.POST_LIGHT_PASS,r),this.setTexture("hx_skybox",t),this._lightingModelID=0},HX.SkyboxMaterial.prototype=Object.create(HX.Material.prototype),HX.AmbientLight=function(){HX.Light.call(this),this._colorLocation=null,this._lightPass=null,this._useAO=!1,this.color=new HX.Color(.1,.1,.1)},HX.AmbientLight.prototype=Object.create(HX.Light.prototype),HX.AmbientLight.prototype.renderBatch=function(t,e,i){var n=null!=i._aoEffect;this._lightPass&&this._useAO==n||(this._useAO=n,this._initLightPass()),HX.GL.disable(HX.GL.DEPTH_TEST),this._lightPass.updateRenderState(i);for(var r=0,a=0,s=0,o=t.length,h=e;o>h;++h){var _=t[h],l=_._scaledIrradiance;if(_._type!=this._type)break;r+=l.r,a+=l.g,s+=l.b}return HX.GL.uniform3f(this._colorLocation,r,a,s),HX.drawElements(HX.GL.TRIANGLES,6,0),h},HX.AmbientLight.prototype._updateWorldBounds=function(){this._worldBounds.clear(HX.BoundingVolume.EXPANSE_INFINITE),HX.Light.prototype._updateWorldBounds.call(this)},HX.AmbientLight.prototype._initLightPass=function(){var t={};this._useAO&&(t.USE_AO=1);var e=new HX.EffectPass(HX.ShaderLibrary.get("ambient_light_vertex.glsl"),HX.ShaderLibrary.get("ambient_light_fragment.glsl",t));e.blendState=HX.BlendState.ADD,this._colorLocation=e.getUniformLocation("lightColor"),this._lightPass=e},HX.Frustum=function(){this._planes=new Array(6),this._corners=new Array(8);for(var t=0;6>t;++t)this._planes[t]=new HX.Float4;for(var t=0;8>t;++t)this._corners[t]=new HX.Float4},HX.Frustum.PLANE_LEFT=0,HX.Frustum.PLANE_RIGHT=1,HX.Frustum.PLANE_BOTTOM=2,HX.Frustum.PLANE_TOP=3,HX.Frustum.PLANE_NEAR=4,HX.Frustum.PLANE_FAR=5,HX.Frustum.CLIP_SPACE_CORNERS=[new HX.Float4(-1,-1,-1,1),new HX.Float4(1,-1,-1,1),new HX.Float4(1,1,-1,1),new HX.Float4(-1,1,-1,1),new HX.Float4(-1,-1,1,1),new HX.Float4(1,-1,1,1),new HX.Float4(1,1,1,1),new HX.Float4(-1,1,1,1)],HX.Frustum.prototype={getPlanes:function(){return this._planes},getCorners:function(){return this._corners},update:function(t,e){this._updatePlanes(t),this._updateCorners(e)},_updatePlanes:function(t){var e=t.getRow(0),i=t.getRow(1),n=t.getRow(2),r=t.getRow(3);this._planes[HX.Frustum.PLANE_LEFT].sum(r,e),this._planes[HX.Frustum.PLANE_RIGHT].difference(r,e),this._planes[HX.Frustum.PLANE_BOTTOM].sum(r,i),this._planes[HX.Frustum.PLANE_TOP].difference(r,i),this._planes[HX.Frustum.PLANE_NEAR].sum(r,n),this._planes[HX.Frustum.PLANE_FAR].difference(r,n);for(var a=0;6>a;++a)this._planes[a].normalizeAsPlane()},_updateCorners:function(t){for(var e=0;8>e;++e){var i=this._corners[e];t.transformTo(HX.Frustum.CLIP_SPACE_CORNERS[e],i),i.scale(1/i.w)}}},HX.Camera=function(){HX.BoundingHierarchyNode.call(this),this._renderTargetWidth=0,this._renderTargetHeight=0,this._viewProjectionMatrixInvalid=!0,this._viewProjectionMatrix=new HX.Matrix4x4,this._inverseProjectionMatrix=new HX.Matrix4x4,this._inverseViewProjectionMatrix=new HX.Matrix4x4,this._projectionMatrix=new HX.Matrix4x4,this._viewMatrix=new HX.Matrix4x4,this._projectionMatrixDirty=!0,this._nearDistance=.1,this._farDistance=1e3,this._frustum=new HX.Frustum,this.position.set(0,0,1)},HX.Camera.prototype=Object.create(HX.BoundingHierarchyNode.prototype),HX.Camera.prototype.getViewProjectionMatrix=function(){return this._viewProjectionMatrixInvalid&&this._updateViewProjectionMatrix(),this._viewProjectionMatrix},HX.Camera.prototype.getFrustum=function(){return this._viewProjectionMatrixInvalid&&this._updateViewProjectionMatrix(),this._frustum},HX.Camera.prototype.getInverseViewProjectionMatrix=function(){return this._viewProjectionMatrixInvalid&&this._updateViewProjectionMatrix(),this._inverseViewProjectionMatrix},HX.Camera.prototype.getInverseProjectionMatrix=function(){return this._projectionMatrixDirty&&this._updateProjectionMatrix(),this._inverseProjectionMatrix},HX.Camera.prototype.getProjectionMatrix=function(){return this._projectionMatrixDirty&&this._updateProjectionMatrix(),this._projectionMatrix},HX.Camera.prototype.getViewMatrix=function(){return this._viewProjectionMatrixInvalid&&this._updateViewProjectionMatrix(),this._viewMatrix},Object.defineProperties(HX.Camera.prototype,{nearDistance:{get:function(){return this._nearDistance},set:function(t){this._nearDistance=t,this._invalidateProjectionMatrix()}},farDistance:{get:function(){return this._farDistance},set:function(t){this._farDistance=t,this._invalidateProjectionMatrix()}}}),HX.Camera.prototype._setRenderTargetResolution=function(t,e){this._renderTargetWidth=t,this._renderTargetHeight=e},HX.Camera.prototype._invalidateViewProjectionMatrix=function(){this._viewProjectionMatrixInvalid=!0},HX.Camera.prototype._invalidateWorldTransformationMatrix=function(){HX.BoundingHierarchyNode.prototype._invalidateWorldTransformationMatrix.call(this),this._invalidateViewProjectionMatrix()},HX.Camera.prototype._updateViewProjectionMatrix=function(){this._viewMatrix.inverseAffineOf(this.getWorldMatrix()),this._viewProjectionMatrix.product(this.getProjectionMatrix(),this._viewMatrix),this._inverseProjectionMatrix.inverseOf(this._projectionMatrix),this._inverseViewProjectionMatrix.inverseOf(this._viewProjectionMatrix),this._frustum.update(this._viewProjectionMatrix,this._inverseViewProjectionMatrix),this._viewProjectionMatrixInvalid=!1},HX.Camera.prototype._invalidateProjectionMatrix=function(){this._projectionMatrixDirty=!0,this._invalidateViewProjectionMatrix()},HX.Camera.prototype._updateProjectionMatrix=function(){throw"Abstract method!"},HX.Camera.prototype._updateWorldBounds=function(){this._worldBounds.clear(HX.BoundingVolume.EXPANSE_INFINITE)},HX.PerspectiveCamera=function(){HX.Camera.call(this),this._vFOV=1.047198,this._aspectRatio=0},HX.PerspectiveCamera.prototype=Object.create(HX.Camera.prototype),Object.defineProperties(HX.PerspectiveCamera.prototype,{verticalFOV:{get:function(){return this._vFOV},set:function(t){this._vFOV=t,this._invalidateProjectionMatrix()}}}),HX.PerspectiveCamera.prototype._setAspectRatio=function(t){this._aspectRatio!=t&&(this._aspectRatio=t,this._invalidateProjectionMatrix())},HX.PerspectiveCamera.prototype._setRenderTargetResolution=function(t,e){HX.Camera.prototype._setRenderTargetResolution.call(this,t,e),this._setAspectRatio(t/e)},HX.PerspectiveCamera.prototype._updateProjectionMatrix=function(){this._projectionMatrix.perspectiveProjection(this._vFOV,this._aspectRatio,this._nearDistance,this._farDistance),this._projectionMatrixDirty=!1},HX.OrthographicOffCenterCamera=function(){HX.Camera.call(this),this._left=-1,this._right=1,this._top=1,this._bottom=-1},HX.OrthographicOffCenterCamera.prototype=Object.create(HX.Camera.prototype),HX.OrthographicOffCenterCamera.prototype.setBounds=function(t,e,i,n){this._left=t,this._right=e,this._top=i,this._bottom=n,this._invalidateProjectionMatrix()},HX.OrthographicOffCenterCamera.prototype._updateProjectionMatrix=function(){this._projectionMatrix.orthographicOffCenterProjection(this._left,this._right,this._top,this._bottom,this._nearDistance,this._farDistance),this._projectionMatrixDirty=!1},HX.DirectionalLight=function(){HX.Light.call(this),this._numCascades=1,this._shadowMapSize=1024,this._numShadowSamples=1,this.shadowSoftness=.02,this.depthBias=.02,this.direction=new HX.Float4(-1,-1,-1,0),this._matrixData=null,this._shadowSoftnessData=null,this._dirLocation=null,this._colorLocation=null,this._splitDistancesLocation=null,this._shadowMatrixLocation=null,this._depthBiasLocation=null,this._shadowSoftnessLocation=null},HX.DirectionalLight.prototype=Object.create(HX.Light.prototype),Object.defineProperty(HX.DirectionalLight.prototype,"castShadows",{get:function(){return this._castShadows},set:function(t){this._castShadows!=t&&(this._castShadows=t,t?this._shadowMapRenderer=new HX.CascadeShadowMapRenderer(this,this._numCascades,this._shadowMapSize):(this._shadowMapRenderer.dispose(),this._shadowMapRenderer=null),this._invalidateLightPass())}}),Object.defineProperty(HX.DirectionalLight.prototype,"numCascades",{get:function(){return this._numCascades},set:function(t){t>4&&(console.warn("set numCascades called with value greater than 4. Real value will be set to 4."),t=4),this._numCascades=t,this._castShadows&&this._invalidateLightPass(),this._shadowMapRenderer&&this._shadowMapRenderer.setNumCascades(t)}}),Object.defineProperty(HX.DirectionalLight.prototype,"shadowMapSize",{get:function(){return this._shadowMapSize},set:function(t){this._shadowMapSize=t,this._shadowMapRenderer&&this._shadowMapRenderer.setShadowMapSize(t)}}),Object.defineProperty(HX.DirectionalLight.prototype,"numShadowSamples",{get:function(){return this._numShadowSamples},set:function(t){1>t&&(t=1,console.warn("setNumShadowSamples called with value smaller than 1. Real value will be set to 1.")),this._numShadowSamples=t,this._castShadows&&this._invalidateLightPass()}}),Object.defineProperty(HX.DirectionalLight.prototype,"direction",{get:function(){var t=this.getWorldMatrix().getColumn(2);return t.x=-t.x,t.y=-t.y,t.z=-t.z,t},set:function(t){var e=new HX.Matrix4x4,i=this.getWorldMatrix().getColumn(3),n=HX.Float4.sum(t,i);e.lookAt(n,i,HX.Float4.Y_AXIS),this.setTransformationMatrix(e)}}),HX.DirectionalLight.prototype.renderBatch=function(t,e,i){this._lightPass||this._initLightPass();var n=i._camera;this._lightPass.updateRenderState(i);var r=t[e],a=n.getViewMatrix().transform(r.direction),s=r._scaledIrradiance;if(HX.GL.uniform3f(this._dirLocation,a.x,a.y,a.z),HX.GL.uniform3f(this._colorLocation,s.r,s.g,s.b),this._castShadows){var o=this._shadowMapRenderer.getSplitDistances();HX.GL.uniform1fv(this._splitDistancesLocation,new Float32Array(o)),HX.GL.uniform1f(this._depthBiasLocation,r.depthBias);for(var h=0,_=0,l=this._numCascades,c=0;l>c;++c){var u=new HX.Matrix4x4;u.product(this._shadowMapRenderer.getShadowMatrix(c),n.getWorldMatrix());for(var m=u._m,f=0;16>f;++f)this._matrixData[h++]=m[f];this._numShadowSamples>1&&(this._shadowSoftnessData[_++]=m[0]*this.shadowSoftness*.5,this._shadowSoftnessData[_++]=m[5]*this.shadowSoftness*.5)}HX.GL.uniformMatrix4fv(this._shadowMatrixLocation,!1,this._matrixData),this._numShadowSamples>1&&HX.GL.uniform2fv(this._shadowSoftnessLocation,this._shadowSoftnessData)}return HX.drawElements(HX.GL.TRIANGLES,6,0),e+1},HX.DirectionalLight.prototype._updateWorldBounds=function(){this._worldBounds.clear(HX.BoundingVolume.EXPANSE_INFINITE),HX.Light.prototype._updateWorldBounds.call(this)},HX.DirectionalLight.prototype._initLightPass=function(){var t={};this._castShadows&&(t.CAST_SHADOWS=1,t.NUM_CASCADES=this._numCascades,t.NUM_SHADOW_SAMPLES=this._numShadowSamples);var e=HX.ShaderLibrary.get("directional_light_vertex.glsl",t),i=HX.LIGHTING_MODEL.getGLSL()+"\n"+HX.ShaderLibrary.get("directional_light_fragment.glsl",t),n=new HX.EffectPass(e,i);n.blendState=HX.BlendState.ADD,this._dirLocation=n.getUniformLocation("lightViewDirection"),this._colorLocation=n.getUniformLocation("lightColor"),this._lightPass=n,this._castShadows&&(this._matrixData=new Float32Array(16*this._numCascades),this._lightPass.setTexture("shadowMap",this._shadowMapRenderer._shadowMap),this._splitDistancesLocation=this._lightPass.getUniformLocation("splitDistances[0]"),this._shadowMatrixLocation=this._lightPass.getUniformLocation("shadowMapMatrices[0]"),this._depthBiasLocation=this._lightPass.getUniformLocation("depthBias"),this._numShadowSamples>1&&(this._shadowSoftnessLocation=this._lightPass.getUniformLocation("shadowMapSoftnesses[0]"),this._shadowSoftnessData=new Float32Array(2*this._numCascades)))},HX.DirectionalLight.prototype._invalidateLightPass=function(){this._lightPass&&(this._lightPass._shader.dispose(),this._lightPass=null,this._dirLocation=null,this._colorLocation=null,this._splitDistancesLocation=null,this._shadowMatrixLocation=null,this._depthBiasLocation=null,this._shadowSoftnessLocation=null,this._matrixData=null)},HX.GlobalSpecularProbe=function(t){this._texture=t,this._pass=null,this._usingAO=!1,this._usingSSR=!1},HX.GlobalSpecularProbe.powerRange0=98e-5,HX.GlobalSpecularProbe.powerRange1=.9921,HX.GlobalSpecularProbe.prototype=Object.create(HX.Light.prototype),HX.GlobalSpecularProbe.prototype.render=function(t){var e=null!=t._aoEffect,i=null!=t._ssrEffect;if(this._usingAO==e&&this._usingSSR==i&&this._pass||(this._usingAO=e,this._usingSSR=i,this._pass=this._initPass()),HX.GL.disable(HX.GL.DEPTH_TEST),this._pass.updateRenderState(t),this._texture){var n=Math.floor(Math.log(this._texture.size)/Math.log(2)),r=0;HX.GL.uniform1f(this._numMipsLocation,n-r)}HX.drawElements(HX.GL.TRIANGLES,6,0)},HX.GlobalSpecularProbe.prototype._updateWorldBounds=function(){
this._worldBounds.clear(HX.BoundingVolume.EXPANSE_INFINITE),HX.Light.prototype._updateWorldBounds.call(this)},HX.GlobalSpecularProbe.prototype._initPass=function(){var t={};HX.EXT_SHADER_TEXTURE_LOD&&(t.USE_TEX_LOD=1),this._usingAO&&(t.USE_AO=1),this._usingSSR&&(t.USE_SSR=1),t.K0=HX.GlobalSpecularProbe.powerRange0,t.K1=HX.GlobalSpecularProbe.powerRange1;var e=new HX.EffectPass(HX.ShaderLibrary.get("global_specular_probe_vertex.glsl"),HX.ShaderLibrary.get("global_specular_probe_fragment.glsl",t));e.blendState=HX.BlendState.ADD,this._numMipsLocation=e.getUniformLocation("numMips"),e.setTexture("specularProbeSampler",this._texture);var i=.0014,n=2/(i*i)-2,r=(Math.pow(2,-10/Math.sqrt(n))-HX.GlobalSpecularProbe.powerRange0)/HX.GlobalSpecularProbe.powerRange1;return e.setUniform("maxMipFactor",r),e},HX.GlobalIrradianceProbe=function(t){this._texture=t,this._usingAO=!1},HX.GlobalIrradianceProbe.prototype=Object.create(HX.Light.prototype),HX.GlobalIrradianceProbe.prototype.render=function(t){var e=null!=t._aoEffect;this._usingAO==e&&this._pass||(this._usingAO=e,this._pass=this._initPass()),HX.GL.disable(HX.GL.DEPTH_TEST),this._pass.updateRenderState(t),HX.drawElements(HX.GL.TRIANGLES,6,0)},HX.GlobalIrradianceProbe.prototype._updateWorldBounds=function(){this._worldBounds.clear(HX.BoundingVolume.EXPANSE_INFINITE),HX.Light.prototype._updateWorldBounds.call(this)},HX.GlobalIrradianceProbe.prototype._initPass=function(){var t={};this._usingAO&&(t.USE_AO=1);var e=new HX.EffectPass(HX.ShaderLibrary.get("global_irradiance_probe_vertex.glsl"),HX.ShaderLibrary.get("global_irradiance_probe_fragment.glsl",t));return e.blendState=HX.BlendState.ADD,e.setTexture("irradianceProbeSampler",this._texture),e},HX.PointLight=function(){HX.Light.call(this),HX.PointLight._sphereMesh=HX.PointLight._sphereMesh||new HX.Mesh(HX.MeshBatch.create(new HX.SpherePrimitive.createMeshData({invert:!0,numSegmentsW:HX.PointLight.SPHERE_SEGMENTS_W,numSegmentsH:HX.PointLight.SPHERE_SEGMENTS_H}),HX.PointLight.LIGHTS_PER_BATCH)),void 0===HX.PointLight._fullScreenLightPasses&&this._initLightPasses(),HX.PointLight._positionData=new Float32Array(3*HX.PointLight.LIGHTS_PER_BATCH),HX.PointLight._colorData=new Float32Array(3*HX.PointLight.LIGHTS_PER_BATCH),HX.PointLight._attenuationData=new Float32Array(2*HX.PointLight.LIGHTS_PER_BATCH),HX.PointLight._radiusData=new Float32Array(HX.PointLight.LIGHTS_PER_BATCH),this._luminanceBound=1/255,this._attenuationFix=1,this._radius=1},HX.PointLight.LIGHTS_PER_BATCH=20,HX.PointLight.SPHERE_SEGMENTS_W=16,HX.PointLight.SPHERE_SEGMENTS_H=10,HX.PointLight.NUM_SPHERE_INDICES=HX.PointLight.SPHERE_SEGMENTS_W*HX.PointLight.SPHERE_SEGMENTS_H*6,HX.PointLight.prototype=Object.create(HX.Light.prototype),HX.PointLight.prototype.renderBatch=function(t,e,i){HX.GL.disable(HX.GL.DEPTH_TEST);var n=t[e]._renderOrderHint<0;return n?this._renderFullscreenBatch(t,e,i):this._renderSphereBatch(t,e,i)},HX.PointLight.prototype._renderSphereBatch=function(t,e,i){HX.PointLight._sphericalLightPass.updateRenderState(i);var n=e+HX.PointLight.LIGHTS_PER_BATCH;n>t.length&&(n=t.length);for(var r=i._camera,a=HX.PointLight._positionData,s=HX.PointLight._colorData,o=HX.PointLight._attenuationData,h=HX.PointLight._radiusData,_=new HX.Float4,l=r.getViewMatrix(),c=0,u=0,m=0,f=e;n>f;++f){var d=t[f];if(d._type!=this._type||d._renderOrderHint<0)n=f;else{d.getWorldMatrix().getColumn(3,_),l.transformPoint(_,_);var p=d._scaledIrradiance;a[m]=_.x,s[m++]=p.r,a[m]=_.y,s[m++]=p.g,a[m]=_.z,s[m++]=p.b,o[u++]=d._attenuationFix,o[u++]=1/(1-d._attenuationFix),h[c++]=2*d._radius*1.0001}}return HX.GL.uniform3fv(HX.PointLight._sphericalPositionLocation,a),HX.GL.uniform3fv(HX.PointLight._sphericalColorLocation,s),HX.GL.uniform2fv(HX.PointLight._sphericalAttenuationFixFactorsLocation,o),HX.GL.uniform1fv(HX.PointLight._sphericalLightRadiusLocation,h),HX.drawElements(HX.GL.TRIANGLES,HX.PointLight.NUM_SPHERE_INDICES*(n-e),0),n},HX.PointLight.prototype.initFullScreenPass=function(t){var e={LIGHTS_PER_BATCH:t+1},i=new HX.EffectPass(HX.ShaderLibrary.get("point_light_fullscreen_vertex.glsl",e),HX.LIGHTING_MODEL.getGLSL()+HX.ShaderLibrary.get("point_light_fullscreen_fragment.glsl",e));i.blendState=HX.BlendState.ADD,HX.PointLight._fullScreenPositionLocations[t]=i.getUniformLocation("lightViewPosition[0]"),HX.PointLight._fullScreenColorLocations[t]=i.getUniformLocation("lightColor[0]"),HX.PointLight._fullScreenAttenuationFixFactorsLocations[t]=i.getUniformLocation("attenuationFixFactors[0]"),HX.PointLight._fullScreenLightPasses[t]=i},HX.PointLight.prototype._renderFullscreenBatch=function(t,e,i){var n=e+HX.PointLight.LIGHTS_PER_BATCH;n>t.length&&(n=t.length);for(var r=HX.PointLight._positionData,a=HX.PointLight._colorData,s=HX.PointLight._attenuationData,o=new HX.Float4,h=i._camera.getViewMatrix(),_=0,l=0,c=e;n>c;++c){var u=t[c];if(u._type==this._type){u.getWorldMatrix().getColumn(3,o),h.transformPoint(o,o);var m=u._scaledIrradiance;r[_]=o.x,a[_++]=m.r,r[_]=o.y,a[_++]=m.g,r[_]=o.z,a[_++]=m.b,s[l++]=u._attenuationFix,s[l++]=1/(1-u._attenuationFix)}else n=c}var f=c-e-1;return HX.PointLight._fullScreenLightPasses[f]||this.initFullScreenPass(f),HX.PointLight._fullScreenLightPasses[f].updateRenderState(i),HX.GL.uniform3fv(HX.PointLight._fullScreenPositionLocations[f],r),HX.GL.uniform3fv(HX.PointLight._fullScreenColorLocations[f],a),HX.GL.uniform2fv(HX.PointLight._fullScreenAttenuationFixFactorsLocations[f],s),HX.drawElements(HX.GL.TRIANGLES,6,0),n},HX.PointLight.prototype._updateScaledIrradiance=function(){HX.Light.prototype._updateScaledIrradiance.call(this),this._attenuationFix=this._luminanceBound/this._intensity,this._radius=Math.sqrt(1/this._attenuationFix),this._invalidateWorldBounds()},HX.PointLight.prototype._createBoundingVolume=function(){return new HX.BoundingSphere},HX.PointLight.prototype._updateWorldBounds=function(){this._worldBounds.setExplicit(this.getWorldMatrix().getColumn(3),this._radius),HX.Light.prototype._updateWorldBounds.call(this)},HX.PointLight.prototype.getRadius=function(){return this._worldBounds.getRadius()},HX.PointLight.prototype._initLightPasses=function(){HX.PointLight._fullScreenLightPasses=[],HX.PointLight._fullScreenPositionLocations=[],HX.PointLight._fullScreenColorLocations=[],HX.PointLight._fullScreenAttenuationFixFactorsLocations=[];var t={LIGHTS_PER_BATCH:HX.PointLight.LIGHTS_PER_BATCH},e=new HX.EffectPass(HX.ShaderLibrary.get("point_light_spherical_vertex.glsl",t),HX.LIGHTING_MODEL.getGLSL()+HX.ShaderLibrary.get("point_light_spherical_fragment.glsl",t));e.blendState=HX.BlendState.ADD,e.setMesh(HX.PointLight._sphereMesh),HX.PointLight._sphericalLightPass=e,HX.PointLight._sphericalPositionLocation=e.getUniformLocation("lightViewPosition[0]"),HX.PointLight._sphericalColorLocation=e.getUniformLocation("lightColor[0]"),HX.PointLight._sphericalAttenuationFixFactorsLocation=e.getUniformLocation("attenuationFixFactors[0]"),HX.PointLight._sphericalLightRadiusLocation=e.getUniformLocation("lightRadius[0]")},HX.Skybox=function(t){t instanceof HX.Material||(t=new HX.SkyboxMaterial(t)),this._modelInstance=new HX.ModelInstance(HX.PlanePrimitive.create({alignment:HX.PlanePrimitive.ALIGN_XY,width:2,height:2}),t),this._globalSpecularProbe=null,this._globalIrradianceProbe=null},HX.Skybox.prototype={getGlobalSpecularProbe:function(){return this._globalSpecularProbe},setGlobalSpecularProbe:function(t){this._globalSpecularProbe=t},getGlobalIrradianceProbe:function(){return this._globalIrradianceProbe},setGlobalIrradianceProbe:function(t){this._globalIrradianceProbe=t}},HX.MeshBatch={create:function(t,e){var i=HX.MeshData.createDefaultBatchEmpty(),n=[],r=[],a=t._vertexData,s=t._indexData,o=a.length,h=0,_=0;i.vertexUsage=t.vertexUsage,i.indexUsage=t.vertexUsage;for(var l=0;e>l;++l){var c=_/HX.MeshData.DEFAULT_BATCHED_VERTEX_SIZE;o=a.length;for(var u=0;o>u;){for(var m=0;m<HX.MeshData.DEFAULT_VERTEX_SIZE;++m)n[_++]=a[u++];n[_++]=l}for(o=s.length,u=0;o>u;++u)r[h++]=s[u]+c}return i.setVertexData(n),i.setIndexData(r),i}},HX.MeshData=function(){this._vertexStride=0,this._vertexData=void 0,this._indexData=void 0,this.vertexUsage=HX.GL.STATIC_DRAW,this.indexUsage=HX.GL.STATIC_DRAW,this._vertexAttributes=[]},HX.MeshData.DEFAULT_VERTEX_SIZE=12,HX.MeshData.DEFAULT_BATCHED_VERTEX_SIZE=13,HX.MeshData.createDefaultEmpty=function(){var t=new HX.MeshData;return t.addVertexAttribute("hx_position",3),t.addVertexAttribute("hx_normal",3),t.addVertexAttribute("hx_tangent",4),t.addVertexAttribute("hx_texCoord",2),t},HX.MeshData.createDefaultBatchEmpty=function(){var t=new HX.MeshData;return t.addVertexAttribute("hx_position",3),t.addVertexAttribute("hx_normal",3),t.addVertexAttribute("hx_tangent",4),t.addVertexAttribute("hx_texCoord",2),t.addVertexAttribute("hx_instanceID",1),t},HX.MeshData.prototype={constructor:HX.MeshData,setVertexData:function(t){this._vertexData=new Float32Array(t)},setIndexData:function(t){this._indexData=new Uint16Array(t)},addVertexAttribute:function(t,e){var i=this._vertexStride;this._vertexStride+=e,this._vertexAttributes.push({name:t,offset:i,numComponents:e})},getVertexAttribute:function(t){for(var e=this._vertexAttributes.length,i=0;e>i;++i)if(this._vertexAttributes[i].name===t)return this._vertexAttributes[i]},getVertexStride:function(){return this._vertexStride}},HX.Mesh=function(t){this._vertexBuffer=new HX.VertexBuffer,this._indexBuffer=new HX.IndexBuffer,this._vertexBuffer.uploadData(t._vertexData,t.vertexUsage),this._indexBuffer.uploadData(t._indexData,t.indexUsage),this._numIndices=t._indexData.length,this._vertexStride=t.getVertexStride(),this._vertexAttributes=t._vertexAttributes,this._renderOrderHint=++HX.Mesh.ID_COUNTER},HX.Mesh.ID_COUNTER=0,HX.Mesh.prototype={constructor:HX.Mesh,dispose:function(){this._vertexBuffer.dispose(),this._indexBuffer.dispose()},numIndices:function(){return this._numIndices},numVertexAttributes:function(){return this._vertexAttributes.length},getVertexStride:function(){return this._vertexStride},getVertexAttribute:function(t){return this._vertexAttributes[t]}},HX.ModelData=function(){this._meshDataList=[]},HX.ModelData.prototype={constructor:HX.ModelData,numMeshes:function(){return this._meshDataList.length},getMeshData:function(t){return this._meshDataList[t]},addMeshData:function(t){this._meshDataList.push(t)}},HX.Model=function(t){this._localBounds=new HX.BoundingAABB,this.onChange=new HX.Signal,t?(this._meshes=null,this._setModelData(t)):this._meshes=[]},HX.Model.prototype={constructor:HX.Model,numMeshes:function(){return this._meshes.length},getMesh:function(t){return this._meshes[t]},dispose:function(){if(this._meshes)for(var t=0;t<this._meshes.length;++t)this._meshes[t].dispose()},getLocalBounds:function(){return this._localBounds},_setModelData:function(t){this.dispose(),this._localBounds.clear(),this._meshes=[];for(var e=0;e<t.numMeshes();++e){var i=t.getMeshData(e);this._localBounds.growToIncludeMesh(i),this._meshes.push(new HX.Mesh(i))}this.onChange.dispatch()}},HX.FileModel=function(t){HX.Model.call(this);var e=this,i=function(t){e._setModelData(t)};HX.ModelParser.parse(t,i)},HX.FileModel.prototype=Object.create(HX.Model.prototype),HX.VertexLayout=function(t,e){var i=e.getShader();this.attributes=[],this._numAttributes=-1;for(var n=t.getVertexStride(),r=0;r<t.numVertexAttributes();++r){var a=t.getVertexAttribute(r),s=i.getVertexAttributeIndex(a.name);this._numAttributes=Math.max(this._numAttributes,s),s>=0&&this.attributes.push({index:s,offset:4*a.offset,numComponents:a.numComponents,stride:4*n})}++this._numAttributes},HX.VertexLayout.prototype={constructor:HX.VertexLayout},HX.MeshInstance=function(t,e){this._mesh=t,this._meshMaterialLinkInvalid=!1,this.material=e},HX.MeshInstance.prototype={constructor:HX.MeshInstance,get material(){return this._material},set material(t){this._material&&this._material.onChange.unbind(this._onMaterialChange),this._material=t,this._material&&this._material.onChange.bind(this,this._onMaterialChange),this._linkMeshWithMaterial()},updateRenderState:function(t){this._meshMaterialLinkInvalid&&this._linkMeshWithMaterial(),this._mesh._vertexBuffer.bind(),this._mesh._indexBuffer.bind();for(var e=this._vertexLayouts[t],i=e.attributes,n=i.length,r=0;n>r;++r){var a=i[r];HX.GL.vertexAttribPointer(a.index,a.numComponents,HX.GL.FLOAT,!1,a.stride,a.offset)}HX.enableAttributes(e._numAttributes)},_initVertexLayouts:function(){this._vertexLayouts=new Array(HX.MaterialPass.NUM_PASS_TYPES);for(var t=0;t<HX.MaterialPass.NUM_PASS_TYPES;++t){var e=this._material.getPass(t);e&&(this._vertexLayouts[t]=new HX.VertexLayout(this._mesh,e))}},_linkMeshWithMaterial:function(){this._initVertexLayouts(),this._meshMaterialLinkInvalid=!1},_onMaterialChange:function(){this._meshMaterialLinkInvalid=!0}},HX.ModelInstance=function(t,e){this._model=t,this._meshInstances=[],this._castShadows=!0,this.onChange=new HX.Signal,this._model.onChange.bind(this,this._onModelChange),this._materials=e instanceof Array?e:[e],this._onModelChange()},HX.ModelInstance.prototype={constructor:HX.ModelInstance,getModel:function(){return this._model},get castShadows(){return this._castShadows},set castShadows(t){this._castShadows=t},numMeshInstances:function(){return this._meshInstances.length},getMeshInstance:function(t){return this._meshInstances[t]},getLocalBounds:function(){return this._model.getLocalBounds()},_addMeshInstance:function(t,e){this._meshInstances.push(new HX.MeshInstance(t,e))},_onModelChange:function(){for(var t=this._materials.length-1,e=0;e<this._model.numMeshes();++e)this._addMeshInstance(this._model.getMesh(e),this._materials[Math.min(e,t)]);this.onChange.dispatch()}},HX.BoxPrimitive={},HX.BoxPrimitive._createMeshData=function(t){var e,i=t.numSegmentsW||1,n=t.numSegmentsH||1,r=t.numSegmentsD||1,a=t.width||1,s=t.height||a,o=t.depth||a,h=t.scaleU||1,_=t.scaleV||1,l=t.invert?-1:1,c=void 0===t.doubleSided?!1:t.doubleSided,u=HX.MeshData.DEFAULT_VERTEX_SIZE,m=new HX.MeshData.createDefaultEmpty,f=6,d=[],p=[],X=0,H=1/i,g=1/n,x=1/r,S=.5*a,E=.5*s,v=.5*o;e=X+(i+1)*(n+1)*u;for(var T=0;n>=T;++T){var L=T*g,M=s*L-E;0>l&&(L=1-L);for(var P=0;i>=P;++P){var y=P*H,A=a*y-S;0>l&&(y=1-y),d[X]=A*l,d[X+1]=M*l,d[X+2]=v*l,d[X+3]=0,d[X+4]=0,d[X+5]=1,d[X+6]=1,d[X+7]=0,d[X+8]=0,d[X+9]=1,d[X+10]=y*h,d[X+11]=L*_,d[e]=-A*l,d[e+1]=M*l,d[e+2]=-v*l,d[e+3]=0,d[e+4]=0,d[e+5]=-1,d[e+6]=-1,d[e+7]=0,d[e+8]=0,d[X+9]=1,d[e+10]=y*h,d[e+11]=L*_,X+=u,e+=u}}X=e,e=X+(r+1)*(n+1)*u;for(var T=0;n>=T;++T)for(var L=T*g,M=s*L-E,R=0;r>=R;++R){var y=R*x,b=o*y-v;d[X]=-S,d[X+1]=M,d[X+2]=b*l,d[X+3]=-l,d[X+4]=0,d[X+5]=0,d[X+6]=0,d[X+7]=0,d[X+8]=l,d[X+9]=1,d[X+10]=y*h,d[X+11]=L*_,d[e]=S,d[e+1]=M,d[e+2]=-b*l,d[e+3]=l,d[e+4]=0,d[e+5]=0,d[e+6]=0,d[e+7]=0,d[e+8]=-l,d[X+9]=1,d[e+10]=y*h,d[e+11]=L*_,X+=u,e+=u}X=e,e=X+(i+1)*(r+1)*u;for(var R=0;r>=R;++R)for(var L=R*x,b=o*L-v,P=0;i>=P;++P){var y=P*H,A=a*y-S;d[X]=A,d[X+1]=E,d[X+2]=-b*l,d[X+3]=0,d[X+4]=l,d[X+5]=0,d[X+6]=1,d[X+7]=0,d[X+8]=0,d[X+9]=1,d[X+10]=y*h,d[X+11]=L*_,d[e]=A,d[e+1]=-E,d[e+2]=b*l,d[e+3]=0,d[e+4]=-l,d[e+5]=0,d[e+6]=1,d[e+7]=0,d[e+8]=0,d[X+9]=1,d[e+10]=y*h,d[e+11]=L*_,X+=u,e+=u}for(var w=0,D=0,C=0;f>C;++C){for(var O=2==C||3==C?r:i,F=4==C||5==C?r:n,N=0;F>N;++N)for(var G=0;O>G;++G){var B=O+1,I=w+G+N*B;p[D]=I,p[D+1]=I+B+1,p[D+2]=I+B,p[D+3]=I,p[D+4]=I+1,p[D+5]=I+B+1,D+=6}w+=(O+1)*(F+1)}if(c)for(var U=0;D>U;)p[D+U]=p[U],p[D+U+1]=p[U+2],p[D+U+2]=p[U+1],p[D+U+3]=p[U+3],p[D+U+4]=p[U+5],p[D+U+5]=p[U+4],U+=6;return m.setVertexData(d),m.setIndexData(p),m},HX.BoxPrimitive.createMesh=function(t){var e=HX.BoxPrimitive._createMeshData(t);return new HX.Mesh(e)},HX.BoxPrimitive.create=function(t){t=t||{};var e=HX.BoxPrimitive._createMeshData(t),i=new HX.ModelData;return i.addMeshData(e),new HX.Model(i)},HX.PlanePrimitive={},HX.PlanePrimitive.ALIGN_XZ=1,HX.PlanePrimitive.ALIGN_XY=2,HX.PlanePrimitive.ALIGN_YZ=3,HX.PlanePrimitive.create=function(t){t=t||{};var e=t.alignment||HX.PlanePrimitive.ALIGN_XZ,i=t.numSegmentsW||1,n=t.numSegmentsH||1,r=t.width||1,a=t.height||1,s=t.scaleU||1,o=t.scaleV||1,h=void 0===t.doubleSided?!1:t.doubleSided,_=HX.MeshData.DEFAULT_VERTEX_SIZE,l=new HX.MeshData.createDefaultEmpty,c=n*i*6,u=(n+1)*(i+1);h&&(c*=2,u*=2);var m=new Array(u*_),f=new Array(c),d=0,p=0,X=1/i,H=1/n,g=0,x=0,S=0,E=0,v=0,T=0,L=0,M=0,P=0,y=0,A=0,R=0,b=0;e==HX.PlanePrimitive.ALIGN_XY?(T=-1,L=1,y=1):e==HX.PlanePrimitive.ALIGN_XZ?(v=1,L=-1,A=1):(E=1,P=1,y=1);for(var w=0;n>=w;++w)for(var D=(w*H-.5)*a,C=0;i>=C;++C){var O=(C*X-.5)*r;if(e==HX.PlanePrimitive.ALIGN_XY?(g=O,x=D,R=1-C*X,b=w*H):e==HX.PlanePrimitive.ALIGN_XZ?(g=O,S=D,R=1-C*X,b=w*H):(x=D,S=O,R=1-C*X,b=w*H),R*=s,b*=o,m[d]=g,m[d+1]=x,m[d+2]=S,m[d+3]=E,m[d+4]=v,m[d+5]=T,m[d+6]=L,m[d+7]=M,m[d+8]=P,m[d+9]=1,m[d+10]=R,m[d+11]=b,d+=_,h&&(m[d]=g,m[d+1]=x,m[d+2]=S,m[d+3]=-E,m[d+4]=-v,m[d+5]=-T,m[d+6]=-L,m[d+7]=-M,m[d+8]=-P,m[d+9]=1,m[d+10]=1-R,m[d+11]=b,d+=_),C!=i&&w!=n){var F=i+1,N=C+w*F,G=h?1:0;f[p]=N<<G,f[p+1]=N+F<<G,f[p+2]=N+F+1<<G,f[p+3]=N<<G,f[p+4]=N+F+1<<G,f[p+5]=N+1<<G,p+=6,h&&(f[p]=(N+F+1<<G)+1,f[p+1]=(N+F<<G)+1,f[p+2]=(N<<G)+1,f[p+3]=(N+1<<G)+1,f[p+4]=(N+F+1<<G)+1,f[p+5]=(N<<G)+1,p+=6)}}l.setVertexData(m),l.setIndexData(f);var B=new HX.ModelData;return B.addMeshData(l),new HX.Model(B)},HX.RectMesh={},HX.RectMesh.create=function(){var t=new HX.MeshData;return t.addVertexAttribute("hx_position",2),t.addVertexAttribute("hx_texCoord",2),t.setVertexData([-1,1,0,1,1,1,1,1,1,-1,1,0,-1,-1,0,0]),t.setIndexData([0,1,2,0,2,3]),new HX.Mesh(t)},HX.SpherePrimitive={},HX.SpherePrimitive.createMeshData=function(t){for(var e=t.numSegmentsW||16,i=t.numSegmentsH||10,n=t.radius||.5,r=t.scaleU||1,a=t.scaleV||1,s=t.invert?-1:1,o=void 0===t.doubleSided?!1:t.doubleSided,h=HX.MeshData.DEFAULT_VERTEX_SIZE,_=new HX.MeshData.createDefaultEmpty,l=i*e*6,c=(i+1)*(e+1),u=new Array(c*h),m=new Array(l),f=0,d=0,p=1/e,X=1/i,H=0;i>=H;++H){var g=H*X,x=g*Math.PI,S=-Math.cos(x),E=Math.sin(x);0>s&&(g=1-g);for(var v=0;e>=v;++v){var T=v*p,L=T*Math.PI*2;s&&(T=1-T);var M=Math.cos(L)*E*s,P=S*s,y=Math.sin(L)*E*s;u[f]=M*n,u[f+1]=P*n,u[f+2]=y*n,u[f+3]=M*s,u[f+4]=P*s,u[f+5]=y*s,u[f+6]=-y,u[f+7]=0,u[f+8]=M,u[f+9]=1,u[f+10]=1-T*r,u[f+11]=g*a,f+=h}}for(var H=0;i>H;++H)for(var v=0;e>v;++v){var A=e+1,R=v+H*A;m[d]=R,m[d+1]=R+A,m[d+2]=R+A+1,m[d+3]=R,m[d+4]=R+A+1,m[d+5]=R+1,d+=6,o&&(m[d]=R,m[d+1]=R+A+1,m[d+2]=R+A,m[d+3]=R,m[d+4]=R+1,m[d+5]=R+A+1)}return _.setVertexData(u),_.setIndexData(m),_},HX.SpherePrimitive.createMesh=function(t){var e=HX.SpherePrimitive.createMeshData(t);return new HX.Mesh(e)},HX.SpherePrimitive.create=function(t){t=t||{};var e=HX.SpherePrimitive.createMeshData(t),i=new HX.ModelData;return i.addMeshData(e),new HX.Model(i)},HX.FrameBuffer=function(t,e){if(t&&void 0===t[0]&&(t=[t]),this._colorTextures=t,this._numColorTextures=this._colorTextures?this._colorTextures.length:0,this._depthBuffer=e,this._colorTextures&&this._numColorTextures>1){this._drawBuffers=new Array(this._numColorTextures);for(var i=0;i<this._numColorTextures;++i)this._drawBuffers[i]=HX.EXT_DRAW_BUFFERS.COLOR_ATTACHMENT0_WEBGL+i}else this._drawBuffers=null;this._fbo=HX.GL.createFramebuffer()},HX.FrameBuffer.prototype={constructor:HX.FrameBuffer,get width(){return this._width},get height(){return this._height},init:function(){HX.GL.bindFramebuffer(HX.GL.FRAMEBUFFER,this._fbo),this._colorTextures?(this._width=this._colorTextures[0]._width,this._height=this._colorTextures[0]._height):(this._width=this._depthBuffer._width,this._height=this._depthBuffer._height);for(var t=0;t<this._numColorTextures;++t){var e=this._colorTextures[t];HX.EXT_DRAW_BUFFERS?HX.GL.framebufferTexture2D(HX.GL.FRAMEBUFFER,HX.EXT_DRAW_BUFFERS.COLOR_ATTACHMENT0_WEBGL+t,HX.GL.TEXTURE_2D,e._texture,0):HX.GL.framebufferTexture2D(HX.GL.FRAMEBUFFER,HX.GL.COLOR_ATTACHMENT0+t,HX.GL.TEXTURE_2D,e._texture,0)}this._depthBuffer&&(this._depthBuffer instanceof HX.Texture2D?HX.GL.framebufferTexture2D(HX.GL.FRAMEBUFFER,HX.GL.DEPTH_STENCIL_ATTACHMENT,HX.GL.TEXTURE_2D,this._depthBuffer._texture,0):(HX.GL.bindRenderbuffer(HX.GL.RENDERBUFFER,this._depthBuffer._renderBuffer),HX.GL.framebufferRenderbuffer(HX.GL.FRAMEBUFFER,HX.GL.DEPTH_STENCIL_ATTACHMENT,HX.GL.RENDERBUFFER,this._depthBuffer._renderBuffer)));var i=HX.GL.checkFramebufferStatus(HX.GL.FRAMEBUFFER);switch(i){case HX.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:console.warn("Failed to initialize FBO: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");break;case HX.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:console.warn("Failed to initialize FBO: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");break;case HX.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:console.warn("Failed to initialize FBO: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");break;case HX.GL.FRAMEBUFFER_UNSUPPORTED:console.warn("Failed to initialize FBO: FRAMEBUFFER_UNSUPPORTED")}},dispose:function(){HX.GL.deleteFramebuffer(this._fbo)}},HX.ReadOnlyDepthBuffer=function(){this._renderBuffer=HX.GL.createRenderbuffer()},HX.ReadOnlyDepthBuffer.prototype={constructor:HX.FrameBuffer,width:function(){return this._width},height:function(){return this._height},init:function(t,e){this._width=t,this._height=e,HX.GL.bindRenderbuffer(HX.GL.RENDERBUFFER,this._renderBuffer),HX.GL.renderbufferStorage(HX.GL.RENDERBUFFER,HX.GL.DEPTH_STENCIL,t,e)},dispose:function(){HX.GL.deleteRenderBuffer(this._renderBuffer)}},HX.Texture2D=function(){this._default=HX.DEFAULT_TEXTURE_2D,this._texture=HX.GL.createTexture(),this._width=0,this._height=0,this.bind(),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_MIN_FILTER,HX.TextureFilter.DEFAULT.min),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_MAG_FILTER,HX.TextureFilter.DEFAULT.mag),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_WRAP_S,HX.TextureWrapMode.DEFAULT.s),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_WRAP_T,HX.TextureWrapMode.DEFAULT.t),HX.EXT_TEXTURE_FILTER_ANISOTROPIC&&HX.DEFAULT_TEXTURE_MAX_ANISOTROPY>0&&HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.EXT_TEXTURE_FILTER_ANISOTROPIC.TEXTURE_MAX_ANISOTROPY_EXT,HX.DEFAULT_TEXTURE_MAX_ANISOTROPY),this._isReady=!1},HX.Texture2D.prototype={constructor:HX.Texture2D,dispose:function(){HX.GL.deleteTexture(this._texture),this._isReady=!1},generateMipmap:function(){this.bind(),HX.GL.generateMipmap(HX.GL.TEXTURE_2D)},setFilter:function(t){this.bind(),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_MIN_FILTER,t.min),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_MAG_FILTER,t.mag)},setWrapMode:function(t){this.bind(),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_WRAP_S,t.s),HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.GL.TEXTURE_WRAP_T,t.t)},setMaxAnisotropy:function(t){HX.EXT_TEXTURE_FILTER_ANISOTROPIC&&HX.GL.texParameteri(HX.GL.TEXTURE_2D,HX.EXT_TEXTURE_FILTER_ANISOTROPIC.TEXTURE_MAX_ANISOTROPY_EXT,t)},get width(){return this._width},get height(){return this._height},initEmpty:function(t,e,i,n){i=i||HX.GL.RGBA,n=n||HX.GL.UNSIGNED_BYTE,this.bind(),this._width=t,this._height=e,HX.GL.texImage2D(HX.GL.TEXTURE_2D,0,i,t,e,0,i,n,null),this._isReady=!0,HX.GL.bindTexture(HX.GL.TEXTURE_2D,null)},uploadData:function(t,e,i,n,r,a){this._width=e,this._height=i,r=r||HX.GL.RGBA,a=a||HX.GL.UNSIGNED_BYTE,n=void 0===n?!1:n,this.bind(),HX.GL.texImage2D(HX.GL.TEXTURE_2D,0,r,e,i,0,r,a,t),n&&HX.GL.generateMipmap(HX.GL.TEXTURE_2D),this._isReady=!0,HX.GL.bindTexture(HX.GL.TEXTURE_2D,null)},uploadImage:function(t,e,i,n,r,a){this._width=e,this._height=i,r=r||HX.GL.RGBA,a=a||HX.GL.UNSIGNED_BYTE,n=void 0===n?!0:n,this.bind(),t&&HX.GL.pixelStorei(HX.GL.UNPACK_FLIP_Y_WEBGL,1),HX.GL.texImage2D(HX.GL.TEXTURE_2D,0,r,r,a,t),n&&HX.GL.generateMipmap(HX.GL.TEXTURE_2D),this._isReady=!0,HX.GL.bindTexture(HX.GL.TEXTURE_2D,null)},isReady:function(){return this._isReady},bind:function(t){void 0!==t&&HX.GL.activeTexture(HX.GL.TEXTURE0+t),HX.GL.bindTexture(HX.GL.TEXTURE_2D,this._texture),t>HX._numActiveTextures&&(HX._numActiveTextures=t)}},HX.FileTexture2D=function(t,e,i,n){HX.Texture2D.call(this),this.initEmpty(1,1),e=void 0===e?!0:e;var r=new Image,a=this;r.onload=function(){a.uploadImage(r,r.naturalWidth,r.naturalHeight,e),i&&i()},r.onError=function(){console.warn("Failed loading texture '"+t+"'"),n&&n()},r.src=t},HX.FileTexture2D.prototype=Object.create(HX.Texture2D.prototype),HX.TextureCube=function(){this._default=HX.DEFAULT_TEXTURE_CUBE,this._texture=HX.GL.createTexture(),this._size=0,this.bind(),HX.GL.texParameteri(HX.GL.TEXTURE_CUBE_MAP,HX.GL.TEXTURE_MIN_FILTER,HX.TextureFilter.DEFAULT.min),HX.GL.texParameteri(HX.GL.TEXTURE_CUBE_MAP,HX.GL.TEXTURE_MAG_FILTER,HX.TextureFilter.DEFAULT.mag),HX.EXT_TEXTURE_FILTER_ANISOTROPIC&&HX.DEFAULT_TEXTURE_MAX_ANISOTROPY>0&&HX.GL.texParameteri(HX.GL.TEXTURE_CUBE_MAP,HX.EXT_TEXTURE_FILTER_ANISOTROPIC.TEXTURE_MAX_ANISOTROPY_EXT,HX.DEFAULT_TEXTURE_MAX_ANISOTROPY),this._isReady=!1},HX.TextureCube.prototype={constructor:HX.TextureCube,dispose:function(){HX.GL.deleteTexture(this._texture),this._isReady=!1},generateMipmap:function(){this.bind(),HX.GL.generateMipmap(HX.GL.TEXTURE_CUBE_MAP)},setFilter:function(t){this.bind(),HX.GL.texParameteri(HX.GL.TEXTURE_CUBE_MAP,HX.GL.TEXTURE_MIN_FILTER,t.min),HX.GL.texParameteri(HX.GL.TEXTURE_CUBE_MAP,HX.GL.TEXTURE_MAG_FILTER,t.mag)},get size(){return this._size},initEmpty:function(t,e,i){e=e||HX.GL.RGBA,i=i||HX.GL.UNSIGNED_BYTE,this._size=t,this.bind(),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_X,0,e,t,t,0,e,i,null),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_X,0,e,t,t,0,e,i,null),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_Y,0,e,t,t,0,e,i,null),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,e,t,t,0,e,i,null),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_Z,0,e,t,t,0,e,i,null),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,e,t,t,0,e,i,null),this._isReady=!0,HX.GL.bindTexture(HX.GL.TEXTURE_2D,null)},uploadData:function(t,e,i,n,r){this._size=e,n=n||HX.GL.RGBA,r=r||HX.GL.UNSIGNED_BYTE,i=void 0===i?!0:i,this.bind(),HX.GL.pixelStorei(HX.GL.UNPACK_FLIP_Y_WEBGL,0),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_X,0,n,e,e,0,n,r,t[0]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_X,0,n,e,e,0,n,r,t[1]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_Y,0,n,e,e,0,n,r,t[2]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,n,e,e,0,n,r,t[3]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_Z,0,n,e,e,0,n,r,t[4]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,n,e,e,0,n,r,t[5]),i&&HX.GL.generateMipmap(HX.GL.TEXTURE_CUBE_MAP),this._isReady=!0,HX.GL.bindTexture(HX.GL.TEXTURE_CUBE_MAP,null)},uploadImages:function(t,e,i,n){e=void 0===e?!0:e,this.uploadImagesToMipLevel(t,0,i,n),e&&(this.bind(),HX.GL.generateMipmap(HX.GL.TEXTURE_CUBE_MAP)),this._isReady=!0,HX.GL.bindTexture(HX.GL.TEXTURE_CUBE_MAP,null)},uploadImagesToMipLevel:function(t,e,i,n){i=i||HX.GL.RGBA,n=n||HX.GL.UNSIGNED_BYTE,0==e&&(this._size=t[0].naturalWidth),this.bind(),HX.GL.pixelStorei(HX.GL.UNPACK_FLIP_Y_WEBGL,0),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_X,e,i,i,n,t[0]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_X,e,i,i,n,t[1]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_Y,e,i,i,n,t[2]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,e,i,i,n,t[3]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_POSITIVE_Z,e,i,i,n,t[4]),HX.GL.texImage2D(HX.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z,e,i,i,n,t[5]),HX.GL.bindTexture(HX.GL.TEXTURE_CUBE_MAP,null)},isReady:function(){return this._isReady},bind:function(t){void 0!==t&&HX.GL.activeTexture(HX.GL.TEXTURE0+t),HX.GL.bindTexture(HX.GL.TEXTURE_CUBE_MAP,this._texture),t>HX._numActiveTextures&&(HX._numActiveTextures=t)}},HX.FileTextureCube=function(t,e,i,n){HX.TextureCube.call(this),e=void 0===e?!0:e;for(var r=[],a=this,s=0;6>s;++s){var o=new Image;o.nextID=s+1,o.onload=5>s?function(){r[this.nextID].src=t[this.nextID]}:function(){a.uploadImages(r,this.naturalWidth,e),i&&i()},o.onError=function(){console.warn("Failed loading texture '"+url+"'"),n&&n()},r[s]=o}r[0].src=t[0]},HX.FileTextureCube.prototype=Object.create(HX.TextureCube.prototype),HX.MippedTextureCube=function(t,e,i,n,r){HX.TextureCube.call(this);var a=[],s=this,o=6*i,h=[],_="/"===t.charAt(-1)?"":"/";t+=_;for(var l=0;i>l;++l){var c=t+l+"/";h.push(c+"posX."+e),h.push(c+"negX."+e),h.push(c+"posY."+e),h.push(c+"negY."+e),h.push(c+"posZ."+e),h.push(c+"negZ."+e)}for(var l=0;o>l;++l){var u=new Image;u.nextID=l+1,u.onload=o-1>l?function(){a[this.nextID].src=h[this.nextID]}:function(){for(var t=0;i>t;++t)s.uploadImagesToMipLevel(a.slice(6*t,6*t+6),t);s._isReady=!0,n&&n()},u.onError=function(){console.warn("Failed loading texture '"+url+"'"),r&&r()},a[l]=u}a[0].src=h[0]},HX.MippedTextureCube.prototype=Object.create(HX.TextureCube.prototype),HX.TextureUtils={assureSize:function(t,e,i,n){return t===i.width&&e===i.height?!1:(i.initEmpty(t,e),n.init(),!0)}},HX.BlendState=function(t,e,i,n){this.enabled=!0,this.srcFactor=t||HX.BlendFactor.ONE,this.dstFactor=e||HX.BlendFactor.ZERO,this.operator=i||HX.BlendOperation.ADD,this.color=n||null},HX.BlendState._initDefaults=function(){HX.BlendState.ADD=new HX.BlendState(HX.BlendFactor.ONE,HX.BlendFactor.ONE),HX.BlendState.ADD_WITH_ALPHA=new HX.BlendState(HX.BlendFactor.SOURCE_ALPHA,HX.BlendFactor.ONE),HX.BlendState.MULTIPLY=new HX.BlendState(HX.BlendFactor.ZERO,HX.BlendFactor.SOURCE_COLOR),HX.BlendState.ALPHA=new HX.BlendState(HX.BlendFactor.SOURCE_ALPHA,HX.BlendFactor.ONE_MINUS_SOURCE_ALPHA),HX.BlendState.INV_ALPHA=new HX.BlendState(HX.BlendFactor.ONE_MINUS_SOURCE_ALPHA,HX.BlendFactor.SOURCE_ALPHA)},HX.CascadeShadowCasterCollector=function(t){HX.SceneVisitor.call(this),this._renderCameras=null,this._bounds=new HX.BoundingAABB,this._numCascades=t,this._cullPlanes=null,this._numCullPlanes=0,this._renderLists=[],this._passType=null},HX.CascadeShadowCasterCollector.prototype=Object.create(HX.SceneVisitor.prototype),HX.CascadeShadowCasterCollector.prototype.getRenderList=function(t){return this._renderLists[t]},HX.CascadeShadowCasterCollector.prototype.collect=function(t,e){this._passType=-1===HX.MaterialPass.SHADOW_MAP_PASS?HX.MaterialPass.GEOMETRY_PASS:HX.MaterialPass.SHADOW_MAP_PASS,this._collectorCamera=t,this._bounds.clear();for(var i=0;i<this._numCascades;++i)this._renderLists[i]=[];e.acceptVisitor(this)},HX.CascadeShadowCasterCollector.prototype.getBounds=function(){return this._bounds},HX.CascadeShadowCasterCollector.prototype.setRenderCameras=function(t){this._renderCameras=t},HX.CascadeShadowCasterCollector.prototype.setCullPlanes=function(t,e){this._cullPlanes=t,this._numCullPlanes=e},HX.CascadeShadowCasterCollector.prototype.visitModelInstance=function(t,e,i){if(0!=t._castShadows){this._bounds.growToIncludeBound(i);for(var n=this._passType,r=this._numCascades,a=t.numMeshInstances(),s=r-1,o=s;o>=0;--o){var h=this._renderLists[o],_=this._renderCameras[o];if(o==s||i.intersectsConvexSolid(this._cullPlanes,this._numCullPlanes))for(var l=0;a>l;++l){var c=t.getMeshInstance(l),u=c.material;if(u.hasPass(n)){var m=new HX.RenderItem;m.pass=u.getPass(n),m.meshInstance=c,m.worldMatrix=e,m.camera=_,m.material=u,h.push(m)}}else o=0}}},HX.CascadeShadowCasterCollector.prototype.qualifies=function(t){return t.getWorldBounds().intersectsConvexSolid(this._cullPlanes,this._numCullPlanes)},HX.CascadeShadowMapRenderer=function(t,e,i){this._light=t,this._numCascades=e||3,this._numCascades>4&&(this._numCascades=4),this._shadowMapSize=i||1024,this._shadowMapInvalid=!0,this._fbo=null,this._depthBuffer=null,this._shadowMap=new HX.Texture2D,this._shadowMap.setFilter(HX.TextureFilter.NEAREST_NOMIP),this._shadowMap.setWrapMode(HX.TextureWrapMode.CLAMP),this._shadowMatrices=[new HX.Matrix4x4,new HX.Matrix4x4,new HX.Matrix4x4,new HX.Matrix4x4],this._transformToUV=[new HX.Matrix4x4,new HX.Matrix4x4,new HX.Matrix4x4,new HX.Matrix4x4],this._inverseLightMatrix=new HX.Matrix4x4,this._splitRatios=null,this._splitDistances=null,this._shadowMapCameras=null,this._collectorCamera=new HX.OrthographicOffCenterCamera,this._minZ=0,this._numCullPlanes=0,this._cullPlanes=[],this._localBounds=new HX.BoundingAABB,this._casterCollector=new HX.CascadeShadowCasterCollector(this._numCascades),this._initSplitRatios(),this._initCameras(),this._viewports=[]},HX.CascadeShadowMapRenderer.prototype={setNumCascades:function(t){this._numCascades!=t&&(this._numCascades=t,
this._invalidateShadowMap(),this._initSplitRatios(),this._initCameras(),this._casterCollector=new HX.CascadeShadowCasterCollector(t))},setShadowMapSize:function(t){this._setShadowMapSize!=t&&(this._setShadowMapSize=t,this._invalidateShadowMap())},render:function(t,e){this._shadowMapInvalid&&this._initShadowMap(),this._inverseLightMatrix.inverseAffineOf(this._light.getWorldMatrix()),this._updateCollectorCamera(t),this._updateSplitDistances(t),this._updateCullPlanes(t),this._collectShadowCasters(e),this._updateCascadeCameras(t,this._casterCollector.getBounds()),HX.pushRenderTarget(this._fbo);var i;-1===HX.MaterialPass.SHADOW_MAP_PASS?(HX.clear(HX.GL.DEPTH_BUFFER_BIT),i=HX.MaterialPass.GEOMETRY_COLOR_PASS):(HX.setClearColor(HX.Color.WHITE),HX.clear(),i=HX.MaterialPass.SHADOW_MAP_PASS);for(var n=0;n<this._numCascades;++n){var r=this._viewports[n];HX.GL.viewport(r.x,r.y,r.width,r.height),HX.RenderUtils.renderPass(this,i,this._casterCollector.getRenderList(n))}HX.popRenderTarget()},_updateCollectorCamera:function(t){var e=t.getFrustum()._corners,i=new HX.Float4,n=new HX.Float4,r=new HX.Float4;this._inverseLightMatrix.transformPointTo(e[0],i),n.copyFrom(i);for(var a=1;8>a;++a)this._inverseLightMatrix.transformPointTo(e[a],r),i.minimize(r),n.maximize(r);this._minZ=i.z,this._collectorCamera.getTransformationMatrix().copyFrom(this._light.getWorldMatrix()),this._collectorCamera._invalidateWorldTransformationMatrix(),this._collectorCamera.setBounds(i.x,n.x+1,n.y+1,i.y),this._collectorCamera._setRenderTargetResolution(this._shadowMap._width,this._shadowMap._height)},_updateSplitDistances:function(t){for(var e=t.nearDistance,i=t.farDistance-e,n=0;n<this._numCascades;++n)this._splitDistances[n]=-(e+this._splitRatios[n]*i)},_updateCascadeCameras:function(t,e){this._localBounds.transformFrom(e,this._inverseLightMatrix);for(var i=this._localBounds.getMinimum(),n=this._localBounds.getMaximum(),r=1,a=new HX.Float4,s=new HX.Float4,o=new HX.Float4,h=new HX.Float4,_=t.getFrustum().getCorners(),l=0;l<this._numCascades;++l){var c=this._splitRatios[l],u=this._shadowMapCameras[l];u.nearDistance=-n.z,u.getTransformationMatrix().copyFrom(this._light.getWorldMatrix()),u._invalidateWorldTransformationMatrix();for(var m=0;4>m;++m){var f=_[m],d=_[m+4];s.x=f.x+(d.x-f.x)*c,s.y=f.y+(d.y-f.y)*c,s.z=f.z+(d.z-f.z)*c,this._inverseLightMatrix.transformPointTo(f,a),this._inverseLightMatrix.transformPointTo(s,s),0==m?(o.copyFrom(a),h.copyFrom(a)):(o.minimize(a),h.maximize(a)),o.minimize(s),h.maximize(s)}o.z=Math.max(this._minZ,o.z);var p=Math.max(o.x,i.x),X=Math.min(h.x,n.x),H=Math.max(o.y,i.y),g=Math.min(h.y,n.y),x=X-p,S=g-H;x=Math.ceil(x/r)*r,S=Math.ceil(S/r)*r,x=Math.max(x,r),S=Math.max(S,r);var E=this._shadowMap._width/x*.5,v=this._shadowMap._height/S*.5;p=Math.floor(p*E)/E,H=Math.floor(H*v)/v,X=p+x,g=H+S;var T=0;u.setBounds(p-T,X+T,g+T,H-T),u.farDistance=-o.z,u._setRenderTargetResolution(this._shadowMap._width,this._shadowMap._height),this._shadowMatrices[l].product(this._transformToUV[l],u.getViewProjectionMatrix())}},_updateCullPlanes:function(t){for(var e=this._collectorCamera.getFrustum(),i=e._planes,n=0;4>n;++n)this._cullPlanes[n]=i[n];this._numCullPlanes=4,e=t.getFrustum(),i=e._planes;for(var r=this._light.direction,a=0;6>a;++a){var s=i[a];HX.dot3(s,r)<-.001&&(this._cullPlanes[this._numCullPlanes++]=s)}},_collectShadowCasters:function(t){this._casterCollector.setCullPlanes(this._cullPlanes,this._numCullPlanes),this._casterCollector.setRenderCameras(this._shadowMapCameras),this._casterCollector.collect(this._collectorCamera,t)},getSplitDistances:function(){return this._splitDistances},getShadowMatrix:function(t){return this._shadowMatrices[t]},dispose:function(){HX.Renderer.call.dispose(this),this._depthBuffer&&(this._depthBuffer.dispose(),this._depthBuffer=null),this._shadowMap.dispose(),this._shadowMap=null},_invalidateShadowMap:function(){this._shadowMapInvalid=!0},_initShadowMap:function(){var t=this._numCascades>1?2:1,e=Math.ceil(this._numCascades/2),i=this._shadowMapSize*t,n=this._shadowMapSize*e;HX.EXT_DEPTH_TEXTURE?(this._shadowMap.initEmpty(i,n,HX.GL.DEPTH_STENCIL,HX.EXT_DEPTH_TEXTURE.UNSIGNED_INT_24_8_WEBGL),this._fbo||(this._fbo=new HX.FrameBuffer(null,this._shadowMap))):(this._shadowMap.initEmpty(i,n,HX.GL.RGBA,HX.GL.UNSIGNED_BYTE),this._depthBuffer||(this._depthBuffer=new HX.ReadOnlyDepthBuffer),this._fbo||(this._fbo=new HX.FrameBuffer(this._shadowMap,this._depthBuffer)),this._depthBuffer.init(i,n)),this._fbo.init(),this._shadowMapInvalid=!1,this._viewports=[],this._viewports.push(new HX.Rect(0,0,this._shadowMapSize,this._shadowMapSize)),this._viewports.push(new HX.Rect(this._shadowMapSize,0,this._shadowMapSize,this._shadowMapSize)),this._viewports.push(new HX.Rect(0,this._shadowMapSize,this._shadowMapSize,this._shadowMapSize)),this._viewports.push(new HX.Rect(this._shadowMapSize,this._shadowMapSize,this._shadowMapSize,this._shadowMapSize)),this._initViewportMatrices(1/t,1/e)},_initSplitRatios:function(){var t=1;this._splitRatios=[],this._splitDistances=[0,0,0,0];for(var e=this._numCascades-1;e>=0;--e)this._splitRatios[e]=t,this._splitDistances[e]=0,t*=.4},_initCameras:function(){this._shadowMapCameras=[];for(var t=this._numCascades-1;t>=0;--t)this._shadowMapCameras[t]=new HX.OrthographicOffCenterCamera},_initViewportMatrices:function(t,e){for(var i=0;4>i;++i)this._transformToUV[i].scaleMatrix(.5,.5,.5),this._transformToUV[i].appendTranslation(.5,.5,.5),this._transformToUV[i].appendScale(t,e,1);this._transformToUV[1].appendTranslation(.5,0,0),this._transformToUV[2].appendTranslation(0,.5,0),this._transformToUV[3].appendTranslation(.5,.5,0)}},HX.BlinnPhongSimpleLightingModel={getGLSL:function(){return HX.ShaderLibrary.get("lighting_blinn_phong.glsl")+"\n\n"}},HX.BlinnPhongFullLightingModel={getGLSL:function(){return HX.ShaderLibrary.get("lighting_blinn_phong.glsl",{VISIBILITY:1})+"\n\n"}},HX.GGXFullLightingModel={getGLSL:function(){return HX.ShaderLibrary.get("lighting_ggx.glsl",{VISIBILITY:1})+"\n\n"}},HX.GGXLightingModel={getGLSL:function(){return HX.ShaderLibrary.get("lighting_ggx.glsl")+"\n\n"}},HX.RenderCollector=function(){HX.SceneVisitor.call(this),this._opaquePasses=new Array(HX.MaterialPass.NUM_PASS_TYPES),this._transparentPasses=new Array(HX.MaterialPass.NUM_PASS_TYPES),this._camera=null,this._cameraZAxis=new HX.Float4,this._frustum=null,this._lights=null,this._shadowCasters=null,this._effects=null,this._globalSpecularProbe=null,this._globalIrradianceProbe=null},HX.RenderCollector.prototype=Object.create(HX.SceneVisitor.prototype),HX.RenderCollector.prototype.getOpaqueRenderList=function(t){return this._opaquePasses[t]},HX.RenderCollector.prototype.getTransparentRenderList=function(t){return this._transparentPasses[t]},HX.RenderCollector.prototype.getLights=function(){return this._lights},HX.RenderCollector.prototype.getShadowCasters=function(){return this._shadowCasters},HX.RenderCollector.prototype.getEffects=function(){return this._effects},HX.RenderCollector.prototype.getGlobalSpecularProbe=function(){return this._globalSpecularProbe},HX.RenderCollector.prototype.getGlobalIrradianceProbe=function(){return this._globalIrradianceProbe},HX.RenderCollector.prototype.collect=function(t,e){this._camera=t,t.getWorldMatrix().getColumn(2,this._cameraZAxis),this._frustum=t.getFrustum(),this._nearPlane=this._frustum._planes[HX.Frustum.PLANE_NEAR],this._reset(),e.acceptVisitor(this),this._opaquePasses[HX.MaterialPass.GEOMETRY_PASS].sort(this._sortOpaques),this._opaquePasses[HX.MaterialPass.POST_PASS].sort(this._sortOpaques),this._transparentPasses[HX.MaterialPass.GEOMETRY_PASS].sort(this._sortTransparents),this._transparentPasses[HX.MaterialPass.POST_PASS].sort(this._sortTransparents),HX.EXT_DRAW_BUFFERS||(this._copyLegacyPasses(this._opaquePasses),this._copyLegacyPasses(this._transparentPasses)),this._lights.sort(this._sortLights);var i=this._camera._effects;if(i)for(var n=i.length,r=0;n>r;++r)this._effects.push(i[r])},HX.RenderCollector.prototype.qualifies=function(t){return t.getWorldBounds().intersectsConvexSolid(this._frustum._planes,6)},HX.RenderCollector.prototype.visitScene=function(t){var e=t._skybox;e&&(this.visitModelInstance(e._modelInstance,t._rootNode.getWorldMatrix(),t._rootNode.getWorldBounds()),this._globalSpecularProbe=e.getGlobalSpecularProbe(),this._globalIrradianceProbe=e.getGlobalIrradianceProbe())},HX.RenderCollector.prototype.visitEffects=function(t,e){if(e!==this._camera)for(var i=t.length,n=0;i>n;++n)this._effects.push(t[n])},HX.RenderCollector.prototype.visitModelInstance=function(t,e,i){for(var n=t.numMeshInstances(),r=0;n>r;++r)for(var a=t.getMeshInstance(r),s=a.material,o=0;o<HX.MaterialPass.NUM_PASS_TYPES;++o){var h=s.getPass(o);if(h&&h._enabled){var _=s._transparencyMode===HX.TransparencyMode.OPAQUE?this._opaquePasses:this._transparentPasses,l=new HX.RenderItem;l.material=s,l.pass=h,l.meshInstance=a,l.renderOrderHint=i._centerX*this._cameraZAxis.x+i._centerY*this._cameraZAxis.y+i._centerZ*this._cameraZAxis.z,l.worldMatrix=e,l.camera=this._camera,_[o].push(l)}}},HX.RenderCollector.prototype.visitLight=function(t){this._lights.push(t),t._castShadows&&this._shadowCasters.push(t._shadowMapRenderer);var e=t.getWorldBounds(),i=this._nearPlane;t._renderOrderHint=e._centerX*i.x+e._centerY*i.y+e._centerZ*i.z+i.w-e.getRadius()},HX.RenderCollector.prototype._reset=function(){for(var t=0;t<HX.MaterialPass.NUM_PASS_TYPES;++t)this._opaquePasses[t]=[];for(var t=0;t<HX.MaterialPass.NUM_PASS_TYPES;++t)this._transparentPasses[t]=[];this._lights=[],this._shadowCasters=[],this._effects=[],this._globalIrradianceProbe=null,this._globalSpecularProbe=null},HX.RenderCollector.prototype._sortTransparents=function(t,e){return e.renderOrderHint-t.renderOrderHint},HX.RenderCollector.prototype._sortOpaques=function(t,e){var i;return i=t.material._renderOrder-e.material._renderOrder,0!==i?i:(i=t.pass._shader._renderOrderHint-e.pass._shader._renderOrderHint,0!==i?i:(i=t.material._renderOrderHint-e.material._renderOrderHint,0!==i?i:t.renderOrderHint-e.renderOrderHint))},HX.RenderCollector.prototype._sortLights=function(t,e){return t._type==e._type?t._castShadows==e._castShadows?t._renderOrderHint-e._renderOrderHint:t._castShadows?1:-1:t._type-e._type},HX.RenderCollector.prototype._copyLegacyPasses=function(t){for(var e=t[HX.MaterialPass.GEOMETRY_COLOR_PASS],i=t[HX.MaterialPass.GEOMETRY_NORMAL_PASS],n=t[HX.MaterialPass.GEOMETRY_SPECULAR_PASS],r=e.length,a=0,s=0,o=0;r>o;++o){var h=e[o],_=(h.meshInstance,h.material);if(_.hasPass(HX.MaterialPass.GEOMETRY_NORMAL_PASS)){var l=new HX.RenderItem;l.pass=_.getPass(HX.MaterialPass.GEOMETRY_NORMAL_PASS),l.material=h.material,l.renderOrderHint=h.renderOrderHint,l.meshInstance=h.meshInstance,l.worldMatrix=h.worldMatrix,l.camera=this._camera,i[a++]=l}if(_.hasPass(HX.MaterialPass.GEOMETRY_SPECULAR_PASS)){var c=new HX.RenderItem;c.pass=_.getPass(HX.MaterialPass.GEOMETRY_SPECULAR_PASS),c.material=h.material,c.renderOrderHint=h.renderOrderHint,c.meshInstance=h.meshInstance,c.worldMatrix=h.worldMatrix,c.camera=this._camera,n[s++]=c}}},HX.DebugRenderMode={DEBUG_NONE:0,DEBUG_COLOR:1,DEBUG_NORMALS:2,DEBUG_METALLICNESS:3,DEBUG_SPECULAR_NORMAL_REFLECTION:4,DEBUG_ROUGHNESS:5,DEBUG_DEPTH:6,DEBUG_LIGHT_ACCUM:7,DEBUG_AO:8,DEBUG_SSR:9},HX.Renderer=function(){this._width=0,this._height=0,this._copyTexture=new HX.CopyChannelsShader,this._copyTextureToScreen=new HX.CopyChannelsShader("xyzw",!0),this._copyXChannel=new HX.CopyChannelsShader("x"),this._copyYChannel=new HX.CopyChannelsShader("y"),this._copyZChannel=new HX.CopyChannelsShader("z"),this._copyWChannel=new HX.CopyChannelsShader("w"),this._debugDepth=new HX.DebugDepthShader,this._debugNormals=new HX.DebugNormalsShader,this._applyAlphaTransparency=new HX.CopyWithSeparateAlpha,this._applyGamma=new HX.ApplyGammaShader,this._gammaApplied=!1,this._linearizeDepthShader=new HX.LinearizeDepthShader,this._renderCollector=new HX.RenderCollector,this._gbufferFBO=null,this._linearDepthFBO=null,this._depthBuffer=null,this._aoEffect=null,this._aoTexture=null,this._ssrEffect=null,this._createGBuffer(),this._hdrBack=new HX.Renderer.HDRBuffers(this._depthBuffer),this._hdrFront=new HX.Renderer.HDRBuffers(this._depthBuffer),this._debugMode=HX.DebugRenderMode.DEBUG_NONE,this._camera=null},HX.Renderer.HDRBuffers=function(t){this.texture=new HX.Texture2D,this.texture.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this.texture.setWrapMode(HX.TextureWrapMode.CLAMP),this.fbo=new HX.FrameBuffer(this.texture),this.fboDepth=new HX.FrameBuffer(this.texture,t)},HX.Renderer.HDRBuffers.prototype={dispose:function(){this.texture.dispose(),this.fbo.dispose(),this.fboDepth.dispose()},resize:function(t,e){this.texture.initEmpty(t,e,HX.GL.RGBA,HX.HDR_FORMAT),this.fbo.init(),this.fboDepth.init()}},HX.Renderer.prototype={get debugMode(){return this._debugMode},set debugMode(t){this._debugMode=t},get ambientOcclusion(){return this._aoEffect},set ambientOcclusion(t){this._aoEffect=t,this._aoTexture=this._aoEffect?this._aoEffect.getAOTexture():null},get localReflections(){return this._ssrEffect},set localReflections(t){this._ssrEffect=t,this._ssrTexture=this._ssrEffect?this._ssrEffect.getSSRTexture():null},render:function(t,e,i){var n=HX._renderTargetStack.length;if(this._gammaApplied=!1,this._camera=t,this._scene=e,this._updateSize(),HX.GL.enable(HX.GL.DEPTH_TEST),HX.GL.depthFunc(HX.GL.LESS),t._setRenderTargetResolution(this._width,this._height),this._renderCollector.collect(t,e),this._renderShadowCasters(),HX.pushRenderTarget(this._hdrFront.fboDepth),this._renderOpaques(),this._renderPostPass(HX.MaterialPass.POST_LIGHT_PASS),this._renderPostPass(HX.MaterialPass.POST_PASS,!0),this._renderTransparents(),HX.popRenderTarget(),HX.GL.disable(HX.GL.DEPTH_TEST),this._renderToScreen(i),HX._renderTargetStack.length>n)throw"Unpopped render targets!";if(HX._renderTargetStack.length<n)throw"Overpopped render targets!"},_renderShadowCasters:function(){-1===HX.MaterialPass.SHADOW_MAP_PASS&&HX.GL.colorMask(!1,!1,!1,!1);for(var t=this._renderCollector.getShadowCasters(),e=t.length,i=0;e>i;++i)t[i].render(this._camera,this._scene);-1===HX.MaterialPass.SHADOW_MAP_PASS&&HX.GL.colorMask(!0,!0,!0,!0)},_renderOpaques:function(){HX.GL.enable(HX.GL.STENCIL_TEST),HX.GL.stencilOp(HX.GL.REPLACE,HX.GL.KEEP,HX.GL.REPLACE),HX.setClearColor(HX.Color.BLACK),this._renderToGBuffer(),HX.GL.disable(HX.GL.STENCIL_TEST),this._linearizeDepth(),null!==this._aoEffect&&this._aoEffect.render(this,0),HX.GL.enable(HX.GL.STENCIL_TEST),HX.GL.stencilOp(HX.GL.KEEP,HX.GL.KEEP,HX.GL.KEEP);var t=1,e=t<<1;HX.GL.stencilFunc(HX.GL.EQUAL,e,255),this._renderLightAccumulation(),HX.GL.disable(HX.GL.STENCIL_TEST)},_renderTransparents:function(){for(var t=[],e=HX.EXT_DRAW_BUFFERS?[HX.MaterialPass.GEOMETRY_PASS]:[HX.MaterialPass.GEOMETRY_COLOR_PASS,HX.MaterialPass.GEOMETRY_NORMAL_PASS,HX.MaterialPass.GEOMETRY_SPECULAR_PASS],i=e.length,n=0;i>n;++n)t[n]=this._renderCollector.getTransparentRenderList(e[n]);var r=t[0],a=r.length;HX.GL.enable(HX.GL.STENCIL_TEST);for(var s=0;a>s;++s){var o=r[s].material,h=o._transparencyMode,_=o._lightingModelID<<1|h;HX.GL.stencilFunc(HX.GL.ALWAYS,_,255),HX.GL.stencilOp(HX.GL.REPLACE,HX.GL.KEEP,HX.GL.REPLACE),HX.EXT_DRAW_BUFFERS&&HX.pushRenderTarget(this._gbufferFBO);for(var n=0;i>n;++n){HX.EXT_DRAW_BUFFERS||HX.pushRenderTarget(this._gbufferSingleFBOs[n]);var l=e[n],c=t[n][s],u=c.meshInstance,m=c.pass;m._shader.updateRenderState(c.worldMatrix,c.camera),m.updateRenderState(this),u.updateRenderState(l),HX.drawElements(m._elementType,u._mesh.numIndices(),0),HX.EXT_DRAW_BUFFERS||HX.popRenderTarget()}switch(HX.EXT_DRAW_BUFFERS&&HX.popRenderTarget(),HX.GL.stencilFunc(HX.GL.EQUAL,_,255),HX.GL.stencilOp(HX.GL.KEEP,HX.GL.KEEP,HX.GL.KEEP),this._linearizeDepth(),HX.pushRenderTarget(this._hdrBack.fboDepth),this._renderLightAccumulation(),HX.popRenderTarget(),h){case HX.TransparencyMode.ADDITIVE:HX.setBlendState(HX.BlendState.ADD),this._copyTexture.execute(HX.DEFAULT_RECT_MESH,this._hdrBack.texture);break;case HX.TransparencyMode.ALPHA:HX.setBlendState(HX.BlendState.ALPHA),this._applyAlphaTransparency.execute(HX.DEFAULT_RECT_MESH,this._hdrBack.texture,this._gbuffer[0])}}HX.GL.disable(HX.GL.STENCIL_TEST)},_renderToGBuffer:function(){HX.EXT_DRAW_BUFFERS?this._renderToGBufferMRT():this._renderToGBufferMultiPass()},_renderToGBufferMRT:function(){HX.pushRenderTarget(this._gbufferFBO),HX.clear(),this._renderPass(HX.MaterialPass.GEOMETRY_PASS),HX.popRenderTarget()},_renderToGBufferMultiPass:function(){for(var t=HX.GL.COLOR_BUFFER_BIT|HX.GL.DEPTH_BUFFER_BIT|HX.GL.STENCIL_BUFFER_BIT,e=[HX.MaterialPass.GEOMETRY_COLOR_PASS,HX.MaterialPass.GEOMETRY_NORMAL_PASS,HX.MaterialPass.GEOMETRY_SPECULAR_PASS],i=0;3>i;++i)HX.pushRenderTarget(this._gbufferSingleFBOs[i]),HX.clear(t),this._renderPass(e[i]),0==i&&(t=HX.GL.COLOR_BUFFER_BIT,HX.GL.depthFunc(HX.GL.EQUAL)),HX.popRenderTarget()},_linearizeDepth:function(){HX.GL.disable(HX.GL.DEPTH_TEST),HX.pushRenderTarget(this._linearDepthFBO),this._linearizeDepthShader.execute(HX.DEFAULT_RECT_MESH,HX.EXT_DEPTH_TEXTURE?this._depthBuffer:this._gbuffer[1],this._camera),HX.popRenderTarget(this._linearDepthFBO)},_renderEffect:function(t,e){this._gammaApplied=this._gammaApplied||t._outputsGamma,t.render(this,e)},_renderToScreen:function(t){switch(HX.setBlendState(null),this._debugMode){case HX.DebugRenderMode.DEBUG_COLOR:this._copyTexture.execute(HX.DEFAULT_RECT_MESH,this._gbuffer[0]);break;case HX.DebugRenderMode.DEBUG_NORMALS:this._debugNormals.execute(HX.DEFAULT_RECT_MESH,this._gbuffer[1]);break;case HX.DebugRenderMode.DEBUG_METALLICNESS:this._copyXChannel.execute(HX.DEFAULT_RECT_MESH,this._gbuffer[2]);break;case HX.DebugRenderMode.DEBUG_SPECULAR_NORMAL_REFLECTION:this._copyYChannel.execute(HX.DEFAULT_RECT_MESH,this._gbuffer[2]);break;case HX.DebugRenderMode.DEBUG_ROUGHNESS:this._copyZChannel.execute(HX.DEFAULT_RECT_MESH,this._gbuffer[2]);break;case HX.DebugRenderMode.DEBUG_DEPTH:this._debugDepth.execute(HX.DEFAULT_RECT_MESH,this._gbuffer[3]);break;case HX.DebugRenderMode.DEBUG_LIGHT_ACCUM:this._applyGamma.execute(HX.DEFAULT_RECT_MESH,this._hdrFront.texture);break;case HX.DebugRenderMode.DEBUG_AO:this._aoEffect&&this._copyWChannel.execute(HX.DEFAULT_RECT_MESH,this._aoTexture);break;case HX.DebugRenderMode.DEBUG_SSR:this._ssrEffect&&this._copyTexture.execute(HX.DEFAULT_RECT_MESH,this._ssrTexture);break;default:this._composite(t)}},_composite:function(t){HX.pushRenderTarget(this._hdrFront.fbo),this._renderEffects(t,this._renderCollector._effects),HX.popRenderTarget(),this._gammaApplied?this._copyTextureToScreen.execute(HX.DEFAULT_RECT_MESH,this._hdrFront.texture):this._applyGamma.execute(HX.DEFAULT_RECT_MESH,this._hdrFront.texture)},_renderLightAccumulation:function(){HX.GL.disable(HX.GL.DEPTH_TEST),HX.GL.depthMask(!1),HX.clear(HX.GL.COLOR_BUFFER_BIT),this._renderDirectLights(),this._renderGlobalIllumination(),HX.GL.depthMask(!0)},_renderDirectLights:function(){for(var t=this._renderCollector.getLights(),e=t.length,i=0;e>i;)i=t[i].renderBatch(t,i,renderer)},_renderGlobalIllumination:function(){this._renderCollector._globalIrradianceProbe&&this._renderCollector._globalIrradianceProbe.render(this),null!=this._ssrEffect&&(this._ssrEffect.sourceTexture=HX.getCurrentRenderTarget()._colorTextures[0],this._ssrEffect.render(this,0)),this._renderCollector._globalSpecularProbe?this._renderCollector._globalSpecularProbe.render(this):this._ssrEffect&&(HX.setBlendState(HX.BlendState.ADD_WITH_ALPHA),this._copyTexture.execute(HX.DEFAULT_RECT_MESH,this._ssrTexture))},_renderPass:function(t,e){e=e||this._renderCollector.getOpaqueRenderList(t),HX.RenderUtils.renderPass(this,t,e)},_copySource:function(){HX.pushRenderTarget(this._hdrBack.fbo),HX.setBlendState(null),HX.GL.disable(HX.GL.DEPTH_TEST),this._copyTexture.execute(HX.DEFAULT_RECT_MESH,this._hdrFront.texture),HX.popRenderTarget()},_renderPostPass:function(t,e){HX.GL.disable(HX.GL.STENCIL_TEST);var i=this._renderCollector.getOpaqueRenderList(t),n=this._renderCollector.getTransparentRenderList(t);(0!==i.length||0!==n.length)&&(e&&this._copySource(),HX.GL.enable(HX.GL.DEPTH_TEST),HX.GL.depthFunc(HX.GL.LEQUAL),this._renderPass(t,this._renderCollector.getOpaqueRenderList(t)),this._renderPass(t,this._renderCollector.getTransparentRenderList(t)))},_renderEffects:function(t,e){if(e&&0!=e.length){HX.GL.disable(HX.GL.DEPTH_TEST);for(var i=e.length,n=0;i>n;++n){var r=e[n];r.isSupported()&&this._renderEffect(r,t)}}},_createGBuffer:function(){HX.EXT_DEPTH_TEXTURE?(this._depthBuffer=new HX.Texture2D,this._depthBuffer.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._depthBuffer.setWrapMode(HX.TextureWrapMode.CLAMP)):this._depthBuffer=new HX.ReadOnlyDepthBuffer,this._gbuffer=[];for(var t=0;4>t;++t)this._gbuffer[t]=new HX.Texture2D,this._gbuffer[t].setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._gbuffer[t].setWrapMode(HX.TextureWrapMode.CLAMP);this._gbufferSingleFBOs=[];for(var t=0;3>t;++t)this._gbufferSingleFBOs[t]=new HX.FrameBuffer([this._gbuffer[t]],this._depthBuffer);this._createGBufferFBO(),this._linearDepthFBO=new HX.FrameBuffer(this._gbuffer[3],null)},_createGBufferFBO:function(){if(HX.EXT_DRAW_BUFFERS){var t=[this._gbuffer[0],this._gbuffer[1],this._gbuffer[2]];this._gbufferFBO=new HX.FrameBuffer(t,this._depthBuffer)}},_updateGBuffer:function(t,e){HX.EXT_DEPTH_TEXTURE?this._depthBuffer.initEmpty(t,e,HX.GL.DEPTH_STENCIL,HX.EXT_DEPTH_TEXTURE.UNSIGNED_INT_24_8_WEBGL):this._depthBuffer.init(t,e);for(var i=0;i<this._gbuffer.length;++i)this._gbuffer[i].initEmpty(t,e,HX.GL.RGBA,HX.GL.UNSIGNED_BYTE);for(var i=0;i<this._gbufferSingleFBOs.length;++i)this._gbufferSingleFBOs[i].init();this._updateGBufferFBO(),this._linearDepthFBO.init()},_updateGBufferFBO:function(){HX.EXT_DRAW_BUFFERS&&this._gbufferFBO.init()},dispose:function(){this._applyGamma.dispose(),this._copyTexture.dispose(),this._copyXChannel.dispose(),this._copyYChannel.dispose(),this._copyZChannel.dispose(),this._copyWChannel.dispose(),this._hdrBack.dispose(),this._hdrFront.dispose();for(var t=0;t<this._gbuffer.length;++t)this._gbuffer[t].dispose();for(var t=0;t<this._gbufferSingleFBOs.length;++t)this._gbufferSingleFBOs[t].dispose();this._gbufferFBO&&this._gbufferFBO.dispose()},_swapHDRFrontAndBack:function(){var t=this._hdrBack;this._hdrBack=this._hdrFront,this._hdrFront=t,HX.popRenderTarget(),HX.pushRenderTarget(this._hdrFront.fbo)},_updateSize:function(){(this._width!==HX.TARGET_CANVAS.clientWidth||this._height!==HX.TARGET_CANVAS.clientHeight)&&(this._width=HX.TARGET_CANVAS.clientWidth,this._height=HX.TARGET_CANVAS.clientHeight,this._updateGBuffer(this._width,this._height),this._hdrBack.resize(this._width,this._height),this._hdrFront.resize(this._width,this._height))}},HX.RenderUtils={renderPass:function(t,e,i,n,r){for(var a=i.length,s=null,o=null,r=r||0,h=r;a>h;++h){var _=i[h],l=_.material;if(void 0!==n&&l._transparencyMode!==n)return h;var c=l._lightingModelID<<1|l._transparencyMode;HX.GL.stencilFunc(HX.GL.ALWAYS,c,255);var u=_.meshInstance,m=_.pass,f=m._shader;f.updateRenderState(_.worldMatrix,_.camera),m!==s&&(m.updateRenderState(t),s=m,o=null),o!=u._mesh&&(u.updateRenderState(e),o=u._mesh),HX.drawElements(m._elementType,u._mesh.numIndices(),0)}return HX.setBlendState(null),a}},HX.CustomCopyShader=function(t){HX.Shader.call(this),this.init(HX.ShaderLibrary.get("copy_vertex.glsl"),t),this._textureLocation=HX.GL.getUniformLocation(this._program,"sampler"),this._positionAttributeLocation=HX.GL.getAttribLocation(this._program,"hx_position"),this._texCoordAttributeLocation=HX.GL.getAttribLocation(this._program,"hx_texCoord"),HX.GL.useProgram(this._program),HX.GL.uniform1i(this._textureLocation,0)},HX.CustomCopyShader.prototype=Object.create(HX.Shader.prototype),HX.CustomCopyShader.prototype.execute=function(t,e){HX.GL.disable(HX.GL.DEPTH_TEST),HX.setCullMode(HX.CullMode.NONE),t._vertexBuffer.bind(),t._indexBuffer.bind(),this.updateRenderState(null,camera),e.bind(0),HX.GL.vertexAttribPointer(this._positionAttributeLocation,2,HX.GL.FLOAT,!1,16,0),HX.GL.vertexAttribPointer(this._texCoordAttributeLocation,2,HX.GL.FLOAT,!1,16,8),HX.enableAttributes(2),HX.drawElements(HX.GL.TRIANGLES,6,0)},HX.CopyChannelsShader=function(t,e){t=t||"xyzw",e=void 0===e?!0:e;var i="#define extractChannels(src) ((src)."+t+")\n";e&&(i+="#define COPY_ALPHA\n"),HX.CustomCopyShader.call(this,i+HX.ShaderLibrary.get("copy_fragment.glsl"))},HX.CopyChannelsShader.prototype=Object.create(HX.CustomCopyShader.prototype),HX.CopyWithSeparateAlpha=function(){HX.Shader.call(this),this.init(HX.ShaderLibrary.get("copy_vertex.glsl"),HX.ShaderLibrary.get("copy_with_separate_alpha_fragment.glsl")),this._textureLocation=HX.GL.getUniformLocation(this._program,"sampler"),this._alphaLocation=HX.GL.getUniformLocation(this._program,"alphaSource"),this._positionAttributeLocation=HX.GL.getAttribLocation(this._program,"hx_position"),this._texCoordAttributeLocation=HX.GL.getAttribLocation(this._program,"hx_texCoord"),HX.GL.useProgram(this._program),HX.GL.uniform1i(this._textureLocation,0),HX.GL.uniform1i(this._alphaLocation,1)},HX.CopyWithSeparateAlpha.prototype=Object.create(HX.Shader.prototype),HX.CopyWithSeparateAlpha.prototype.execute=function(t,e,i){HX.GL.disable(HX.GL.DEPTH_TEST),HX.setCullMode(HX.CullMode.NONE),t._vertexBuffer.bind(),t._indexBuffer.bind(),this.updateRenderState(),e.bind(0),i.bind(1),HX.GL.vertexAttribPointer(this._positionAttributeLocation,2,HX.GL.FLOAT,!1,16,0),HX.GL.vertexAttribPointer(this._texCoordAttributeLocation,2,HX.GL.FLOAT,!1,16,8),HX.enableAttributes(2),HX.drawElements(HX.GL.TRIANGLES,6,0)},HX.DebugDepthShader=function(){HX.CustomCopyShader.call(this,HX.ShaderLibrary.get("debug_depth_fragment.glsl"))},HX.DebugDepthShader.prototype=Object.create(HX.CustomCopyShader.prototype),HX.ApplyGammaShader=function(){HX.CustomCopyShader.call(this,HX.ShaderLibrary.get("copy_to_gamma_fragment.glsl"))},HX.ApplyGammaShader.prototype=Object.create(HX.CustomCopyShader.prototype),HX.DebugNormalsShader=function(){HX.CustomCopyShader.call(this,HX.ShaderLibrary.get("debug_normals_fragment.glsl"))},HX.DebugNormalsShader.prototype=Object.create(HX.CustomCopyShader.prototype),HX.LinearizeDepthShader=function(){HX.Shader.call(this),this.init(HX.ShaderLibrary.get("linearize_depth_vertex.glsl"),HX.ShaderLibrary.get("linearize_depth_fragment.glsl")),HX.GL.useProgram(this._program),this._textureLocation=HX.GL.getUniformLocation(this._program,"sampler"),this._rcpFrustumRangeLocation=HX.GL.getUniformLocation(this._program,"hx_rcpCameraFrustumRange"),this._projectionLocation=HX.GL.getUniformLocation(this._program,"hx_projectionMatrix"),this._positionAttributeLocation=HX.GL.getAttribLocation(this._program,"hx_position"),this._texCoordAttributeLocation=HX.GL.getAttribLocation(this._program,"hx_texCoord"),HX.GL.uniform1i(this._textureLocation,0)},HX.LinearizeDepthShader.prototype=Object.create(HX.Shader.prototype),HX.LinearizeDepthShader.prototype.execute=function(t,e,i){HX.GL.disable(HX.GL.DEPTH_TEST),HX.setCullMode(HX.CullMode.NONE),HX.setBlendState(null),t._vertexBuffer.bind(),t._indexBuffer.bind(),this.updateRenderState(null,i),e.bind(0),HX.GL.vertexAttribPointer(this._positionAttributeLocation,2,HX.GL.FLOAT,!1,16,0),HX.GL.vertexAttribPointer(this._texCoordAttributeLocation,2,HX.GL.FLOAT,!1,16,8),HX.GL.uniform1f(this._rcpFrustumRangeLocation,1/(i.nearDistance-i.farDistance)),HX.GL.uniformMatrix4fv(this._projectionLocation,!1,i.getProjectionMatrix()._m),HX.enableAttributes(2),HX.drawElements(HX.GL.TRIANGLES,6,0)},HX.BloomBlurPass=function(t,e,i,n,r,a){this._initWeights(t,e);var s={SOURCE_RES:"vec2(float("+r+"), float("+a+"))",RADIUS:"float("+Math.ceil(.5*this._kernelSize)+")",DIRECTION:"vec2("+i+", "+n+")",NUM_SAMPLES:this._kernelSize},o=HX.ShaderLibrary.get("bloom_blur_vertex.glsl",s),h=HX.ShaderLibrary.get("bloom_blur_fragment.glsl",s);HX.EffectPass.call(this,o,h),this.setUniformArray("gaussianWeights",new Float32Array(this._weights))},HX.BloomBlurPass.prototype=Object.create(HX.EffectPass.prototype),HX.BloomBlurPass.prototype._initWeights=function(t,e){this._kernelSize=0,this._weights=[];for(var i=[],n=0;n<t.length;++n){var r=Math.ceil(.5*t[n]),a=Math.ceil(t[n]);a>this._kernelSize&&(this._kernelSize=a),i[n]=HX.CenteredGaussianCurve.fromRadius(r)}for(var r=Math.ceil(.5*this._kernelSize),s=0;s<this._kernelSize;++s){this._weights[s]=0;for(var n=0;n<t.length;++n)this._weights[s]+=i[n].getValueAt(s-r)*e[n]}},HX.BloomEffect=function(t,e){HX.Effect.call(this),this._downScale=4,this._targetWidth=-1,this._targetHeight=-1,this._thresholdPass=new HX.EffectPass(null,HX.ShaderLibrary.get("bloom_threshold_fragment.glsl")),this._compositePass=new HX.EffectPass(HX.ShaderLibrary.get("bloom_composite_vertex.glsl"),HX.ShaderLibrary.get("bloom_composite_fragment.glsl")),this._compositePass.blendState=HX.BlendState.ADD,this._thresholdMaps=[],this._smallFBOs=[];for(var i=0;2>i;++i)this._thresholdMaps[i]=new HX.Texture2D,this._thresholdMaps[i].setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._thresholdMaps[i].setWrapMode(HX.TextureWrapMode.CLAMP),this._smallFBOs[i]=new HX.FrameBuffer([this._thresholdMaps[i]]);this._blurSizes=t||[512,256],HX.EXT_HALF_FLOAT_TEXTURES_LINEAR&&HX.EXT_HALF_FLOAT_TEXTURES?(this._weights=e||[.05,.05],this.thresholdLuminance=1):(this._weights=e||[1.5,5],this.thresholdLuminance=.9),this._compositePass.setTexture("bloomTexture",this._thresholdMaps[0])},HX.BloomEffect.prototype=Object.create(HX.Effect.prototype),HX.BloomEffect.prototype._initTextures=function(){for(var t=0;2>t;++t)this._thresholdMaps[t].initEmpty(Math.ceil(this._targetWidth/this._downScale),Math.ceil(this._targetHeight/this._downScale),HX.GL.RGB,HX.HDR_FORMAT),this._smallFBOs[t].init()},HX.BloomEffect.prototype._initBlurPass=function(){for(var t=[],e=[],i=this._blurSizes.length,n=0;i>n;++n)t[n]=this._blurSizes[n]/this._downScale,e[n]=this._blurSizes[n]/this._downScale;var r=this._targetWidth/this._downScale,a=this._targetHeight/this._downScale;this._blurXPass=new HX.BloomBlurPass(t,this._weights,1,0,r,a),this._blurYPass=new HX.BloomBlurPass(e,this._weights,0,1,r,a),this._blurXPass.setTexture("sourceTexture",this._thresholdMaps[0]),this._blurYPass.setTexture("sourceTexture",this._thresholdMaps[1])},HX.BloomEffect.prototype.draw=function(t){(this._renderer._width!=this._targetWidth||this._renderer._height!=this._targetHeight)&&(this._targetWidth=this._renderer._width,this._targetHeight=this._renderer._height,this._initTextures(),this._initBlurPass()),HX.pushRenderTarget(this._smallFBOs[0]),this._drawPass(this._thresholdPass),HX.pushRenderTarget(this._smallFBOs[1]),this._drawPass(this._blurXPass),HX.popRenderTarget(),this._drawPass(this._blurYPass),HX.popRenderTarget(),this._drawPass(this._compositePass)},HX.BloomEffect.prototype.dispose=function(){for(var t=0;2>t;++t)this._smallFBOs[t].dispose(),this._thresholdMaps[t].dispose();this._smallFBOs=null,this._thresholdMaps=null},Object.defineProperty(HX.BloomEffect.prototype,"thresholdLuminance",{get:function(){return this._thresholdLuminance},set:function(t){this._thresholdLuminance=t,this._thresholdPass.setUniform("threshold",t)}}),HX.CopyTexturePass=function(){HX.EffectPass.call(this,null,HX.ShaderLibrary.get("copy_fragment.glsl"))},HX.CopyTexturePass.prototype=Object.create(HX.EffectPass.prototype),HX.CopyTexturePass.prototype.setSourceTexture=function(t){this.setTexture("sampler",t)},HX.FogEffect=function(t,e,i){HX.Effect.call(this),this._fogPass=new HX.EffectPass(null,HX.ShaderLibrary.get("fog_fragment.glsl")),this._fogPass.blendState=HX.BlendState.INV_ALPHA,this.density=void 0===t?.001:t,this.tint=void 0===e?new HX.Color(1,1,1,1):e,this.startDistance=void 0===i?0:i},HX.FogEffect.prototype=Object.create(HX.Effect.prototype),Object.defineProperty(HX.FogEffect.prototype,"density",{get:function(){return this._density},set:function(t){this._density=t,this._fogPass.setUniform("density",t)}}),Object.defineProperty(HX.FogEffect.prototype,"tint",{get:function(){return this._tint},set:function(t){this._tint=t,this._fogPass.setUniform("tint",{x:t.r,y:t.g,z:t.b})}}),
Object.defineProperty(HX.FogEffect.prototype,"startDistance",{get:function(){return this._startDistance},set:function(t){this._startDistance=t,this._fogPass.setUniform("startDistance",t)}}),HX.FogEffect.prototype.draw=function(t){this._drawPass(this._fogPass)},HX.FXAA=function(){HX.Effect.call(this),this._pass=new HX.EffectPass(null,HX.ShaderLibrary.get("fxaa_fragment.glsl")),this._pass.setUniform("edgeThreshold",1/8),this._pass.setUniform("edgeThresholdMin",1/16),this._pass.setUniform("edgeSharpness",4)},HX.FXAA.prototype=Object.create(HX.Effect.prototype),HX.FXAA.prototype.draw=function(t){this._swapHDRBuffers(),this._drawPass(this._pass)},HX.HBAO=function(t,e){t=t||4,e=e||4,t>32&&(t=32),e>32&&(e=32),this._numRays=t,this._strength=1,this._bias=.01,this._fallOffDistance=1,this._radius=.5,this._scale=.5,this._sampleDirTexture=null,this._ditherTexture=null,HX.Effect.call(this),this._aoPass=new HX.EffectPass(HX.ShaderLibrary.get("hbao_vertex.glsl"),HX.ShaderLibrary.get("hbao_fragment.glsl",{NUM_RAYS:t,NUM_SAMPLES_PER_RAY:e})),this._blurPass=new HX.EffectPass(null,HX.ShaderLibrary.get("ao_blur_fragment.glsl")),this._initSampleDirTexture(),this._initDitherTexture(),this._aoPass.setUniform("strengthPerRay",this._strength/this._numRays),this._aoPass.setUniform("rcpFallOffDistance",1/this._fallOffDistance),this._aoPass.setUniform("halfSampleRadius",.5*this._radius),this._aoPass.setUniform("bias",this._bias),this._aoPass.setTexture("ditherTexture",this._ditherTexture),this._aoPass.setTexture("sampleDirTexture",this._sampleDirTexture),this._sourceTextureSlot=this._blurPass.getTextureSlot("source"),this._aoTexture=new HX.Texture2D,this._aoTexture.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._aoTexture.setWrapMode(HX.TextureWrapMode.CLAMP),this._backTexture=new HX.Texture2D,this._backTexture.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._backTexture.setWrapMode(HX.TextureWrapMode.CLAMP),this._fbo1=new HX.FrameBuffer(this._aoTexture),this._fbo2=new HX.FrameBuffer(this._backTexture)},HX.HBAO.prototype=Object.create(HX.Effect.prototype),HX.HBAO.prototype.getAOTexture=function(){return this._aoTexture},Object.defineProperties(HX.HBAO.prototype,{sampleRadius:{get:function(){return this._radius},set:function(t){this._radius=t,this._aoPass.setUniform("halfSampleRadius",.5*this._radius)}},fallOffDistance:{get:function(){this._fallOffDistance=value},set:function(t){this._fallOffDistance=t,this._aoPass.setUniform("rcpFallOffDistance",1/this._fallOffDistance)}},strength:{get:function(){return this._strength},set:function(t){this._strength=t,this._aoPass.setUniform("strengthPerRay",this._strength/this._numRays)}},bias:{get:function(){return this._bias},set:function(t){this._bias=t,this._aoPass.setUniform("bias",this._bias)}},scale:{get:function(){return this._scale},set:function(t){this._scale=t}}}),HX.HBAO.prototype.draw=function(t){var e=this._renderer._width*this._scale,i=this._renderer._height*this._scale;HX.TextureUtils.assureSize(e,i,this._aoTexture,this._fbo1)&&(HX.TextureUtils.assureSize(e,i,this._backTexture,this._fbo2),this._aoPass.setUniform("ditherScale",{x:.25*e,y:.25*i})),HX.pushRenderTarget(this._fbo1),this._drawPass(this._aoPass),HX.pushRenderTarget(this._fbo2),this._blurPass.setUniform("halfTexelOffset",{x:.5/e,y:0}),this._sourceTextureSlot.texture=this._aoTexture,this._drawPass(this._blurPass),HX.popRenderTarget(),this._blurPass.setUniform("halfTexelOffset",{x:0,y:.5/i}),this._sourceTextureSlot.texture=this._backTexture,this._drawPass(this._blurPass),HX.popRenderTarget()},HX.HBAO.prototype._initSampleDirTexture=function(){this._sampleDirTexture=new HX.Texture2D;for(var t=[],e=0,i=0;256>i;++i){var n=i/256*2*Math.PI,r=.5*Math.cos(n)+.5,a=.5*Math.sin(n)+.5;t[e]=Math.round(255*r),t[e+1]=Math.round(255*a),t[e+2]=0,t[e+3]=255,e+=4}this._sampleDirTexture.uploadData(new Uint8Array(t),256,1,!1),this._sampleDirTexture.setFilter(HX.TextureFilter.NEAREST_NOMIP),this._sampleDirTexture.setWrapMode(HX.TextureWrapMode.REPEAT)},HX.HBAO.prototype._initDitherTexture=function(){this._ditherTexture=new HX.Texture2D;var t,e=[],i=0,n=[],r=[];for(t=0;16>t;++t)n.push(t/16),r.push(t/15);HX.shuffle(n),HX.shuffle(r),t=0;for(var a=0;4>a;++a)for(var s=0;4>s;++s){var o=n[t],h=r[t];++t,e[i]=Math.round(255*o),e[i+1]=Math.round(255*h),e[i+2]=0,e[i+3]=255,i+=4}this._ditherTexture.uploadData(new Uint8Array(e),4,4,!1),this._ditherTexture.setFilter(HX.TextureFilter.NEAREST_NOMIP),this._ditherTexture.setWrapMode(HX.TextureWrapMode.REPEAT)},HX.ScreenSpaceReflections=function(t){HX.Effect.call(this),t=t||5,this._numSamples=t;var e={NUM_SAMPLES:t},i=HX.ShaderLibrary.get("ssr_vertex.glsl",e),n=HX.ShaderLibrary.get("ssr_fragment.glsl",e);this._pass=new HX.EffectPass(i,n),this._sourceTextureSlot=this._pass.getTextureSlot("source"),this._scale=.5,this.stepSize=Math.max(500/t,1),this.maxDistance=500,this.maxRoughness=.3,this._ssrTexture=new HX.Texture2D,this._ssrTexture.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._ssrTexture.setWrapMode(HX.TextureWrapMode.CLAMP),this._fbo=new HX.FrameBuffer(this._ssrTexture)},HX.ScreenSpaceReflections.prototype=Object.create(HX.Effect.prototype),Object.defineProperties(HX.ScreenSpaceReflections.prototype,{stepSize:{get:function(){return this._stepSize},set:function(t){this._stepSize=t,this._pass.setUniform("stepSize",t)}},maxDistance:{get:function(){return this._stepSize},set:function(t){this._stepSize=t,this._pass.setUniform("maxDistance",t)}},maxRoughness:{get:function(){return this._stepSize},set:function(t){this._stepSize=t,this._pass.setUniform("maxRoughness",t)}},scale:{get:function(){return this._scale},set:function(t){this._scale=t,this._scale>1&&(this._scale=1)}},sourceTexture:{get:function(){return this._sourceTextureSlot.texture},set:function(t){this._sourceTextureSlot.texture=t}}}),HX.ScreenSpaceReflections.prototype.getSSRTexture=function(){return this._ssrTexture},HX.ScreenSpaceReflections.prototype.draw=function(t){var e=this._renderer._width*this._scale,i=this._renderer._height*this._scale;HX.TextureUtils.assureSize(e,i,this._ssrTexture,this._fbo)&&this._pass.setUniform("ditherTextureScale",{x:e/HX.DEFAULT_2D_DITHER_TEXTURE.width,y:i/HX.DEFAULT_2D_DITHER_TEXTURE.height}),HX.pushRenderTarget(this._fbo),this._drawPass(this._pass),HX.popRenderTarget()},HX.SSAO=function(t){t=t||8,t>64&&(t=64),this._numSamples=t,this._strength=1,this._fallOffDistance=1,this._radius=.5,this._scale=.5,this._ditherTexture=null,HX.Effect.call(this),this._ssaoPass=new HX.EffectPass(null,HX.ShaderLibrary.get("ssao_fragment.glsl",{NUM_SAMPLES:t})),this._blurPass=new HX.EffectPass(null,HX.ShaderLibrary.get("ao_blur_fragment.glsl")),this._initSamples(),this._initDitherTexture(),this._ssaoPass.setUniform("strengthPerSample",2*this._strength/this._numSamples),this._ssaoPass.setUniform("rcpFallOffDistance",1/this._fallOffDistance),this._ssaoPass.setUniform("sampleRadius",this._radius),this._ssaoPass.setTexture("ditherTexture",this._ditherTexture),this._sourceTextureSlot=this._blurPass.getTextureSlot("source"),this._ssaoTexture=new HX.Texture2D,this._ssaoTexture.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._ssaoTexture.setWrapMode(HX.TextureWrapMode.CLAMP),this._backTexture=new HX.Texture2D,this._backTexture.setFilter(HX.TextureFilter.BILINEAR_NOMIP),this._backTexture.setWrapMode(HX.TextureWrapMode.CLAMP),this._fbo1=new HX.FrameBuffer(this._ssaoTexture),this._fbo2=new HX.FrameBuffer(this._backTexture)},HX.SSAO.prototype=Object.create(HX.Effect.prototype),HX.SSAO.prototype.getAOTexture=function(){return this._ssaoTexture},Object.defineProperties(HX.SSAO.prototype,{sampleRadius:{get:function(){return this._radius},set:function(t){this._radius=t,this._ssaoPass.setUniform("sampleRadius",this._radius)}},fallOffDistance:{get:function(){this._fallOffDistance=value},set:function(t){this._fallOffDistance=t,this._ssaoPass.setUniform("rcpFallOffDistance",1/this._fallOffDistance)}},strength:{get:function(){return this._strength},set:function(t){this._strength=t,this._ssaoPass.setUniform("strengthPerSample",2*this._strength/this._numSamples)}},scale:{get:function(){return this._scale},set:function(t){this._scale=t}}}),HX.SSAO.prototype._initSamples=function(){for(var t=[],e=0,i=HX.DEFAULT_POISSON_SPHERE,n=0;n<this._numSamples;++n){var r=i[3*n],a=i[3*n+1],s=i[3*n+2];t[e++]=Math.pow(r,6),t[e++]=Math.pow(a,6),t[e++]=Math.pow(s,6)}this._ssaoPass.setUniformArray("samples",new Float32Array(t))},HX.SSAO.prototype.draw=function(t){var e=this._renderer._width*this._scale,i=this._renderer._height*this._scale;HX.TextureUtils.assureSize(e,i,this._ssaoTexture,this._fbo1)&&(HX.TextureUtils.assureSize(e,i,this._backTexture,this._fbo2),this._ssaoPass.setUniform("ditherScale",{x:.25*e,y:.25*i})),HX.pushRenderTarget(this._fbo1),this._drawPass(this._ssaoPass),HX.pushRenderTarget(this._fbo2),this._blurPass.setUniform("halfTexelOffset",{x:.5/e,y:0}),this._sourceTextureSlot.texture=this._ssaoTexture,this._drawPass(this._blurPass),HX.popRenderTarget(),this._blurPass.setUniform("halfTexelOffset",{x:0,y:.5/i}),this._sourceTextureSlot.texture=this._backTexture,this._drawPass(this._blurPass),HX.popRenderTarget()},HX.SSAO.prototype._initDitherTexture=function(){this._ditherTexture=new HX.Texture2D;var t=[126,255,126,255,135,253,105,255,116,51,26,255,137,57,233,255,139,254,121,255,56,61,210,255,227,185,73,255,191,179,30,255,107,245,173,255,205,89,34,255,191,238,138,255,56,233,125,255,198,228,161,255,85,13,164,255,140,248,168,255,147,237,65,255];this._ditherTexture.uploadData(new Uint8Array(t),4,4,!1),this._ditherTexture.setFilter(HX.TextureFilter.NEAREST_NOMIP),this._ditherTexture.setWrapMode(HX.TextureWrapMode.REPEAT)},HX.ToneMapEffect=function(t){return this._adaptive=void 0===t?!1:t,!this._adaptive||HX.EXT_SHADER_TEXTURE_LOD&&HX.EXT_HALF_FLOAT_TEXTURES?(HX.Effect.call(this),this._toneMapPass=this._createToneMapPass(),this._adaptive&&(this._extractLuminancePass=new HX.EffectPass(null,HX.ShaderLibrary.get("tonemap_reference_fragment.glsl")),this._extractLuminancePass.blendState=new HX.BlendState(HX.BlendFactor.CONSTANT_ALPHA,HX.BlendFactor.ONE_MINUS_CONSTANT_ALPHA,HX.BlendOperation.ADD,new HX.Color(1,1,1,1)),this._luminanceMap=new HX.Texture2D,this._luminanceMap.initEmpty(256,256,HX.GL.RGBA,HX.EXT_HALF_FLOAT_TEXTURES.HALF_FLOAT_OES),this._luminanceFBO=new HX.FrameBuffer([this._luminanceMap]),this._luminanceFBO.init(),this._adaptationRate=2e3,this._toneMapPass.setTexture("hx_luminanceMap",this._luminanceMap),this._toneMapPass.setUniform("hx_luminanceMipLevel",Math.log(this._luminanceMap._width)/Math.log(2))),void(this.exposure=0)):(console.log("Warning: adaptive tone mapping not supported, using non-adaptive"),void(this._adaptive=!1))},HX.ToneMapEffect.prototype=Object.create(HX.Effect.prototype),HX.ToneMapEffect.prototype._createToneMapPass=function(){throw new Error("Abstract method called!")},HX.ToneMapEffect.prototype.dispose=function(){HX.Effect.prototype.dispose.call(this),this._luminanceFBO.dispose(),this._luminanceMap.dispose()},HX.ToneMapEffect.prototype.draw=function(t){if(this._adaptive){if(!this._isSupported)return;var e=this._adaptationRate>0?t/this._adaptationRate:1;e>1&&(e=1),this._extractLuminancePass.blendState.color.w=e,HX.pushRenderTarget(this._luminanceFBO),this._drawPass(this._extractLuminancePass),this._luminanceMap.generateMipmap(),HX.popRenderTarget(this._luminanceFBO)}this._swapHDRBuffers(),this._drawPass(this._toneMapPass)},Object.defineProperties(HX.ToneMapEffect.prototype,{exposure:{get:function(){return this._exposure},set:function(t){this._exposure=t,this._isSupported&&this._toneMapPass.setUniform("hx_exposure",Math.pow(2,t))}},adaptationRate:{get:function(){return this._adaptationRate},set:function(t){this._adaptationRate=t}}}),HX.ReinhardToneMapEffect=function(t){HX.ToneMapEffect.call(this,t)},HX.ReinhardToneMapEffect.prototype=Object.create(HX.ToneMapEffect.prototype),HX.ReinhardToneMapEffect.prototype._createToneMapPass=function(){var t={};return this._adaptive&&(t.ADAPTIVE=1),new HX.EffectPass(null,HX.ShaderLibrary.get("snippets_tonemap.glsl",t)+"\n"+HX.ShaderLibrary.get("tonemap_reinhard_fragment.glsl"))},HX.FilmicToneMapEffect=function(t){HX.ToneMapEffect.call(this,t),this._outputsGamma=!0},HX.FilmicToneMapEffect.prototype=Object.create(HX.ToneMapEffect.prototype),HX.FilmicToneMapEffect.prototype._createToneMapPass=function(){var t={};return this._adaptive&&(t.ADAPTIVE=1),new HX.EffectPass(null,HX.ShaderLibrary.get("snippets_tonemap.glsl",t)+"\n"+HX.ShaderLibrary.get("tonemap_filmic_fragment.glsl"))},HX.ModelParser={_registeredParsers:[]},HX.ModelParser.registerParser=function(t,e){HX.ModelParser._registeredParsers[t]=e},HX.ModelParser.getParser=function(t){var e=t.lastIndexOf("."),i=t.substr(e+1).toLowerCase();return new HX.ModelParser._registeredParsers[i]},HX.ModelParser.parse=function(t,e,i){var n=HX.ModelParser.getParser(t),r=new HX.URLLoader;r.setType(n.dataType()),r.onComplete=function(t){n.parse(t,e,i)},r.onError=function(e){console.warn("Failed loading "+t+". Error code: "+e),i&&i(e)},r.load(t)},HX.OBJParser=function(){this._groupData=[],this._vertices=[],this._normals=[],this._uvs=[],this._modelData=null,this._hasNormals=!1},HX.OBJParser.prototype={dataType:function(){return HX.URLLoader.DATA_TEXT},parse:function(t,e){var i=t.split("\n"),n=i.length;this._pushNewGroup("default");for(var r=0;n>r;++r)this._parseLine(i[r]);this._translateModelData(),e(this._modelData)},_parseLine:function(t){if(0!=t.length&&"#"!=t.charAt(0)){var e=t.split(" ");switch(e[0]){case"usemtl":this._pushNewGroup();break;case"v":this._vertices.push(parseFloat(e[1]),parseFloat(e[2]),parseFloat(e[3]));break;case"vt":this._uvs.push(parseFloat(e[1]),parseFloat(e[2]));break;case"vn":this._normals.push(parseFloat(e[1]),parseFloat(e[2]),parseFloat(e[3]));break;case"o":this._pushNewGroup(e[1]);break;case"g":this._pushNewGroup(e[1]);break;case"f":this._parseFaceData(e);break;default:console.log("OBJ tag ignored or unsupported: "+e[0])}}},_pushNewGroup:function(t){this._activeGroup=new HX.OBJParser.GroupData,this._activeGroup.name=t||"Group"+this._groupData.length,this._groupData.push(this._activeGroup)},_parseFaceData:function(t){for(var e=new HX.OBJParser.FaceData,i=t.length,n=1;i>n;++n){var r=new HX.OBJParser.FaceVertexData;e.vertices.push(r);var a=t[n].split("/"),s=3*(a[0]-1);r.posX=this._vertices[s],r.posY=this._vertices[s+1],r.posZ=this._vertices[s+2],a.length>1&&(s=2*(a[1]-1),r.uvU=this._uvs[s],r.uvV=this._uvs[s+1],a.length>2&&(s=3*(a[2]-1),this._hasNormals=!0,r.normalX=this._normals[s],r.normalY=this._normals[s+1],r.normalZ=this._normals[s+2]))}this._activeGroup.faces.push(e),this._activeGroup.numIndices+=4==t.length?3:6},_translateModelData:function(){this._modelData=new HX.ModelData;for(var t=this._groupData.length,e=0;t>e;++e){var i=this._groupData[e];0!=i.numIndices&&this._modelData.addMeshData(this._translateMeshData(i))}},_translateMeshData:function(t){for(var e=HX.MeshData.createDefaultEmpty(),i=[],n=new Array(t.numIndices),r=0,a=0,s=t.faces,o=s.length,h=0;o>h;++h){for(var _=s[h],l=_.vertices,c=l.length,u=0;c>u;++u){var m=l[u],f=m.getHash();i.hasOwnProperty(f)||(i[f]={index:r++,vertex:m})}n[a]=i[l[0].getHash()].index,n[a+1]=i[l[1].getHash()].index,n[a+2]=i[l[2].getHash()].index,a+=3,4==c&&(n[a]=i[l[0].getHash()].index,n[a+1]=i[l[2].getHash()].index,n[a+2]=i[l[3].getHash()].index,a+=3)}var d=new Array(r*HX.MeshData.DEFAULT_VERTEX_SIZE);for(var f in i)if(i.hasOwnProperty(f)){var p=i[f],X=p.vertex,H=p.index*HX.MeshData.DEFAULT_VERTEX_SIZE;d[H]=X.posX,d[H+1]=X.posY,d[H+2]=X.posZ,d[H+3]=X.normalX,d[H+4]=X.normalY,d[H+5]=X.normalZ,d[H+6]=0,d[H+7]=0,d[H+8]=0,d[H+9]=1,d[H+10]=X.uvU,d[H+11]=X.uvV}e.setVertexData(d),e.setIndexData(n);var g=HX.NormalTangentGenerator.MODE_TANGENTS;this._hasNormals||(g|=HX.NormalTangentGenerator.MODE_NORMALS);var x=new HX.NormalTangentGenerator;return x.generate(e,g,!0),e}},HX.ModelParser.registerParser("obj",HX.OBJParser),HX.OBJParser.FaceVertexData=function(){this.posX=0,this.posY=0,this.posZ=0,this.uvU=0,this.uvV=0,this.normalX=0,this.normalY=0,this.normalZ=0,this._hash=""},HX.OBJParser.FaceVertexData.prototype={getHash:function(){return this._hash||(this._hash=this.posX+"/"+this.posY+"/"+this.posZ+"/"+this.uvU+"/"+this.uvV+"/"+this.normalX+"/"+this.normalY+"/"+this.normalZ+"/"),this._hash}},HX.OBJParser.FaceData=function(){this.vertices=[]},HX.OBJParser.GroupData=function(){this.numIndices=0,this.faces=[],this.name=""},HX.FPSCounter=function(t){this._numFrames=t||1,this._frames=[],this._maxFPS=void 0,this._minFPS=void 0,this._currentFPS=0,this._averageFPS=0,this._runningSum=0;for(var e=0;e<this._numFrames;++e)this._frames[e]=0;this._index=0},HX.FPSCounter.prototype={update:function(t){this._currentFPS=1e3/t,this._runningSum-=this._frames[this._index],this._runningSum+=this._currentFPS,this._averageFPS=this._runningSum/this._numFrames,this._frames[this._index++]=this._currentFPS,this._index==this._numFrames&&(this._index=0),(void 0===this._maxFPS||this._currentFPS>this._maxFPS)&&(this._maxFPS=this._currentFPS),(void 0===this._minFPS||this._currentFPS<this._minFPS)&&(this._minFPS=this._currentFPS)},getLastFrameFPS:function(){return Math.round(this._currentFPS)},getAverageFPS:function(){return Math.round(this._averageFPS)},getMaxFPS:function(){return Math.round(this._maxFPS)},getMinFPS:function(){return Math.round(this._minFPS)},reset:function(){this._maxFPS=void 0,this._minFPS=void 0}},function(){for(var t=0,e=["ms","moz","webkit","o"],i=0;i<e.length&&!window.requestAnimationFrame;++i)window.requestAnimationFrame=window[e[i]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[i]+"CancelAnimationFrame"]||window[e[i]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,i){var n=(new Date).getTime(),r=Math.max(0,16-(n-t)),a=window.setTimeout(function(){e(n+r)},r);return t=n+r,a}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)})}(),HX.FrameTicker=function(){this._isRunning=!1,this._callback=void 0,this._dt=0,this._currentTime=0},HX.FrameTicker.prototype={constructor:HX.FrameTicker,start:function(t){this._callback=t,this._currentTime=this._getTime(),this._isRunning=!0,this._tick(),this._tick._this=this},stop:function(){this._isRunning=!1},get dt(){return this._dt},get time(){return this._currentTime},_tick:function(){if(this._isRunning){self.requestAnimationFrame(this._tick.bind(this));var t=this._getTime();this._dt=t-this._currentTime,this._dt!==this._dt&&(this._dt=0),this._currentTime=t,this._callback()}},_getTime:function(){return void 0===self.performance||void 0==self.performance.now?Date.now():self.performance.now()}},HX.NormalTangentGenerator=function(){this._meshData=null,this._mode=0,this._positionOffset=0,this._normalOffset=0,this._tangentOffset=0,this._faceNormals=null,this._faceTangents=null,this._faceBitangents=null},HX.NormalTangentGenerator.MODE_NORMALS=1,HX.NormalTangentGenerator.MODE_TANGENTS=2,HX.NormalTangentGenerator.prototype={generate:function(t,e,i){void 0===i&&(i=!0),this._mode=void 0===e?HX.NormalTangentGenerator.MODE_NORMALS|HX.NormalTangentGenerator.MODE_TANGENTS:e,this._meshData=t,this._positionOffset=t.getVertexAttribute("hx_position").offset,this._normalOffset=t.getVertexAttribute("hx_normal").offset,this._tangentOffset=t.getVertexAttribute("hx_tangent").offset,this._uvOffset=t.getVertexAttribute("hx_texCoord").offset,this._vertexStride=t.getVertexStride(),this._calculateFaceVectors(i),this._calculateVertexVectors()},_calculateFaceVectors:function(t){var e=this._meshData._indexData.length;0!=(this._mode&HX.NormalTangentGenerator.MODE_NORMALS)&&(this._faceNormals=new Array(e)),0!=(this._mode&HX.NormalTangentGenerator.MODE_TANGENTS)&&(this._faceTangents=new Array(e),this._faceBitangents=new Array(e));for(var i=new HX.Float4,n=new HX.Float4,r=new HX.Float4,a=new HX.Float4,s=new HX.Float4,o=new HX.Float4,h=new HX.Float2,_=new HX.Float2,l=new HX.Float2,c=new HX.Float2,u=new HX.Float2,m=0;e>m;m+=3)this._getFloat3At(m,this._positionOffset,a),this._getFloat3At(m+1,this._positionOffset,s),this._getFloat3At(m+2,this._positionOffset,o),this._getFloat2At(m,this._uvOffset,h),this._getFloat2At(m+1,this._uvOffset,_),this._getFloat2At(m+2,this._uvOffset,l),this._faceNormals&&(s.subtract(a),o.subtract(a),i.cross(s,o),t||i.normalize(),this._faceNormals[m]=i.x,this._faceNormals[m+1]=i.y,this._faceNormals[m+2]=i.z),this._faceTangents&&(c.difference(_,h),u.difference(l,h),n.scaled(u.y,s),r.scaled(c.y,o),i.difference(n,r),i.normalize(),this._faceTangents[m]=i.x,this._faceTangents[m+1]=i.y,this._faceTangents[m+2]=i.z,n.scaled(u.x,s),r.scaled(c.x,o),i.difference(r,n),this._faceBitangents[m]=i.x,this._faceBitangents[m+1]=i.y,this._faceBitangents[m+2]=i.z)},_calculateVertexVectors:function(){this._zeroVectors();for(var t=this._faceTangents?[]:0,e=this._meshData._indexData,i=this._meshData._vertexData,n=e.length,r=0;n>r;++r){var a=e[r],s=this._normalOffset+a*this._vertexStride,o=this._tangentOffset+a*this._vertexStride,h=3*a,_=3*Math.floor(r/3);this._faceNormals&&(i[s]+=this._faceNormals[_],i[s+1]+=this._faceNormals[_+1],i[s+2]+=this._faceNormals[_+2]),this._faceTangents&&(i[o]+=this._faceTangents[_],i[o+1]+=this._faceTangents[_+1],i[o+2]+=this._faceTangents[_+2],t[h]+=this._faceBitangents[_],t[h+1]+=this._faceBitangents[_+1],t[h+2]+=this._faceBitangents[_+2]),o+=this._vertexStride}this._normalize(t)},_zeroVectors:function(){for(var t=this._meshData._vertexData,e=t.length/this._vertexStride,i=this._normalOffset,n=this._tangentOffset,r=0;e>r;++r)this._mode&HX.NormalTangentGenerator.MODE_NORMALS&&(t[i]=0,t[i+1]=0,t[i+2]=0),this._mode&HX.NormalTangentGenerator.MODE_TANGENTS&&(t[n]=0,t[n+1]=0,t[n+2]=0),i+=this._vertexStride,n+=this._vertexStride},_normalize:function(t){for(var e=this._meshData._vertexData,i=e.length/this._vertexStride,n=this._normalOffset,r=this._tangentOffset,a=0,s=new HX.Float4,o=new HX.Float4,h=new HX.Float4,_=new HX.Float4,l=0;i>l;++l)s.x=e[n],s.y=e[n+1],s.z=e[n+2],this._mode&HX.NormalTangentGenerator.MODE_NORMALS&&(s.normalize(),e[n]=s.x,e[n+1]=s.y,e[n+2]=s.z),this._mode&HX.NormalTangentGenerator.MODE_TANGENTS&&(o.x=e[r],o.y=e[r+1],o.z=e[r+2],o.normalize(),h.x=t[a],h.y=t[a+1],h.z=t[a+2],_.cross(o,s),e[r]=o.x,e[r+1]=o.y,e[r+2]=o.z,e[r+3]=HX.dot3(h,_)>0?1:-1),n+=this._vertexStride,r+=this._vertexStride},_getFloat3At:function(t,e,i){var n=this._meshData._indexData,r=e+n[t]*this._vertexStride;i.x=this._meshData._vertexData[r],i.y=this._meshData._vertexData[r+1],i.z=this._meshData._vertexData[r+2]},_getFloat2At:function(t,e,i){var n=this._meshData._indexData,r=e+n[t]*this._vertexStride;i.x=this._meshData._vertexData[r],i.y=this._meshData._vertexData[r+1]}};